// Generated code for Python source for module 'numpy.f2py.rules'
// created by Nuitka version 0.5.19

// This code is in part copyright 2016 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__helpers.hpp"

// The _module_numpy$f2py$rules is a Python object pointer of module type.

// Note: For full compatibility with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *module_numpy$f2py$rules;
PyDictObject *moduledict_numpy$f2py$rules;

// The module constants used
static PyObject *const_str_plain_kwlistopt;
extern PyObject *const_str_digest_69865d8d974379ad2496cd131169c31f;
static PyObject *const_str_digest_43c80c0d52153b0bc6c55b6b1858bbaa;
static PyObject *const_str_digest_49613c72153db8c0c685d9a635c546dd;
static PyObject *const_str_plain_aux_rules;
static PyObject *const_str_digest_b4363c0f10eeed06a28d0eea0c3aeb40;
static PyObject *const_str_digest_d3a44657679a3e652a4d721177ebd2a1;
static PyObject *const_str_digest_e6791082bde6b05eedc1689a810e4aec;
static PyObject *const_str_digest_7ab7fdc0f90c620e6cb6b3d34ad64258;
extern PyObject *const_str_plain_auxfuncs;
static PyObject *const_list_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34_list;
extern PyObject *const_str_plain_applyrules;
extern PyObject *const_str_plain_dorestdoc;
static PyObject *const_str_digest_216b60f2b0931a71c0d57c594510b6d0;
extern PyObject *const_str_plain_complex_long_double;
extern PyObject *const_str_plain_isintent_aux;
extern PyObject *const_str_plain_wrap;
static PyObject *const_dict_8074601cdd243b85d166caacc3b89ad0;
static PyObject *const_str_plain_modulebody;
static PyObject *const_str_digest_2f9db3be7f6d42c0b8554ae45751ef40;
extern PyObject *const_str_plain_unsigned_long_long;
static PyObject *const_str_digest_bfaaa4c1dfc4c9a8695c608949396cef;
extern PyObject *const_str_plain_CHECKGENERIC;
static PyObject *const_str_plain_initf2pywraphook;
extern PyObject *const_tuple_int_0_int_0_tuple;
static PyObject *const_str_digest_283b24e30d1fa10525d4197b5a273d15;
extern PyObject *const_str_plain_issubroutine;
static PyObject *const_tuple_str_digest_7e683b4fcd50010e69923f70359689eb_tuple;
extern PyObject *const_str_plain_csrc;
extern PyObject *const_str_plain_isintent_hide;
static PyObject *const_str_digest_2deaf67a44d2415292c19cfb0aa50a8c;
static PyObject *const_str_digest_387e5976948d489f60396f8097e151c3;
static PyObject *const_str_digest_93f604e3dd7562d0f7b06a2fb41b3994;
extern PyObject *const_str_plain_latexdoc;
static PyObject *const_str_digest_f2b8e8c1719fcee60c4e7b5e4eb1f6d0;
static PyObject *const_str_digest_755ecb11d7620a38d1696cb048c38ef9;
static PyObject *const_str_digest_0101752f19a62566c8b5930aa92e5adc;
extern PyObject *const_str_plain_args;
static PyObject *const_tuple_str_digest_bf2b4eeb2bb20a21421d678738b5a75e_tuple;
extern PyObject *const_str_plain_write;
static PyObject *const_str_digest_1f723c756343a499dbe333f14ab5d732;
extern PyObject *const_str_digest_ced081d2a6b71e298fe676a098557262;
extern PyObject *const_str_plain_a;
extern PyObject *const_str_plain_externroutines;
static PyObject *const_str_digest_63f9320fb96629303000a101f4359c54;
static PyObject *const_str_digest_6fbcce788ee343047e2cb747b93c7fac;
static PyObject *const_str_digest_cc8aef51ccd568f750b3cc95ee24cb9e;
extern PyObject *const_list_str_digest_208bb9b9de0c9678f31d3d5b4fa77779_list;
static PyObject *const_str_plain__rules;
static PyObject *const_str_digest_bb0849e7e2d4c1c22783c604269c9e5c;
extern PyObject *const_str_plain_decl;
extern PyObject *const_str_plain_typedefs;
static PyObject *const_str_digest_25e4729fdbfcd617a477e2c1623c74da;
extern PyObject *const_str_plain_os;
static PyObject *const_list_9af870e8ed9f6c337cdc0c36a763a6f2_list;
static PyObject *const_str_digest_7c229b69f728161f89793a537f326cd6;
static PyObject *const_str_digest_a5e9d3b21a92b143ef24eb6c172b949c;
extern PyObject *const_str_plain_islong_complex;
extern PyObject *const_str_plain_buildmodule;
static PyObject *const_str_digest_4b201bb14560b4f560e6beebf146a1b3;
static PyObject *const_str_digest_b5bc79054a4dd1a07d4a642db1bb5e6c;
static PyObject *const_str_digest_7c37896c780e69c4def0a3d853f193f1;
static PyObject *const_str_digest_32ac217bdff7c6caf99bb8a973372a81;
static PyObject *const_str_plain_topyarr;
extern PyObject *const_str_plain_isfunction;
extern PyObject *const_str_plain_isexternal;
static PyObject *const_str_digest_9f16671c33eb6f2ff404ed7978cd1586;
static PyObject *const_str_digest_bf2b4eeb2bb20a21421d678738b5a75e;
static PyObject *const_str_plain_funcwrappers2;
extern PyObject *const_str_plain_iscomplexfunction_warn;
static PyObject *const_list_32f32ffbbd5d0469a259f67cd7bedf23_list;
static PyObject *const_str_plain_kwlist;
static PyObject *const_str_digest_cc2eda06485ca42feb0b61a8d94b80aa;
static PyObject *const_str_digest_c2ccddf34d5f3ccfcc1d66ae9e062936;
static PyObject *const_str_digest_29c8a7dbfff0f5e57cc5a0cd26809507;
static PyObject *const_str_digest_787bc58289c516f4da3da43b0da58897;
extern PyObject *const_str_plain_need;
extern PyObject *const_str_plain_routnote;
static PyObject *const_str_digest_16c89f50945435dd0988659c1c019bec;
static PyObject *const_str_digest_11c30c96a295326f303a00456c46c11c;
extern PyObject *const_str_plain_items;
extern PyObject *const_str_plain_islogical;
extern PyObject *const_str_plain_isrequired;
extern PyObject *const_str_digest_685077f1f38d82b206cc793ea02e01a1;
static PyObject *const_str_digest_71dc88adbdb5784ff4dcaa433123b169;
static PyObject *const_list_2a1cb5f1b6ad96684950fc2bb3e18869_list;
extern PyObject *const_str_plain_buildapi;
static PyObject *const_str_digest_ba731a222a3154fea200e0b8ef7551a0;
extern PyObject *const_str_plain__check;
extern PyObject *const_list_str_digest_3d5ba40ebd32fc4950e50da9cea3a5ad_list;
extern PyObject *const_str_plain_reverse;
static PyObject *const_tuple_str_digest_2c46aa3007c6fd6726f2d9aac9bc2818_tuple;
extern PyObject *const_str_plain_STRINGFREE;
extern PyObject *const_str_plain_isstringarray;
extern PyObject *const_str_plain_isunsigned_long_long;
static PyObject *const_str_digest_06b92084407c057d55dd07c236c4d566;
static PyObject *const_str_digest_44d06b0ec49d7cbf872e01bc77a777d5;
static PyObject *const_str_digest_c760157a12395121e8e8ddcb4c62d725;
static PyObject *const_str_digest_7e7874092dc43d7a6c694d90bfa71c65;
extern PyObject *const_str_digest_388fb92bc2e3d76b8d35eb704c2fd40e;
extern PyObject *const_str_plain_isarray;
extern PyObject *const_str_plain_ret;
static PyObject *const_str_digest_4222d792060d303be1cfc07d37890d79;
static PyObject *const_str_digest_71af71dc0b26aad8d87ceab249f8ba1b;
static PyObject *const_str_digest_74ecdf96ef9d47fce851c9d30f38711e;
static PyObject *const_str_digest_fe69aab46c78e8d0544f13c568d75e6a;
static PyObject *const_str_plain_check_rules;
static PyObject *const_str_digest_af0fa9a92532c606e0e65de481890051;
extern PyObject *const_str_plain_check;
static PyObject *const_tuple_str_digest_c5e6a55b6801b244758895426e3542d9_tuple;
extern PyObject *const_str_plain_userincludes;
static PyObject *const_str_digest_fb0ac3319e29a078566c27883e0fcda1;
extern PyObject *const_str_plain_isdummyroutine;
static PyObject *const_dict_c3b8e398c8954454fba85f0a68a2b3f2;
extern PyObject *const_str_plain_isunsigned_shortarray;
extern PyObject *const_str_plain_use_rules;
static PyObject *const_list_str_digest_2e018d041c7e280e775f591990904aec_list;
extern PyObject *const_str_plain_iscomplexarray;
static PyObject *const_str_digest_1bd186189b55a7f24f5b08c35b6e375e;
static PyObject *const_str_plain_need_cfuncs;
extern PyObject *const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70;
static PyObject *const_str_digest_a83c90fa5fd3daaef5d52b46677ba4ec;
static PyObject *const_str_digest_4fd4446f18d1b901104969530d10ded8;
extern PyObject *const_str_plain_docsignature;
static PyObject *const_list_0a418c59c89f9fccd0e4ae0f11838976_list;
static PyObject *const_str_plain_modnote;
static PyObject *const_str_plain_cfs;
static PyObject *const_str_digest_23f56deffe35f9f8fbfb91faf4e32791;
extern PyObject *const_str_plain_MINMAX;
static PyObject *const_tuple_str_digest_ae2f2b951c1c5b9ca49bec8c509fa575_str_newline_tuple;
static PyObject *const_str_plain_initf2pywraphooks;
static PyObject *const_str_digest_807a8edf883cc73f1196a6287772f84f;
static PyObject *const_str_plain_routine_def;
extern PyObject *const_str_plain_CHECKARRAY;
extern PyObject *const_str_plain_errmess;
static PyObject *const_str_digest_4565e1342e713e5280b35b0d095f4f74;
extern PyObject *const_str_plain_void;
static PyObject *const_str_plain_declfortranroutine;
static PyObject *const_tuple_str_digest_9c66944f85ececbe0338840a546bb4dd_tuple;
extern PyObject *const_str_plain_code;
static PyObject *const_tuple_str_digest_c657b0be22471abcb9376de73f2ad796_tuple;
static PyObject *const_str_digest_47726514eddf542ce57be98491d6745b;
static PyObject *const_str_plain_fsrc;
static PyObject *const_str_plain_nthk;
extern PyObject *const_str_plain_isintent_callback;
extern PyObject *const_str_plain_coutput;
static PyObject *const_str_digest_12736df3358c55f9c88205a9d038e3cd;
static PyObject *const_str_digest_be1bbd329187a280a32151e905c5811c;
static PyObject *const_str_digest_d5bb8fcff9f6c488a0e6b16adb0537fe;
static PyObject *const_str_digest_34ea19e92b020553baa1048d998366f6;
extern PyObject *const_str_plain_iscomplexfunction;
static PyObject *const_str_digest_c478f6346eb5655aa8b63e42717f98d3;
extern PyObject *const_str_plain_latex;
static PyObject *const_str_digest_c4d2c3ebecea3ad233be322292339553;
static PyObject *const_str_plain_latexdocsignatureshort;
static PyObject *const_str_digest_2c65e7a3708b15343e85146c682ba2c2;
static PyObject *const_str_digest_c3337c5bb37e9aea6b2f4bdfd46c1465;
extern PyObject *const_str_plain_F_WRAPPEDFUNC;
extern PyObject *const_str_plain_buildusevars;
static PyObject *const_str_plain_routdebugleave;
static PyObject *const_str_digest_ba6df2cca25e244289fd58a116476aaa;
static PyObject *const_str_digest_12cebb8a70d033198d60b48030c9e3fe;
static PyObject *const_str_digest_79ad26fe7b8e008519c2537938b503e9;
extern PyObject *const_str_plain_string;
extern PyObject *const_str_plain_isstringfunction;
static PyObject *const_str_digest_b749d4e775149fbefd6170208d066d79;
extern PyObject *const_str_plain_nb;
static PyObject *const_str_digest_4c59686e115e363877096931bfcc9764;
static PyObject *const_str_digest_dc8dd5a6a650d06eb556e20e18906c89;
extern PyObject *const_int_pos_72;
extern PyObject *const_str_plain_capi_maps;
static PyObject *const_str_plain_xaformat;
static PyObject *const_str_digest_3901229eb47cd28cbfe43558ace8a7fe;
static PyObject *const_tuple_str_digest_8eac57ad299a2b6e5510775f127c79ae_tuple;
extern PyObject *const_str_digest_d1ebec83b319c7a5ff58a0b1ba8c192e;
static PyObject *const_str_digest_8f370fb2a3fdd500cfa3107631ac2b55;
static PyObject *const_tuple_str_digest_af0fa9a92532c606e0e65de481890051_tuple;
extern PyObject *const_str_plain_um;
static PyObject *const_str_digest_a60174a114848d728a7bac00cb12b7d4;
extern PyObject *const_str_digest_61e182e7ec186c9e9c0ffbab603428ea;
static PyObject *const_list_str_plain_F_WRAPPEDFUNC_str_plain_F_FUNC_list;
static PyObject *const_str_digest_3a3271ef4159a1c24ad0288a211dee55;
static PyObject *const_str_digest_2a298462210506c569d120ca46f60e5c;
extern PyObject *const_str_plain_deepcopy;
extern PyObject *const_tuple_empty;
extern PyObject *const_str_plain_hasnote;
static PyObject *const_str_digest_39e221f238aad8a83601c6acb181457f;
static PyObject *const_str_plain_docsignoptshort;
extern PyObject *const_str_plain_interface;
static PyObject *const_str_digest_482888043114fac9592902783c464a6e;
static PyObject *const_str_digest_d704ce9f38840583240e1e34a2cd70e6;
extern PyObject *const_str_plain_l_not;
static PyObject *const_list_str_digest_387e5976948d489f60396f8097e151c3_list;
extern PyObject *const_str_plain_ar;
static PyObject *const_str_digest_23871080073f259d5d6f43f02f0c36c2;
extern PyObject *const_str_plain_rd;
static PyObject *const_list_str_digest_d1ebec83b319c7a5ff58a0b1ba8c192e_list;
extern PyObject *const_str_plain_buildhooks;
static PyObject *const_str_plain_docsignshort;
static PyObject *const_str_plain_module_rules;
static PyObject *const_str_plain_funcwrappers;
static PyObject *const_str_plain_docsignxashort;
static PyObject *const_str_digest_67673829ecc7f22967de3f42af9c6968;
extern PyObject *const_str_plain_dictappend;
extern PyObject *const_str_plain_method;
static PyObject *const_str_digest_9c66944f85ececbe0338840a546bb4dd;
extern PyObject *const_str_plain_f90modhooks;
static PyObject *const_str_digest_345c26e0f9bcfb91e65723d2b555931c;
static PyObject *const_str_digest_d1ccc851c0352577c15e6c38110b33c1;
extern PyObject *const_str_plain_freemem;
static PyObject *const_str_digest_f56fee16ec8153a6367a71f0309f3dea;
extern PyObject *const_str_digest_3638426b43758747165faf274e9fd2c4;
extern PyObject *const_str_plain_latexdocstrout;
extern PyObject *const_str_plain_cfuncs;
extern PyObject *const_str_plain_isscalar;
static PyObject *const_str_digest_dbbf0270f90bfcbfa51c1e227e53f0e4;
static PyObject *const_str_digest_bc622957f475703ce5372fad3a11dd2a;
static PyObject *const_str_digest_99dfc913087e0ea1a18c8ad788d0d99b;
extern PyObject *const_str_plain_docstrreq;
static PyObject *const_tuple_88c260f85cd63106b992b7767f2d95e8_tuple;
static PyObject *const_str_digest_7e6e68b4e0121e9d083f9892bcee2b5b;
static PyObject *const_str_digest_2c46aa3007c6fd6726f2d9aac9bc2818;
extern PyObject *const_str_plain_time;
static PyObject *const_str_plain_cleanupfrompyobj;
static PyObject *const_str_plain_nb_list;
extern PyObject *const_str_plain___file__;
static PyObject *const_str_digest_d48a67d4b786a3513360c9431084eaad;
static PyObject *const_tuple_str_digest_933e858953f6fd1fbfea644539c65768_tuple;
static PyObject *const_str_digest_1f47f215e683f1fb509e08c58ac83359;
extern PyObject *const_str_plain_apiname;
static PyObject *const_str_digest_0337eaf78063cb96bf4678b105943104;
extern PyObject *const_str_plain_l_and;
extern PyObject *const_str_plain_isstring;
static PyObject *const_str_digest_96414f4f92639a7353121cae2e473e26;
extern PyObject *const_str_plain_str;
static PyObject *const_int_pos_66;
static PyObject *const_list_a6fb55f787096d197a68d518259f030c_list;
extern PyObject *const_tuple_str_plain_func2subr_tuple;
static PyObject *const_tuple_str_digest_f56fee16ec8153a6367a71f0309f3dea_tuple;
static PyObject *const_str_digest_ce814c810229f76f4c23862cecc7d34c;
static PyObject *const_str_digest_28722724fa5171e5036e05c92447f918;
static PyObject *const_tuple_b59a67d08cb381a692f2539841be435c_tuple;
static PyObject *const_str_digest_1d1217104e20c84be3d61679a5272d17;
static PyObject *const_str_digest_a7864ec8dd41aab3bc7b2abc67720e65;
extern PyObject *const_str_plain_isunsigned;
static PyObject *const_str_digest_7e683b4fcd50010e69923f70359689eb;
static PyObject *const_str_digest_19c89b1adeb69ece88b14d6273aa8ca8;
extern PyObject *const_str_chr_44;
extern PyObject *const_str_plain_lines;
static PyObject *const_tuple_str_plain_use_rules_tuple;
extern PyObject *const_str_plain_replace;
static PyObject *const_str_digest_414ab1171f5a5120432354ccf185eb19;
extern PyObject *const_tuple_str_newline_tuple;
extern PyObject *const_str_plain_islong_doublefunction;
extern PyObject *const_str_chr_124;
static PyObject *const_str_plain_typedef_need_dict;
static PyObject *const_str_digest_96e6a77778bbeb3dd4408d0a578f26f6;
static PyObject *const_str_digest_6f81bebe9433aaa279ac7cb939be9fc7;
static PyObject *const_str_digest_ef7930d2a77ddf997ab5a3884f57cd03;
extern PyObject *const_str_plain_body;
extern PyObject *const_tuple_str_plain___str_digest_3638426b43758747165faf274e9fd2c4_tuple;
extern PyObject *const_str_plain_docs;
extern PyObject *const_str_plain_path;
extern PyObject *const_str_plain_pyobjfrom;
static PyObject *const_str_digest_d0192ea46e116016c3c7cbd447f90050;
static PyObject *const_str_plain_asctime;
extern PyObject *const_str_plain_doc;
static PyObject *const_str_digest_dd00cc76eb43fb8e61f9350624d82fe2;
extern PyObject *const_str_plain_name;
static PyObject *const_tuple_str_chr_9_str_digest_b8872718382dd39ffa4013e303d20ce5_tuple;
extern PyObject *const_str_plain_docshort;
extern PyObject *const_str_plain_modulename;
extern PyObject *const_tuple_str_plain_capi_maps_tuple;
static PyObject *const_list_str_digest_388fb92bc2e3d76b8d35eb704c2fd40e_list;
static PyObject *const_str_digest_1f6d21ea771f0d8ddf3920ca84317357;
extern PyObject *const_str_plain_long_long;
static PyObject *const_str_digest_1a0597f7af49ea7c71c52aeff981960d;
extern PyObject *const_str_plain_unsigned_short;
static PyObject *const_str_digest_325978b503143ba3d999d70211c4d3a9;
static PyObject *const_str_digest_f1e75c0c1497ab800c297f4461543ec2;
static PyObject *const_str_plain_returnformat;
static PyObject *const_str_plain_mod_rules;
static PyObject *const_str_digest_946f7eab661e75156757fc78e18fae8a;
static PyObject *const_str_digest_93455bf8bf6723d3683f4767d1730bb1;
static PyObject *const_tuple_cde206c752dab3a50d1c0e1f18afb419_tuple;
static PyObject *const_tuple_str_plain_common_rules_tuple;
static PyObject *const_str_plain_callcompaqfortran;
extern PyObject *const_tuple_str_chr_124_tuple;
static PyObject *const_str_digest_0c04797528ac79a29ab7bb1842a844da;
static PyObject *const_str_plain_args_capi;
extern PyObject *const_str_plain_latexdocstropt;
extern PyObject *const_str_plain_isunsigned_char;
static PyObject *const_str_digest_20a3807ace2c22a5b914be87d9d866f7;
static PyObject *const_str_plain_cr;
static PyObject *const_list_917626a5cab86448639269d43350330f_list;
static PyObject *const_str_digest_ec5c056bc2faa2f16a4f48f4884353b9;
static PyObject *const_str_digest_b72c98396d6b7d6bb9cbbbefd832fdb3;
static PyObject *const_tuple_str_digest_29af8796ba8bf65ff4bf13d6ccb716bc_tuple;
static PyObject *const_str_digest_5529d0c2e779042efeaae9babb2fc0da;
extern PyObject *const_str_plain_includes;
extern PyObject *const_str_plain_depargs;
extern PyObject *const_str_digest_b46e1c937548d68a9c2f031741c09adb;
static PyObject *const_str_digest_032e97d119935691197bd6f75c386436;
extern PyObject *const_str_plain_docstrout;
static PyObject *const_str_digest_cae2ad5950e123dc09fe80b1437808b7;
extern PyObject *const_str_plain_func2subr;
extern PyObject *const_str_digest_19a37930d23e75dad6a7be50f2905eb9;
static PyObject *const_str_plain_keys_xa;
static PyObject *const_str_digest_e577de0849b7e7b9012751e2668e791b;
static PyObject *const_str_digest_beb345b44a602b66219bb743770c3d15;
static PyObject *const_tuple_20ae7db600419ead7934aa64123ca771_tuple;
static PyObject *const_str_digest_2c0998a53b872b9217a70a4214626264;
static PyObject *const_tuple_str_digest_dbbf0270f90bfcbfa51c1e227e53f0e4_tuple;
extern PyObject *const_str_plain_unsigned_char;
static PyObject *const_str_digest_17b6682164c8e0e6b79f7d2463beb342;
static PyObject *const_str_digest_8a1d6a3e81f79db2268e6ff0852d7a55;
extern PyObject *const_str_plain_cppmacros;
static PyObject *const_str_digest_5c5eac15bee883da581fb631c32166a5;
static PyObject *const_str_digest_cf8a9881e3a2ad0668b004694b967abc;
static PyObject *const_str_digest_c0d6e5feecfa16c4a5e5c5506cf94dee;
extern PyObject *const_str_plain_division;
static PyObject *const_str_digest_beaced962362efb12e32d7f656575481;
extern PyObject *const_str_plain_routine_defs;
static PyObject *const_str_digest_dbc79063883259818da1c0a53399df33;
static PyObject *const_str_digest_7fb5819781c8f9c166c8b3034a26c432;
static PyObject *const_str_digest_d63e19eac20174e68ed46e663e86a06f;
static PyObject *const_str_digest_3a9c9af3e588a2633a190cff1a10bb88;
static PyObject *const_str_digest_edac874f144411fa00eea5af51810d35;
static PyObject *const_str_digest_0bb657bab49ef543e096eeb93b12d22e;
static PyObject *const_str_digest_170fbc35e0bd1f7f0940a832e84e8905;
static PyObject *const_tuple_str_digest_0337eaf78063cb96bf4678b105943104_tuple;
static PyObject *const_str_digest_488c7d63531ff8d954b32cb09970fd16;
static PyObject *const_str_digest_35c9158baecd0085b3954968a96536eb;
static PyObject *const_str_digest_9b25501ee14be4762851524d43f59638;
static PyObject *const_str_digest_69f24e9f0cf3c2a3ec814d04c9edfdf2;
static PyObject *const_str_digest_74d76a791efaafa48494f438f04e3207;
static PyObject *const_str_digest_3cc0372e2a4fb619e6863414a829c950;
static PyObject *const_str_digest_7178dc6f935667e436cac6815906e220;
extern PyObject *const_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34;
static PyObject *const_str_digest_f84a55aeb58eb8347c93e2f1b19d36b1;
extern PyObject *const_str_plain_hasexternals;
static PyObject *const_str_digest_8ccc89ec0e61b203c6e566738d08b055;
extern PyObject *const_str_plain_sign2map;
static PyObject *const_str_plain_ltx;
static PyObject *const_str_digest_17bcb58e75e5d8bce33ae36b2bf1b62d;
static PyObject *const_str_digest_9f02b2aa426d1e968bb0fe3cfd892925;
extern PyObject *const_str_plain_debugcapi;
extern PyObject *const_str_plain_create_cb_arglist;
extern PyObject *const_str_plain_mr;
extern PyObject *const_str_plain_initf90modhooks;
static PyObject *const_str_digest_78e7855a1c411f5523b2f9a24c9da36d;
extern PyObject *const_str_plain_hasresultnote;
static PyObject *const_str_digest_ff06ccb2c23c449388cb0f214acc87f7;
static PyObject *const_tuple_str_digest_eee6c61da125ddd4aae5b138d99219fb_tuple;
extern PyObject *const_str_plain_depend;
extern PyObject *const_str_plain_var;
extern PyObject *const_str_digest_f4fea561d25dbef3080e43f7f7093ca8;
static PyObject *const_str_digest_f681ff7c9e722de570a0e4171ce853b0;
extern PyObject *const_str_plain_islong_long;
extern PyObject *const_str_digest_3d5ba40ebd32fc4950e50da9cea3a5ad;
static PyObject *const_str_digest_a09721f72a5c34dacc0ffc15233c4471;
static PyObject *const_str_digest_0967bcbd53c017d1a5d5547539b56ee3;
extern PyObject *const_tuple_a66751b7c76123c024f448eec46707b1_tuple;
static PyObject *const_str_digest_7fe249f2ea6a3ed66c02d89e1213fce8;
extern PyObject *const_str_plain_optargs;
static PyObject *const_str_digest_5ca3740c33ff4b38e47625fb5fd9b66b;
static PyObject *const_str_digest_7c415443cbc1606e2636a4c45b379117;
static PyObject *const_dict_f901ef362e29b410a7de5c49b0849102;
extern PyObject *const_str_plain_docsign;
extern PyObject *const_str_chr_9;
static PyObject *const_str_digest_cd86e09bc11753fb56a3ef851d5f64d3;
extern PyObject *const_str_plain_modsign2map;
extern PyObject *const_str_plain_isoptional;
static PyObject *const_str_digest_d63884af5fa452403148da77aa33bbba;
static PyObject *const_str_digest_ae2f2b951c1c5b9ca49bec8c509fa575;
static PyObject *const_str_digest_9162ef44a28670aee2da45cf26457013;
extern PyObject *const_str_plain__depend;
static PyObject *const_str_digest_631e000c81d910a8147ab346cc8ad355;
extern PyObject *const_str_plain_buildpath;
static PyObject *const_str_plain_argformat;
static PyObject *const_str_digest_fad16014b804349bb65b09a2311b1ac7;
static PyObject *const_str_digest_66fffa7382fc579f724e49265556b744;
static PyObject *const_str_digest_b1685647f0346194c5abc8530f497944;
static PyObject *const_str_digest_1359d76a6df2fc5fce5bf1da14fde955;
static PyObject *const_str_digest_b2ad6e17ea6c37fb40ca65618064396b;
extern PyObject *const_str_plain_latexdocstrsigns;
static PyObject *const_list_83502bc928309bee706fd67dc708d8b5_list;
static PyObject *const_str_digest_e72ac0b53ea738da854e189e8916aaf0;
static PyObject *const_str_digest_5b7ccc32e52fccf534ab08cff75fe54e;
static PyObject *const_str_digest_8b378a16bc207977d6266489de437e89;
extern PyObject *const_int_pos_10;
extern PyObject *const_str_plain_rformat;
extern PyObject *const_str_plain_includes0;
static PyObject *const_str_digest_2e018d041c7e280e775f591990904aec;
static PyObject *const_str_digest_cd4607fc44852b68f6faa04a473c87c2;
extern PyObject *const_str_plain_f2py_version;
extern PyObject *const_str_plain_stripcomma;
static PyObject *const_str_digest_c4364c15f85c6aa770abecdf0860eef3;
static PyObject *const_str_digest_933e858953f6fd1fbfea644539c65768;
static PyObject *const_str_digest_660079687b96f232aaa5a3014be65b39;
static PyObject *const_str_digest_77980ec1039787377cb2bd9237b0de43;
extern PyObject *const_str_plain_isthreadsafe;
static PyObject *const_str_digest_d9dd8713a53b56ea3a5074599b9e3487;
static PyObject *const_str_digest_69bcf359a7b50491550fde7484871e51;
extern PyObject *const_int_pos_1;
extern PyObject *const_str_plain_dolatexdoc;
static PyObject *const_str_digest_f71cea4c61eb6b8fcaae04bdb38a08bc;
static PyObject *const_str_digest_ecc6d7d65aba7b1225ac97578459be7a;
extern PyObject *const_str_plain_isintent_copy;
static PyObject *const_str_digest_145cffe6effbdb6eddbe4dcc3561ccef;
static PyObject *const_str_plain_callfortran;
extern PyObject *const_str_digest_17902227e562a5b10e9fdcc2c3c46bec;
extern PyObject *const_str_plain_isintent_overwrite;
static PyObject *const_str_digest_71436a61366dee7252a8788654eae266;
static PyObject *const_str_digest_9774ec4c1bd3c4901e1c3fef5777de0b;
static PyObject *const_str_digest_a421e87166c046882d98d6dafdeae7e2;
static PyObject *const_str_digest_6264e53bf9ed98be0a17c99db19ce952;
extern PyObject *const_str_plain_f2py_wrapper_output;
static PyObject *const_str_digest_8f4a6ebd219b92c5b2fe5a6636dc1e65;
static PyObject *const_str_plain_stnd;
static PyObject *const_str_digest_f48c9699284b5eab9a8d58a5db521367;
static PyObject *const_str_digest_b36eba167a40a26a3820807615923d7e;
extern PyObject *const_str_plain_vars;
extern PyObject *const_str_plain_commonhooks;
static PyObject *const_str_digest_1872273f673a454c879c2bca8fa0f177;
static PyObject *const_str_digest_f0ccf18acc02945cb81efd922b1819aa;
static PyObject *const_str_digest_04f4c2c2c1e779d6eb09065af8957943;
static PyObject *const_str_digest_b479b99c7dbd197f077384bde03834c4;
extern PyObject *const_str_plain_shortlatex;
static PyObject *const_str_plain_defmod_rules;
extern PyObject *const_str_plain_rules;
extern PyObject *const_str_plain_join;
static PyObject *const_str_digest_29af8796ba8bf65ff4bf13d6ccb716bc;
static PyObject *const_str_digest_8eac57ad299a2b6e5510775f127c79ae;
static PyObject *const_str_digest_2c6eb05daf937c60611d98859634dd33;
extern PyObject *const_str_plain_islong_longfunction;
static PyObject *const_str_digest_5e7d869da782af1421d1abc2296a84fd;
extern PyObject *const_str_plain_isunsigned_short;
extern PyObject *const_tuple_str_plain___version___tuple;
extern PyObject *const_str_plain_options;
extern PyObject *const_str_plain_isintent_nothide;
extern PyObject *const_str_plain_docstrsigns;
extern PyObject *const_str_plain_docstrcbs;
static PyObject *const_str_plain_functype;
static PyObject *const_str_digest_6c5d9030ff78b2d417d18e1093b4bafb;
static PyObject *const_str_digest_e9feacad3ffc7d40ca7fa991c347ae8e;
extern PyObject *const_str_plain_CFUNCSMESS;
static PyObject *const_str_digest_7e5a52158bc4715036d44a08d9a59588;
static PyObject *const_str_plain_unsigned;
extern PyObject *const_str_plain__;
static PyObject *const_str_plain_keys_capi;
extern PyObject *const_str_digest_f5ccb89b2d4437f9d7dbcd87b32735ec;
static PyObject *const_str_plain_pyname;
extern PyObject *const_str_plain_get_needs;
extern PyObject *const_str_plain_l;
extern PyObject *const_str_plain_m;
extern PyObject *const_str_plain_n;
extern PyObject *const_str_plain_docreturn;
extern PyObject *const_str_plain_i;
extern PyObject *const_str_plain_k;
extern PyObject *const_str_plain_f;
static PyObject *const_str_digest_9cfd9f010c87212166c3a6b47669c9ec;
static PyObject *const_str_plain_routdebugenter;
extern PyObject *const_str_plain_c;
static PyObject *const_str_digest_c657b0be22471abcb9376de73f2ad796;
extern PyObject *const_str_plain_u;
extern PyObject *const_str_plain_w;
extern PyObject *const_str_plain_r;
static PyObject *const_str_digest_f079d8c7e0ce1658a2cdcdbc6577f10a;
extern PyObject *const_str_plain_assubr;
extern PyObject *const_str_plain_islong_double;
extern PyObject *const_str_plain_l_or;
static PyObject *const_str_digest_14e46075417ae2136dc3bcb6488889ce;
static PyObject *const_str_digest_8236bb042adb491ac8bd81c5a9ee2521;
static PyObject *const_list_str_digest_c2ccddf34d5f3ccfcc1d66ae9e062936_list;
extern PyObject *const_str_plain_hascallstatement;
static PyObject *const_str_digest_e5f2c17bbfe3be0dd9ee7e1c43bce690;
static PyObject *const_tuple_str_digest_14e46075417ae2136dc3bcb6488889ce_tuple;
static PyObject *const_tuple_str_digest_dc8dd5a6a650d06eb556e20e18906c89_tuple;
static PyObject *const_str_plain_callfortranroutine;
static PyObject *const_list_10b104c3768849b37f92dfc64a682f14_list;
static PyObject *const_str_digest_01daef0e26ca54c28969374339b40890;
extern PyObject *const_str_plain_long_double;
extern PyObject *const_str_plain_isintent_out;
extern PyObject *const_str_plain_routsign2map;
extern PyObject *const_int_0;
static PyObject *const_str_plain_rout_rules;
static PyObject *const_tuple_str_digest_b479b99c7dbd197f077384bde03834c4_tuple;
static PyObject *const_str_digest_b4c19ac5d0264d44f3b358978705a878;
extern PyObject *const_str_plain___version__;
static PyObject *const_str_digest_b0e1a5bc6a31e8edcea9b71d04eea040;
static PyObject *const_str_digest_a71697e2d65b2aee7f8a386bcf6560c6;
static PyObject *const_str_digest_9aa41ddc81f67fdd23a634f026352f66;
static PyObject *const_str_digest_c9903fbd55a8e7f7bbcf4a7ebb5c29f0;
extern PyObject *const_str_digest_30ee26d21cfa520442e0b19dbfea94f6;
extern PyObject *const_str_plain_typedefs_generated;
extern PyObject *const_str_plain_append;
extern PyObject *const_str_plain_SWAP;
static PyObject *const_str_digest_cd5e665f895ef7c8eb453ced6fc763f4;
extern PyObject *const_str_digest_b8872718382dd39ffa4013e303d20ce5;
extern PyObject *const_str_plain_print_function;
static PyObject *const_str_digest_6f1be74ea92dca27c547a995cbe2baf3;
static PyObject *const_str_digest_856e8e75cb438f8a97b7c6d5ad17a59e;
extern PyObject *const_str_digest_7b560b9c887c6f93f8fb76cb77937f62;
extern PyObject *const_str_plain_isintent_c;
extern PyObject *const_str_digest_e0848666c6e4c10ba0a704c34bf8a25a;
extern PyObject *const_str_plain_copy;
static PyObject *const_str_plain_routdebugfailure;
extern PyObject *const_str_plain_isunsigned_long_longarray;
static PyObject *const_list_63cf9afba8d0564dfc4c1155a17b0c8c_list;
static PyObject *const_tuple_str_digest_66fffa7382fc579f724e49265556b744_tuple;
static PyObject *const_str_digest_135952e4416c93a7303e3f7aaf5a0da5;
static PyObject *const_str_digest_d065d82fc9f51ae43f4b8db6651be301;
static PyObject *const_str_digest_eee6c61da125ddd4aae5b138d99219fb;
static PyObject *const_str_digest_5a0786a58a787b5e9acb9e24136f8f24;
static PyObject *const_str_digest_e6104d35553a035097ec1423ebaa6291;
extern PyObject *const_str_plain_latexdocstrreq;
extern PyObject *const_dict_empty;
extern PyObject *const_str_plain_CHECKSTRING;
static PyObject *const_str_digest_0ec129680246017f27a2269f24523dbb;
extern PyObject *const_str_digest_79cf6d3fbc1ff7602b4753d744fc0e64;
extern PyObject *const_str_digest_49f4bfda85db57bf51690dba3a8d81dd;
extern PyObject *const_str_digest_1754ef5e5cfc66384eee38a13dd4d26c;
extern PyObject *const_str_plain_version;
extern PyObject *const_str_plain_gentitle;
extern PyObject *const_str_plain_ismoduleroutine;
static PyObject *const_str_digest_fbc04200dab383be8fc5e9dc341549b2;
static PyObject *const_str_digest_1fd49f133ca390a888f362a49cd559e3;
static PyObject *const_str_digest_a871c415f4ae2645c21857940d3b44f9;
extern PyObject *const_str_plain_getargs2;
static PyObject *const_tuple_str_digest_f71cea4c61eb6b8fcaae04bdb38a08bc_tuple;
extern PyObject *const_str_plain_bi;
static PyObject *const_str_digest_a48893cf324000647f544daf37b32385;
extern PyObject *const_str_plain_iscomplex;
extern PyObject *const_str_plain_restdoc;
extern PyObject *const_str_plain_separatorsfor;
static PyObject *const_str_digest_c634e279bc3759c83195e9f177b3e4ee;
static PyObject *const_str_digest_fc43de2b25b47bcb22ddc2ca412903c1;
extern PyObject *const_str_plain_rout;
extern PyObject *const_str_plain_block;
extern PyObject *const_str_digest_09bc009ffd858aaf58df7e98266d9b89;
static PyObject *const_list_d9758b2de662a4320da70ff340579452_list;
static PyObject *const_str_digest_eddadf0dabfc5042f9a31bb99020252b;
extern PyObject *const_str_plain_isintent_inout;
extern PyObject *const_str_plain_hasinitvalue;
static PyObject *const_str_digest_7d26dd93dbe102ee8b81db081a6361f0;
extern PyObject *const_str_plain_api;
extern PyObject *const_str_plain_common_rules;
static PyObject *const_str_plain_callfortranappend;
static PyObject *const_str_digest_40637411422dfc32b28a843ad5dde31c;
extern PyObject *const_str_plain_close;
static PyObject *const_str_plain_arg_rules;
extern PyObject *const_str_plain_isfunction_wrap;
static PyObject *const_str_plain_keyformat;
extern PyObject *const_str_plain_F_FUNC;
extern PyObject *const_str_plain_issigned_long_longarray;
extern PyObject *const_str_plain_split;
static PyObject *const_str_digest_a75b5e8e76ffa7e79c5a93ac611a3b01;
static PyObject *const_str_digest_fa64e08327e0a6e4fa4e283d195f2c2e;
extern PyObject *const_str_plain_forcomb;
static PyObject *const_tuple_str_digest_963286ad3178c103324b9b07b66b91cf_tuple;
static PyObject *const_str_digest_9ed50576800e8b31c86257ade86792c9;
static PyObject *const_list_53e499b918b44aac469e052ee883b608_list;
static PyObject *const_str_digest_f5e74abb58d16359f25a81ce2dbfb679;
extern PyObject *const_str_plain_return;
static PyObject *const_str_digest_6002d8c1f65ca339b0204f2c0395caf2;
extern PyObject *const_str_digest_208bb9b9de0c9678f31d3d5b4fa77779;
static PyObject *const_list_0725c8ade74f8f28b621ba88c880b6bd_list;
static PyObject *const_tuple_str_digest_1359d76a6df2fc5fce5bf1da14fde955_tuple;
static PyObject *const_list_str_plain_SWAP_str_plain_create_cb_arglist_list;
static PyObject *const_str_plain_wn;
static PyObject *const_str_digest_8fbf2e4eee7783460695f41dff730b42;
static PyObject *const_str_digest_53072a7b20febbca5aacd3d90ca0035b;
static PyObject *const_str_plain_kwlistxa;
extern PyObject *const_str_plain_b;
extern PyObject *const_str_digest_1e8ac9703bbf7691e9fca0e2c65d6bb3;
static PyObject *const_str_digest_eec1155b73c887bcd4e234f423320107;
static PyObject *const_str_digest_7bdd9ab4ad5ebd4af4db670afc5ddd0d;
static PyObject *const_str_digest_c5e6a55b6801b244758895426e3542d9;
static PyObject *const_str_digest_70ca1db0f541403066a91a07e8aafa04;
extern PyObject *const_str_plain_isunsigned_chararray;
static PyObject *const_str_digest_84f027da8d9989afd7d384e03c83d525;
static PyObject *const_dict_055a5e2e8d3048ab4922e8d2791b57c7;
static PyObject *const_str_digest_ed8324cdd58a5f11071d24d180e25fba;
extern PyObject *const_str_plain_isint1array;
static PyObject *const_str_digest_b74ba8bcf9c120398beaabec009ec7e5;
static PyObject *const_str_digest_eb9765b47f86d28ef2c6f47dde082561;
static PyObject *const_str_digest_e5aa69780019fe250284d895b932b736;
static PyObject *const_str_digest_963286ad3178c103324b9b07b66b91cf;
extern PyObject *const_str_plain_list;
static PyObject *const_str_digest_e20e424cfc96e1ebeae47e009382b436;
extern PyObject *const_str_plain_docsignopt;
extern PyObject *const_str_plain_f90mod_rules;
static PyObject *const_tuple_str_digest_787bc58289c516f4da3da43b0da58897_tuple;
static PyObject *const_str_digest_c766b4789856a6ba99bed500bbe3da6b;
extern PyObject *const_str_digest_9fce729b393d78d2d76cbe9aec8d0e74;
extern PyObject *const_str_plain_outmess;
static PyObject *const_str_plain_nb1;
static PyObject *const_str_plain_docsignxa;
extern PyObject *const_tuple_str_plain_cfuncs_tuple;
static PyObject *const_str_digest_ae43d06c73b4fbd5c298de60127d721d;
static PyObject *const_str_digest_62a1a1ac115d9bf18b02ed37eef6a5f9;
static PyObject *const_str_digest_a505672d4ff6f54888f9e90c60cf9b67;
static PyObject *const_str_digest_418fe04998188548a4eb680883e25e29;
static PyObject *const_str_digest_7e73ba8d5edb7ec5ccd148bf6084d61b;
extern PyObject *const_str_plain_frompyobj;
extern PyObject *const_str_plain_initcommonhooks;
extern PyObject *const_tuple_str_plain_f90mod_rules_tuple;
extern PyObject *const_str_digest_f7450f7f93b1e2a8a6f8d167f6c2ef9a;
static PyObject *const_str_digest_b38ced1fe60c6e49953b60674230c84f;
static PyObject *const_str_digest_f79c650094dda7c6d84545f0a63bf1e9;
static PyObject *const_list_str_digest_99dfc913087e0ea1a18c8ad788d0d99b_list;
static PyObject *const_str_digest_935a9d3d7dcb4ad3becad3cdc81f7573;
static PyObject *const_str_plain_routine_rules;
extern PyObject *const_str_plain_savevrd;
static PyObject *const_str_digest_a374575bcf8cb1068e38d978d5cd2122;
static PyObject *const_str_digest_87274c2470e5d5c885675977ae6a3172;
static PyObject *const_str_digest_f2caafda71f4c478cfe173963231fe37;
extern PyObject *const_str_newline;
extern PyObject *const_str_plain_issubroutine_wrap;
static PyObject *const_str_plain_sepdict;
static PyObject *const_str_digest_73242ab7ac60aa6a101ca2a2c63a94f6;
static PyObject *const_str_digest_8736fba406c717e343725a08ecb8beaa;
extern PyObject *const_str_plain_docstropt;
extern PyObject *const_str_plain_needs;
static PyObject *const_str_digest_b5fc975e73c53e47c4a1ef14fc1f67e1;
extern PyObject *const_str_plain_interfaced;
static PyObject *const_list_str_digest_c4d2c3ebecea3ad233be322292339553_list;
static PyObject *const_str_digest_9c43fa3f6d4fba5643ad09e3876054c8;
extern PyObject *const_str_plain_vrd;
static PyObject *const_str_digest_395a7e49a4a935a48f1bd9054ac302b4;
static PyObject *const_str_digest_9283391fb6e933c6558013a71a260784;
static PyObject *const_str_digest_c199754672a1a8212e0029f4201d48dd;
static PyObject *const_str_digest_121fa8c0a7f221c891dc8822fac5fdd1;
static PyObject *const_str_digest_840172d388b493b7b1f460e6e40cfae7;
extern PyObject *const_str_space;
extern PyObject *const_str_plain_latexdocstrcbs;
extern PyObject *const_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77;
extern PyObject *const_str_digest_858755cb0d1b16e28bf818ef14dc1f10;
static PyObject *const_str_digest_78744423de247d23fef27b4f24d61469;
static PyObject *const_str_digest_87c2ebbc3b21746550e363bead591b36;
extern PyObject *const_str_plain_O;
extern PyObject *const_str_plain_hidden;
static PyObject *const_str_plain_docsignatureshort;
static PyObject *const_str_digest_c3d060677e97d1e4eb3742c0a4b516c2;
static PyObject *const_str_digest_c0f707103a4dc62a969a949054c9bb39;
extern PyObject *const_str_plain_absolute_import;
extern PyObject *const_str_plain__break;
static PyObject *const_str_plain_localtime;
extern PyObject *const_str_plain_entry;
static PyObject *const_str_digest_2999263330b02d2a6d44588a7326f194;
extern PyObject *const_str_plain_isarrayofstrings;
static PyObject *const_tuple_str_digest_345c26e0f9bcfb91e65723d2b555931c_tuple;
static PyObject *const_str_digest_29e74fe1bb3a1c37df8d2af52c1fbbd4;
extern PyObject *const_str_plain_callbacks;
extern PyObject *const_str_plain___doc__;
extern PyObject *const_str_digest_878c81f111f20d075642d5b1f69e14c2;
static PyObject *const_str_plain_closepyobjfrom;
extern PyObject *const_str_plain_CHECKSCALAR;
static PyObject *const_str_plain_setjmpbuf;
extern PyObject *const_str_plain_fn;
static PyObject *const_str_digest_563ace957d241680d13ba471193cde19;
static PyObject *const_str_digest_67aace0cd79c924ba6b33fef89556eb4;
extern PyObject *const_str_plain_use;
extern PyObject *const_str_empty;
static PyObject *const_str_digest_a91d17bf637fe2ed086dd27d03793bab;
static PyObject *const_str_digest_c7c129324aa8665b6edb34699c42e272;
extern PyObject *const_str_plain_keys;
static PyObject *const_str_digest_ebc59643359754d49b2daa361c01a91e;
extern PyObject *const_tuple_str_chr_44_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77_tuple;
static PyObject *const_str_digest_b84e338a3141ef4405d32063e11ea533;
static PyObject *const_str_plain_nth;
static PyObject *module_filename_obj;

static bool constants_created = false;

static void createModuleConstants( void )
{
    const_str_plain_kwlistopt = UNSTREAM_STRING( &constant_bin[ 797479 ], 9, 1 );
    const_str_digest_43c80c0d52153b0bc6c55b6b1858bbaa = UNSTREAM_STRING( &constant_bin[ 797488 ], 221, 0 );
    const_str_digest_49613c72153db8c0c685d9a635c546dd = UNSTREAM_STRING( &constant_bin[ 797709 ], 33, 0 );
    const_str_plain_aux_rules = UNSTREAM_STRING( &constant_bin[ 797742 ], 9, 1 );
    const_str_digest_b4363c0f10eeed06a28d0eea0c3aeb40 = UNSTREAM_STRING( &constant_bin[ 797751 ], 7, 0 );
    const_str_digest_d3a44657679a3e652a4d721177ebd2a1 = UNSTREAM_STRING( &constant_bin[ 797758 ], 15, 0 );
    const_str_digest_e6791082bde6b05eedc1689a810e4aec = UNSTREAM_STRING( &constant_bin[ 797773 ], 33, 0 );
    const_str_digest_7ab7fdc0f90c620e6cb6b3d34ad64258 = UNSTREAM_STRING( &constant_bin[ 797806 ], 170, 0 );
    const_list_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34_list, 0, const_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34 ); Py_INCREF( const_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34 );
    const_str_digest_216b60f2b0931a71c0d57c594510b6d0 = UNSTREAM_STRING( &constant_bin[ 797976 ], 36, 0 );
    const_dict_8074601cdd243b85d166caacc3b89ad0 = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 798012 ], 379 );
    const_str_plain_modulebody = UNSTREAM_STRING( &constant_bin[ 798391 ], 10, 1 );
    const_str_digest_2f9db3be7f6d42c0b8554ae45751ef40 = UNSTREAM_STRING( &constant_bin[ 798401 ], 6, 0 );
    const_str_digest_bfaaa4c1dfc4c9a8695c608949396cef = UNSTREAM_STRING( &constant_bin[ 798407 ], 106, 0 );
    const_str_plain_initf2pywraphook = UNSTREAM_STRING( &constant_bin[ 798513 ], 16, 1 );
    const_str_digest_283b24e30d1fa10525d4197b5a273d15 = UNSTREAM_STRING( &constant_bin[ 798529 ], 17, 0 );
    const_tuple_str_digest_7e683b4fcd50010e69923f70359689eb_tuple = PyTuple_New( 1 );
    const_str_digest_7e683b4fcd50010e69923f70359689eb = UNSTREAM_STRING( &constant_bin[ 798546 ], 60, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_7e683b4fcd50010e69923f70359689eb_tuple, 0, const_str_digest_7e683b4fcd50010e69923f70359689eb ); Py_INCREF( const_str_digest_7e683b4fcd50010e69923f70359689eb );
    const_str_digest_2deaf67a44d2415292c19cfb0aa50a8c = UNSTREAM_STRING( &constant_bin[ 797689 ], 20, 0 );
    const_str_digest_387e5976948d489f60396f8097e151c3 = UNSTREAM_STRING( &constant_bin[ 798606 ], 25, 0 );
    const_str_digest_93f604e3dd7562d0f7b06a2fb41b3994 = UNSTREAM_STRING( &constant_bin[ 798631 ], 22, 0 );
    const_str_digest_f2b8e8c1719fcee60c4e7b5e4eb1f6d0 = UNSTREAM_STRING( &constant_bin[ 798653 ], 24, 0 );
    const_str_digest_755ecb11d7620a38d1696cb048c38ef9 = UNSTREAM_STRING( &constant_bin[ 798677 ], 107, 0 );
    const_str_digest_0101752f19a62566c8b5930aa92e5adc = UNSTREAM_STRING( &constant_bin[ 798784 ], 89, 0 );
    const_tuple_str_digest_bf2b4eeb2bb20a21421d678738b5a75e_tuple = PyTuple_New( 1 );
    const_str_digest_bf2b4eeb2bb20a21421d678738b5a75e = UNSTREAM_STRING( &constant_bin[ 798873 ], 35, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_bf2b4eeb2bb20a21421d678738b5a75e_tuple, 0, const_str_digest_bf2b4eeb2bb20a21421d678738b5a75e ); Py_INCREF( const_str_digest_bf2b4eeb2bb20a21421d678738b5a75e );
    const_str_digest_1f723c756343a499dbe333f14ab5d732 = UNSTREAM_STRING( &constant_bin[ 798908 ], 9, 0 );
    const_str_digest_63f9320fb96629303000a101f4359c54 = UNSTREAM_STRING( &constant_bin[ 798917 ], 49, 0 );
    const_str_digest_6fbcce788ee343047e2cb747b93c7fac = UNSTREAM_STRING( &constant_bin[ 726932 ], 3, 0 );
    const_str_digest_cc8aef51ccd568f750b3cc95ee24cb9e = UNSTREAM_STRING( &constant_bin[ 798966 ], 44, 0 );
    const_str_plain__rules = UNSTREAM_STRING( &constant_bin[ 729874 ], 6, 1 );
    const_str_digest_bb0849e7e2d4c1c22783c604269c9e5c = UNSTREAM_STRING( &constant_bin[ 799010 ], 56, 0 );
    const_str_digest_25e4729fdbfcd617a477e2c1623c74da = UNSTREAM_STRING( &constant_bin[ 799066 ], 21, 0 );
    const_list_9af870e8ed9f6c337cdc0c36a763a6f2_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_9af870e8ed9f6c337cdc0c36a763a6f2_list, 0, const_str_digest_216b60f2b0931a71c0d57c594510b6d0 ); Py_INCREF( const_str_digest_216b60f2b0931a71c0d57c594510b6d0 );
    const_str_digest_8236bb042adb491ac8bd81c5a9ee2521 = UNSTREAM_STRING( &constant_bin[ 799087 ], 33, 0 );
    PyList_SET_ITEM( const_list_9af870e8ed9f6c337cdc0c36a763a6f2_list, 1, const_str_digest_8236bb042adb491ac8bd81c5a9ee2521 ); Py_INCREF( const_str_digest_8236bb042adb491ac8bd81c5a9ee2521 );
    const_str_digest_7c229b69f728161f89793a537f326cd6 = UNSTREAM_STRING( &constant_bin[ 799120 ], 23, 0 );
    const_str_digest_a5e9d3b21a92b143ef24eb6c172b949c = UNSTREAM_STRING( &constant_bin[ 799143 ], 244, 0 );
    const_str_digest_4b201bb14560b4f560e6beebf146a1b3 = UNSTREAM_STRING( &constant_bin[ 799387 ], 439, 0 );
    const_str_digest_b5bc79054a4dd1a07d4a642db1bb5e6c = UNSTREAM_STRING( &constant_bin[ 799826 ], 28, 0 );
    const_str_digest_7c37896c780e69c4def0a3d853f193f1 = UNSTREAM_STRING( &constant_bin[ 799854 ], 16, 0 );
    const_str_digest_32ac217bdff7c6caf99bb8a973372a81 = UNSTREAM_STRING( &constant_bin[ 799870 ], 14, 0 );
    const_str_plain_topyarr = UNSTREAM_STRING( &constant_bin[ 799884 ], 7, 1 );
    const_str_digest_9f16671c33eb6f2ff404ed7978cd1586 = UNSTREAM_STRING( &constant_bin[ 799891 ], 22, 0 );
    const_str_plain_funcwrappers2 = UNSTREAM_STRING( &constant_bin[ 799913 ], 13, 1 );
    const_list_32f32ffbbd5d0469a259f67cd7bedf23_list = PyList_New( 2 );
    const_str_digest_145cffe6effbdb6eddbe4dcc3561ccef = UNSTREAM_STRING( &constant_bin[ 799926 ], 100, 0 );
    PyList_SET_ITEM( const_list_32f32ffbbd5d0469a259f67cd7bedf23_list, 0, const_str_digest_145cffe6effbdb6eddbe4dcc3561ccef ); Py_INCREF( const_str_digest_145cffe6effbdb6eddbe4dcc3561ccef );
    const_str_digest_eb9765b47f86d28ef2c6f47dde082561 = UNSTREAM_STRING( &constant_bin[ 800026 ], 10, 0 );
    PyList_SET_ITEM( const_list_32f32ffbbd5d0469a259f67cd7bedf23_list, 1, const_str_digest_eb9765b47f86d28ef2c6f47dde082561 ); Py_INCREF( const_str_digest_eb9765b47f86d28ef2c6f47dde082561 );
    const_str_plain_kwlist = UNSTREAM_STRING( &constant_bin[ 797479 ], 6, 1 );
    const_str_digest_cc2eda06485ca42feb0b61a8d94b80aa = UNSTREAM_STRING( &constant_bin[ 800036 ], 47, 0 );
    const_str_digest_c2ccddf34d5f3ccfcc1d66ae9e062936 = UNSTREAM_STRING( &constant_bin[ 800083 ], 82, 0 );
    const_str_digest_29c8a7dbfff0f5e57cc5a0cd26809507 = UNSTREAM_STRING( &constant_bin[ 800165 ], 36, 0 );
    const_str_digest_787bc58289c516f4da3da43b0da58897 = UNSTREAM_STRING( &constant_bin[ 800201 ], 29, 0 );
    const_str_digest_16c89f50945435dd0988659c1c019bec = UNSTREAM_STRING( &constant_bin[ 730234 ], 11, 0 );
    const_str_digest_11c30c96a295326f303a00456c46c11c = UNSTREAM_STRING( &constant_bin[ 800230 ], 77, 0 );
    const_str_digest_71dc88adbdb5784ff4dcaa433123b169 = UNSTREAM_STRING( &constant_bin[ 800307 ], 35, 0 );
    const_list_2a1cb5f1b6ad96684950fc2bb3e18869_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_2a1cb5f1b6ad96684950fc2bb3e18869_list, 0, const_str_plain_F_FUNC ); Py_INCREF( const_str_plain_F_FUNC );
    PyList_SET_ITEM( const_list_2a1cb5f1b6ad96684950fc2bb3e18869_list, 1, const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70 ); Py_INCREF( const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70 );
    PyList_SET_ITEM( const_list_2a1cb5f1b6ad96684950fc2bb3e18869_list, 2, const_str_plain_STRINGFREE ); Py_INCREF( const_str_plain_STRINGFREE );
    const_str_digest_ba731a222a3154fea200e0b8ef7551a0 = UNSTREAM_STRING( &constant_bin[ 742801 ], 54, 0 );
    const_tuple_str_digest_2c46aa3007c6fd6726f2d9aac9bc2818_tuple = PyTuple_New( 1 );
    const_str_digest_2c46aa3007c6fd6726f2d9aac9bc2818 = UNSTREAM_STRING( &constant_bin[ 800342 ], 16, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_2c46aa3007c6fd6726f2d9aac9bc2818_tuple, 0, const_str_digest_2c46aa3007c6fd6726f2d9aac9bc2818 ); Py_INCREF( const_str_digest_2c46aa3007c6fd6726f2d9aac9bc2818 );
    const_str_digest_06b92084407c057d55dd07c236c4d566 = UNSTREAM_STRING( &constant_bin[ 800358 ], 115, 0 );
    const_str_digest_44d06b0ec49d7cbf872e01bc77a777d5 = UNSTREAM_STRING( &constant_bin[ 800473 ], 39, 0 );
    const_str_digest_c760157a12395121e8e8ddcb4c62d725 = UNSTREAM_STRING( &constant_bin[ 800512 ], 45, 0 );
    const_str_digest_7e7874092dc43d7a6c694d90bfa71c65 = UNSTREAM_STRING( &constant_bin[ 800557 ], 48, 0 );
    const_str_digest_4222d792060d303be1cfc07d37890d79 = UNSTREAM_STRING( &constant_bin[ 800605 ], 15, 0 );
    const_str_digest_71af71dc0b26aad8d87ceab249f8ba1b = UNSTREAM_STRING( &constant_bin[ 800620 ], 43, 0 );
    const_str_digest_74ecdf96ef9d47fce851c9d30f38711e = UNSTREAM_STRING( &constant_bin[ 800663 ], 23, 0 );
    const_str_digest_fe69aab46c78e8d0544f13c568d75e6a = UNSTREAM_STRING( &constant_bin[ 800686 ], 32, 0 );
    const_str_plain_check_rules = UNSTREAM_STRING( &constant_bin[ 800718 ], 11, 1 );
    const_str_digest_af0fa9a92532c606e0e65de481890051 = UNSTREAM_STRING( &constant_bin[ 798873 ], 34, 0 );
    const_tuple_str_digest_c5e6a55b6801b244758895426e3542d9_tuple = PyTuple_New( 1 );
    const_str_digest_c5e6a55b6801b244758895426e3542d9 = UNSTREAM_STRING( &constant_bin[ 800729 ], 34, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_c5e6a55b6801b244758895426e3542d9_tuple, 0, const_str_digest_c5e6a55b6801b244758895426e3542d9 ); Py_INCREF( const_str_digest_c5e6a55b6801b244758895426e3542d9 );
    const_str_digest_fb0ac3319e29a078566c27883e0fcda1 = UNSTREAM_STRING( &constant_bin[ 800763 ], 31, 0 );
    const_dict_c3b8e398c8954454fba85f0a68a2b3f2 = _PyDict_NewPresized( 3 );
    PyDict_SetItem( const_dict_c3b8e398c8954454fba85f0a68a2b3f2, const_str_plain_need, const_str_plain_CHECKGENERIC );
    const_str_digest_c0f707103a4dc62a969a949054c9bb39 = UNSTREAM_STRING( &constant_bin[ 800794 ], 52, 0 );
    PyDict_SetItem( const_dict_c3b8e398c8954454fba85f0a68a2b3f2, const_str_plain_frompyobj, const_str_digest_c0f707103a4dc62a969a949054c9bb39 );
    const_str_plain_cleanupfrompyobj = UNSTREAM_STRING( &constant_bin[ 800846 ], 16, 1 );
    PyDict_SetItem( const_dict_c3b8e398c8954454fba85f0a68a2b3f2, const_str_plain_cleanupfrompyobj, const_str_digest_b5bc79054a4dd1a07d4a642db1bb5e6c );
    assert( PyDict_Size( const_dict_c3b8e398c8954454fba85f0a68a2b3f2 ) == 3 );
    const_list_str_digest_2e018d041c7e280e775f591990904aec_list = PyList_New( 1 );
    const_str_digest_2e018d041c7e280e775f591990904aec = UNSTREAM_STRING( &constant_bin[ 800862 ], 89, 0 );
    PyList_SET_ITEM( const_list_str_digest_2e018d041c7e280e775f591990904aec_list, 0, const_str_digest_2e018d041c7e280e775f591990904aec ); Py_INCREF( const_str_digest_2e018d041c7e280e775f591990904aec );
    const_str_digest_1bd186189b55a7f24f5b08c35b6e375e = UNSTREAM_STRING( &constant_bin[ 800951 ], 19, 0 );
    const_str_plain_need_cfuncs = UNSTREAM_STRING( &constant_bin[ 737191 ], 11, 1 );
    const_str_digest_a83c90fa5fd3daaef5d52b46677ba4ec = UNSTREAM_STRING( &constant_bin[ 800970 ], 70, 0 );
    const_str_digest_4fd4446f18d1b901104969530d10ded8 = UNSTREAM_STRING( &constant_bin[ 801040 ], 46, 0 );
    const_list_0a418c59c89f9fccd0e4ae0f11838976_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_0a418c59c89f9fccd0e4ae0f11838976_list, 0, const_str_digest_388fb92bc2e3d76b8d35eb704c2fd40e ); Py_INCREF( const_str_digest_388fb92bc2e3d76b8d35eb704c2fd40e );
    PyList_SET_ITEM( const_list_0a418c59c89f9fccd0e4ae0f11838976_list, 1, const_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34 ); Py_INCREF( const_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34 );
    PyList_SET_ITEM( const_list_0a418c59c89f9fccd0e4ae0f11838976_list, 2, const_str_plain_STRINGFREE ); Py_INCREF( const_str_plain_STRINGFREE );
    const_str_plain_modnote = UNSTREAM_STRING( &constant_bin[ 801086 ], 7, 1 );
    const_str_plain_cfs = UNSTREAM_STRING( &constant_bin[ 801093 ], 3, 1 );
    const_str_digest_23f56deffe35f9f8fbfb91faf4e32791 = UNSTREAM_STRING( &constant_bin[ 801096 ], 23, 0 );
    const_tuple_str_digest_ae2f2b951c1c5b9ca49bec8c509fa575_str_newline_tuple = PyTuple_New( 2 );
    const_str_digest_ae2f2b951c1c5b9ca49bec8c509fa575 = UNSTREAM_STRING( &constant_bin[ 801119 ], 8, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_ae2f2b951c1c5b9ca49bec8c509fa575_str_newline_tuple, 0, const_str_digest_ae2f2b951c1c5b9ca49bec8c509fa575 ); Py_INCREF( const_str_digest_ae2f2b951c1c5b9ca49bec8c509fa575 );
    PyTuple_SET_ITEM( const_tuple_str_digest_ae2f2b951c1c5b9ca49bec8c509fa575_str_newline_tuple, 1, const_str_newline ); Py_INCREF( const_str_newline );
    const_str_plain_initf2pywraphooks = UNSTREAM_STRING( &constant_bin[ 801127 ], 17, 1 );
    const_str_digest_807a8edf883cc73f1196a6287772f84f = UNSTREAM_STRING( &constant_bin[ 724921 ], 14, 0 );
    const_str_plain_routine_def = UNSTREAM_STRING( &constant_bin[ 801144 ], 11, 1 );
    const_str_digest_4565e1342e713e5280b35b0d095f4f74 = UNSTREAM_STRING( &constant_bin[ 801155 ], 12, 0 );
    const_str_plain_declfortranroutine = UNSTREAM_STRING( &constant_bin[ 801167 ], 18, 1 );
    const_tuple_str_digest_9c66944f85ececbe0338840a546bb4dd_tuple = PyTuple_New( 1 );
    const_str_digest_9c66944f85ececbe0338840a546bb4dd = UNSTREAM_STRING( &constant_bin[ 801185 ], 18, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_9c66944f85ececbe0338840a546bb4dd_tuple, 0, const_str_digest_9c66944f85ececbe0338840a546bb4dd ); Py_INCREF( const_str_digest_9c66944f85ececbe0338840a546bb4dd );
    const_tuple_str_digest_c657b0be22471abcb9376de73f2ad796_tuple = PyTuple_New( 1 );
    const_str_digest_c657b0be22471abcb9376de73f2ad796 = UNSTREAM_STRING( &constant_bin[ 801203 ], 47, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_c657b0be22471abcb9376de73f2ad796_tuple, 0, const_str_digest_c657b0be22471abcb9376de73f2ad796 ); Py_INCREF( const_str_digest_c657b0be22471abcb9376de73f2ad796 );
    const_str_digest_47726514eddf542ce57be98491d6745b = UNSTREAM_STRING( &constant_bin[ 801250 ], 23, 0 );
    const_str_plain_fsrc = UNSTREAM_STRING( &constant_bin[ 801273 ], 4, 1 );
    const_str_plain_nthk = UNSTREAM_STRING( &constant_bin[ 801277 ], 4, 1 );
    const_str_digest_12736df3358c55f9c88205a9d038e3cd = UNSTREAM_STRING( &constant_bin[ 801281 ], 48, 0 );
    const_str_digest_be1bbd329187a280a32151e905c5811c = UNSTREAM_STRING( &constant_bin[ 798801 ], 22, 0 );
    const_str_digest_d5bb8fcff9f6c488a0e6b16adb0537fe = UNSTREAM_STRING( &constant_bin[ 801329 ], 904, 0 );
    const_str_digest_34ea19e92b020553baa1048d998366f6 = UNSTREAM_STRING( &constant_bin[ 802233 ], 49, 0 );
    const_str_digest_c478f6346eb5655aa8b63e42717f98d3 = UNSTREAM_STRING( &constant_bin[ 802282 ], 61, 0 );
    const_str_digest_c4d2c3ebecea3ad233be322292339553 = UNSTREAM_STRING( &constant_bin[ 802343 ], 108, 0 );
    const_str_plain_latexdocsignatureshort = UNSTREAM_STRING( &constant_bin[ 798727 ], 22, 1 );
    const_str_digest_2c65e7a3708b15343e85146c682ba2c2 = UNSTREAM_STRING( &constant_bin[ 802451 ], 39, 0 );
    const_str_digest_c3337c5bb37e9aea6b2f4bdfd46c1465 = UNSTREAM_STRING( &constant_bin[ 802490 ], 72, 0 );
    const_str_plain_routdebugleave = UNSTREAM_STRING( &constant_bin[ 798073 ], 14, 1 );
    const_str_digest_ba6df2cca25e244289fd58a116476aaa = UNSTREAM_STRING( &constant_bin[ 802562 ], 12, 0 );
    const_str_digest_12cebb8a70d033198d60b48030c9e3fe = UNSTREAM_STRING( &constant_bin[ 802574 ], 21, 0 );
    const_str_digest_79ad26fe7b8e008519c2537938b503e9 = UNSTREAM_STRING( &constant_bin[ 802595 ], 25, 0 );
    const_str_digest_b749d4e775149fbefd6170208d066d79 = UNSTREAM_STRING( &constant_bin[ 802620 ], 25, 0 );
    const_str_digest_4c59686e115e363877096931bfcc9764 = UNSTREAM_STRING( &constant_bin[ 1966 ], 9, 0 );
    const_str_digest_dc8dd5a6a650d06eb556e20e18906c89 = UNSTREAM_STRING( &constant_bin[ 802645 ], 22, 0 );
    const_str_plain_xaformat = UNSTREAM_STRING( &constant_bin[ 802667 ], 8, 1 );
    const_str_digest_3901229eb47cd28cbfe43558ace8a7fe = UNSTREAM_STRING( &constant_bin[ 802675 ], 86, 0 );
    const_tuple_str_digest_8eac57ad299a2b6e5510775f127c79ae_tuple = PyTuple_New( 1 );
    const_str_digest_8eac57ad299a2b6e5510775f127c79ae = UNSTREAM_STRING( &constant_bin[ 802761 ], 30, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_8eac57ad299a2b6e5510775f127c79ae_tuple, 0, const_str_digest_8eac57ad299a2b6e5510775f127c79ae ); Py_INCREF( const_str_digest_8eac57ad299a2b6e5510775f127c79ae );
    const_str_digest_8f370fb2a3fdd500cfa3107631ac2b55 = UNSTREAM_STRING( &constant_bin[ 802791 ], 10, 0 );
    const_tuple_str_digest_af0fa9a92532c606e0e65de481890051_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_af0fa9a92532c606e0e65de481890051_tuple, 0, const_str_digest_af0fa9a92532c606e0e65de481890051 ); Py_INCREF( const_str_digest_af0fa9a92532c606e0e65de481890051 );
    const_str_digest_a60174a114848d728a7bac00cb12b7d4 = UNSTREAM_STRING( &constant_bin[ 802801 ], 36, 0 );
    const_list_str_plain_F_WRAPPEDFUNC_str_plain_F_FUNC_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain_F_WRAPPEDFUNC_str_plain_F_FUNC_list, 0, const_str_plain_F_WRAPPEDFUNC ); Py_INCREF( const_str_plain_F_WRAPPEDFUNC );
    PyList_SET_ITEM( const_list_str_plain_F_WRAPPEDFUNC_str_plain_F_FUNC_list, 1, const_str_plain_F_FUNC ); Py_INCREF( const_str_plain_F_FUNC );
    const_str_digest_3a3271ef4159a1c24ad0288a211dee55 = UNSTREAM_STRING( &constant_bin[ 802837 ], 52, 0 );
    const_str_digest_2a298462210506c569d120ca46f60e5c = UNSTREAM_STRING( &constant_bin[ 802889 ], 29, 0 );
    const_str_digest_39e221f238aad8a83601c6acb181457f = UNSTREAM_STRING( &constant_bin[ 802918 ], 43, 0 );
    const_str_plain_docsignoptshort = UNSTREAM_STRING( &constant_bin[ 802961 ], 15, 1 );
    const_str_digest_482888043114fac9592902783c464a6e = UNSTREAM_STRING( &constant_bin[ 802976 ], 33, 0 );
    const_str_digest_d704ce9f38840583240e1e34a2cd70e6 = UNSTREAM_STRING( &constant_bin[ 803009 ], 16, 0 );
    const_list_str_digest_387e5976948d489f60396f8097e151c3_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_387e5976948d489f60396f8097e151c3_list, 0, const_str_digest_387e5976948d489f60396f8097e151c3 ); Py_INCREF( const_str_digest_387e5976948d489f60396f8097e151c3 );
    const_str_digest_23871080073f259d5d6f43f02f0c36c2 = UNSTREAM_STRING( &constant_bin[ 803025 ], 41, 0 );
    const_list_str_digest_d1ebec83b319c7a5ff58a0b1ba8c192e_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_d1ebec83b319c7a5ff58a0b1ba8c192e_list, 0, const_str_digest_d1ebec83b319c7a5ff58a0b1ba8c192e ); Py_INCREF( const_str_digest_d1ebec83b319c7a5ff58a0b1ba8c192e );
    const_str_plain_docsignshort = UNSTREAM_STRING( &constant_bin[ 803066 ], 12, 1 );
    const_str_plain_module_rules = UNSTREAM_STRING( &constant_bin[ 801224 ], 12, 1 );
    const_str_plain_funcwrappers = UNSTREAM_STRING( &constant_bin[ 799913 ], 12, 1 );
    const_str_plain_docsignxashort = UNSTREAM_STRING( &constant_bin[ 803078 ], 14, 1 );
    const_str_digest_67673829ecc7f22967de3f42af9c6968 = UNSTREAM_STRING( &constant_bin[ 798476 ], 29, 0 );
    const_str_digest_345c26e0f9bcfb91e65723d2b555931c = UNSTREAM_STRING( &constant_bin[ 803092 ], 30, 0 );
    const_str_digest_d1ccc851c0352577c15e6c38110b33c1 = UNSTREAM_STRING( &constant_bin[ 803122 ], 27, 0 );
    const_str_digest_f56fee16ec8153a6367a71f0309f3dea = UNSTREAM_STRING( &constant_bin[ 803149 ], 79, 0 );
    const_str_digest_dbbf0270f90bfcbfa51c1e227e53f0e4 = UNSTREAM_STRING( &constant_bin[ 803228 ], 31, 0 );
    const_str_digest_bc622957f475703ce5372fad3a11dd2a = UNSTREAM_STRING( &constant_bin[ 803259 ], 17, 0 );
    const_str_digest_99dfc913087e0ea1a18c8ad788d0d99b = UNSTREAM_STRING( &constant_bin[ 803276 ], 27, 0 );
    const_tuple_88c260f85cd63106b992b7767f2d95e8_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 803303 ], 259 );
    const_str_digest_7e6e68b4e0121e9d083f9892bcee2b5b = UNSTREAM_STRING( &constant_bin[ 803562 ], 27, 0 );
    const_str_plain_nb_list = UNSTREAM_STRING( &constant_bin[ 803424 ], 7, 1 );
    const_str_digest_d48a67d4b786a3513360c9431084eaad = UNSTREAM_STRING( &constant_bin[ 803589 ], 1527, 0 );
    const_tuple_str_digest_933e858953f6fd1fbfea644539c65768_tuple = PyTuple_New( 1 );
    const_str_digest_933e858953f6fd1fbfea644539c65768 = UNSTREAM_STRING( &constant_bin[ 800201 ], 19, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_933e858953f6fd1fbfea644539c65768_tuple, 0, const_str_digest_933e858953f6fd1fbfea644539c65768 ); Py_INCREF( const_str_digest_933e858953f6fd1fbfea644539c65768 );
    const_str_digest_1f47f215e683f1fb509e08c58ac83359 = UNSTREAM_STRING( &constant_bin[ 762832 ], 7, 0 );
    const_str_digest_0337eaf78063cb96bf4678b105943104 = UNSTREAM_STRING( &constant_bin[ 805116 ], 38, 0 );
    const_str_digest_96414f4f92639a7353121cae2e473e26 = UNSTREAM_STRING( &constant_bin[ 805154 ], 16, 0 );
    const_int_pos_66 = PyInt_FromLong( 66l );
    const_list_a6fb55f787096d197a68d518259f030c_list = PyList_New( 5 );
    const_str_digest_b74ba8bcf9c120398beaabec009ec7e5 = UNSTREAM_STRING( &constant_bin[ 805170 ], 27, 0 );
    PyList_SET_ITEM( const_list_a6fb55f787096d197a68d518259f030c_list, 0, const_str_digest_b74ba8bcf9c120398beaabec009ec7e5 ); Py_INCREF( const_str_digest_b74ba8bcf9c120398beaabec009ec7e5 );
    const_str_digest_c7c129324aa8665b6edb34699c42e272 = UNSTREAM_STRING( &constant_bin[ 805197 ], 49, 0 );
    PyList_SET_ITEM( const_list_a6fb55f787096d197a68d518259f030c_list, 1, const_str_digest_c7c129324aa8665b6edb34699c42e272 ); Py_INCREF( const_str_digest_c7c129324aa8665b6edb34699c42e272 );
    const_str_digest_a421e87166c046882d98d6dafdeae7e2 = UNSTREAM_STRING( &constant_bin[ 805246 ], 35, 0 );
    PyList_SET_ITEM( const_list_a6fb55f787096d197a68d518259f030c_list, 2, const_str_digest_a421e87166c046882d98d6dafdeae7e2 ); Py_INCREF( const_str_digest_a421e87166c046882d98d6dafdeae7e2 );
    const_str_digest_e72ac0b53ea738da854e189e8916aaf0 = UNSTREAM_STRING( &constant_bin[ 805281 ], 42, 0 );
    PyList_SET_ITEM( const_list_a6fb55f787096d197a68d518259f030c_list, 3, const_str_digest_e72ac0b53ea738da854e189e8916aaf0 ); Py_INCREF( const_str_digest_e72ac0b53ea738da854e189e8916aaf0 );
    const_str_digest_e5aa69780019fe250284d895b932b736 = UNSTREAM_STRING( &constant_bin[ 805323 ], 31, 0 );
    PyList_SET_ITEM( const_list_a6fb55f787096d197a68d518259f030c_list, 4, const_str_digest_e5aa69780019fe250284d895b932b736 ); Py_INCREF( const_str_digest_e5aa69780019fe250284d895b932b736 );
    const_tuple_str_digest_f56fee16ec8153a6367a71f0309f3dea_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_f56fee16ec8153a6367a71f0309f3dea_tuple, 0, const_str_digest_f56fee16ec8153a6367a71f0309f3dea ); Py_INCREF( const_str_digest_f56fee16ec8153a6367a71f0309f3dea );
    const_str_digest_ce814c810229f76f4c23862cecc7d34c = UNSTREAM_STRING( &constant_bin[ 805354 ], 20, 0 );
    const_str_digest_28722724fa5171e5036e05c92447f918 = UNSTREAM_STRING( &constant_bin[ 805374 ], 19, 0 );
    const_tuple_b59a67d08cb381a692f2539841be435c_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 805393 ], 1088 );
    const_str_digest_1d1217104e20c84be3d61679a5272d17 = UNSTREAM_STRING( &constant_bin[ 806481 ], 61, 0 );
    const_str_digest_a7864ec8dd41aab3bc7b2abc67720e65 = UNSTREAM_STRING( &constant_bin[ 806542 ], 2, 0 );
    const_str_digest_19c89b1adeb69ece88b14d6273aa8ca8 = UNSTREAM_STRING( &constant_bin[ 806544 ], 220, 0 );
    const_tuple_str_plain_use_rules_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_use_rules_tuple, 0, const_str_plain_use_rules ); Py_INCREF( const_str_plain_use_rules );
    const_str_digest_414ab1171f5a5120432354ccf185eb19 = UNSTREAM_STRING( &constant_bin[ 806764 ], 24, 0 );
    const_str_plain_typedef_need_dict = UNSTREAM_STRING( &constant_bin[ 806788 ], 17, 1 );
    const_str_digest_96e6a77778bbeb3dd4408d0a578f26f6 = UNSTREAM_STRING( &constant_bin[ 806805 ], 56, 0 );
    const_str_digest_6f81bebe9433aaa279ac7cb939be9fc7 = UNSTREAM_STRING( &constant_bin[ 806861 ], 18, 0 );
    const_str_digest_ef7930d2a77ddf997ab5a3884f57cd03 = UNSTREAM_STRING( &constant_bin[ 806879 ], 38, 0 );
    const_str_digest_d0192ea46e116016c3c7cbd447f90050 = UNSTREAM_STRING( &constant_bin[ 806917 ], 87, 0 );
    const_str_plain_asctime = UNSTREAM_STRING( &constant_bin[ 807004 ], 7, 1 );
    const_str_digest_dd00cc76eb43fb8e61f9350624d82fe2 = UNSTREAM_STRING( &constant_bin[ 807011 ], 47, 0 );
    const_tuple_str_chr_9_str_digest_b8872718382dd39ffa4013e303d20ce5_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_chr_9_str_digest_b8872718382dd39ffa4013e303d20ce5_tuple, 0, const_str_chr_9 ); Py_INCREF( const_str_chr_9 );
    PyTuple_SET_ITEM( const_tuple_str_chr_9_str_digest_b8872718382dd39ffa4013e303d20ce5_tuple, 1, const_str_digest_b8872718382dd39ffa4013e303d20ce5 ); Py_INCREF( const_str_digest_b8872718382dd39ffa4013e303d20ce5 );
    const_list_str_digest_388fb92bc2e3d76b8d35eb704c2fd40e_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_388fb92bc2e3d76b8d35eb704c2fd40e_list, 0, const_str_digest_388fb92bc2e3d76b8d35eb704c2fd40e ); Py_INCREF( const_str_digest_388fb92bc2e3d76b8d35eb704c2fd40e );
    const_str_digest_1f6d21ea771f0d8ddf3920ca84317357 = UNSTREAM_STRING( &constant_bin[ 807058 ], 24, 0 );
    const_str_digest_1a0597f7af49ea7c71c52aeff981960d = UNSTREAM_STRING( &constant_bin[ 807082 ], 25, 0 );
    const_str_digest_325978b503143ba3d999d70211c4d3a9 = UNSTREAM_STRING( &constant_bin[ 807107 ], 25, 0 );
    const_str_digest_f1e75c0c1497ab800c297f4461543ec2 = UNSTREAM_STRING( &constant_bin[ 807132 ], 14, 0 );
    const_str_plain_returnformat = UNSTREAM_STRING( &constant_bin[ 804749 ], 12, 1 );
    const_str_plain_mod_rules = UNSTREAM_STRING( &constant_bin[ 795445 ], 9, 1 );
    const_str_digest_946f7eab661e75156757fc78e18fae8a = UNSTREAM_STRING( &constant_bin[ 807146 ], 13, 0 );
    const_str_digest_93455bf8bf6723d3683f4767d1730bb1 = UNSTREAM_STRING( &constant_bin[ 807159 ], 74, 0 );
    const_tuple_cde206c752dab3a50d1c0e1f18afb419_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 807233 ], 391 );
    const_tuple_str_plain_common_rules_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_common_rules_tuple, 0, const_str_plain_common_rules ); Py_INCREF( const_str_plain_common_rules );
    const_str_plain_callcompaqfortran = UNSTREAM_STRING( &constant_bin[ 798448 ], 17, 1 );
    const_str_digest_0c04797528ac79a29ab7bb1842a844da = UNSTREAM_STRING( &constant_bin[ 807624 ], 273, 0 );
    const_str_plain_args_capi = UNSTREAM_STRING( &constant_bin[ 725485 ], 9, 1 );
    const_str_digest_20a3807ace2c22a5b914be87d9d866f7 = UNSTREAM_STRING( &constant_bin[ 807897 ], 34, 0 );
    const_str_plain_cr = UNSTREAM_STRING( &constant_bin[ 1304 ], 2, 1 );
    const_list_917626a5cab86448639269d43350330f_list = PyList_New( 2 );
    const_str_digest_856e8e75cb438f8a97b7c6d5ad17a59e = UNSTREAM_STRING( &constant_bin[ 797910 ], 8, 0 );
    PyList_SET_ITEM( const_list_917626a5cab86448639269d43350330f_list, 0, const_str_digest_856e8e75cb438f8a97b7c6d5ad17a59e ); Py_INCREF( const_str_digest_856e8e75cb438f8a97b7c6d5ad17a59e );
    PyList_SET_ITEM( const_list_917626a5cab86448639269d43350330f_list, 1, const_str_digest_1e8ac9703bbf7691e9fca0e2c65d6bb3 ); Py_INCREF( const_str_digest_1e8ac9703bbf7691e9fca0e2c65d6bb3 );
    const_str_digest_ec5c056bc2faa2f16a4f48f4884353b9 = UNSTREAM_STRING( &constant_bin[ 797586 ], 10, 0 );
    const_str_digest_b72c98396d6b7d6bb9cbbbefd832fdb3 = UNSTREAM_STRING( &constant_bin[ 807931 ], 138, 0 );
    const_tuple_str_digest_29af8796ba8bf65ff4bf13d6ccb716bc_tuple = PyTuple_New( 1 );
    const_str_digest_29af8796ba8bf65ff4bf13d6ccb716bc = UNSTREAM_STRING( &constant_bin[ 808069 ], 60, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_29af8796ba8bf65ff4bf13d6ccb716bc_tuple, 0, const_str_digest_29af8796ba8bf65ff4bf13d6ccb716bc ); Py_INCREF( const_str_digest_29af8796ba8bf65ff4bf13d6ccb716bc );
    const_str_digest_5529d0c2e779042efeaae9babb2fc0da = UNSTREAM_STRING( &constant_bin[ 808129 ], 87, 0 );
    const_str_digest_032e97d119935691197bd6f75c386436 = UNSTREAM_STRING( &constant_bin[ 808216 ], 14, 0 );
    const_str_digest_cae2ad5950e123dc09fe80b1437808b7 = UNSTREAM_STRING( &constant_bin[ 808230 ], 23, 0 );
    const_str_plain_keys_xa = UNSTREAM_STRING( &constant_bin[ 804349 ], 7, 1 );
    const_str_digest_e577de0849b7e7b9012751e2668e791b = UNSTREAM_STRING( &constant_bin[ 808253 ], 56, 0 );
    const_str_digest_beb345b44a602b66219bb743770c3d15 = UNSTREAM_STRING( &constant_bin[ 808309 ], 63, 0 );
    const_tuple_20ae7db600419ead7934aa64123ca771_tuple = PyTuple_New( 19 );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 0, const_str_plain_rout ); Py_INCREF( const_str_plain_rout );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 1, const_str_plain_wrap ); Py_INCREF( const_str_plain_wrap );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 2, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 3, const_str_plain_depargs ); Py_INCREF( const_str_plain_depargs );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 4, const_str_plain_var ); Py_INCREF( const_str_plain_var );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 5, const_str_plain_vrd ); Py_INCREF( const_str_plain_vrd );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 6, const_str_plain_rd ); Py_INCREF( const_str_plain_rd );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 7, const_str_plain_r ); Py_INCREF( const_str_plain_r );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 8, const_str_plain_ar ); Py_INCREF( const_str_plain_ar );
    const_str_plain_nth = UNSTREAM_STRING( &constant_bin[ 229195 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 9, const_str_plain_nth ); Py_INCREF( const_str_plain_nth );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 10, const_str_plain_nthk ); Py_INCREF( const_str_plain_nthk );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 11, const_str_plain_savevrd ); Py_INCREF( const_str_plain_savevrd );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 12, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 13, const_str_plain__rules ); Py_INCREF( const_str_plain__rules );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 14, const_str_plain_c ); Py_INCREF( const_str_plain_c );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 15, const_str_plain_optargs ); Py_INCREF( const_str_plain_optargs );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 16, const_str_plain_cfs ); Py_INCREF( const_str_plain_cfs );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 17, const_str_plain_k ); Py_INCREF( const_str_plain_k );
    const_str_plain_argformat = UNSTREAM_STRING( &constant_bin[ 325974 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 18, const_str_plain_argformat ); Py_INCREF( const_str_plain_argformat );
    const_str_digest_2c0998a53b872b9217a70a4214626264 = UNSTREAM_STRING( &constant_bin[ 808372 ], 32, 0 );
    const_tuple_str_digest_dbbf0270f90bfcbfa51c1e227e53f0e4_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_dbbf0270f90bfcbfa51c1e227e53f0e4_tuple, 0, const_str_digest_dbbf0270f90bfcbfa51c1e227e53f0e4 ); Py_INCREF( const_str_digest_dbbf0270f90bfcbfa51c1e227e53f0e4 );
    const_str_digest_17b6682164c8e0e6b79f7d2463beb342 = UNSTREAM_STRING( &constant_bin[ 808404 ], 23, 0 );
    const_str_digest_8a1d6a3e81f79db2268e6ff0852d7a55 = UNSTREAM_STRING( &constant_bin[ 808427 ], 67, 0 );
    const_str_digest_5c5eac15bee883da581fb631c32166a5 = UNSTREAM_STRING( &constant_bin[ 808405 ], 22, 0 );
    const_str_digest_cf8a9881e3a2ad0668b004694b967abc = UNSTREAM_STRING( &constant_bin[ 808494 ], 36, 0 );
    const_str_digest_c0d6e5feecfa16c4a5e5c5506cf94dee = UNSTREAM_STRING( &constant_bin[ 808530 ], 69, 0 );
    const_str_digest_beaced962362efb12e32d7f656575481 = UNSTREAM_STRING( &constant_bin[ 808599 ], 78, 0 );
    const_str_digest_dbc79063883259818da1c0a53399df33 = UNSTREAM_STRING( &constant_bin[ 803724 ], 20, 0 );
    const_str_digest_7fb5819781c8f9c166c8b3034a26c432 = UNSTREAM_STRING( &constant_bin[ 808677 ], 26, 0 );
    const_str_digest_d63e19eac20174e68ed46e663e86a06f = UNSTREAM_STRING( &constant_bin[ 808703 ], 69, 0 );
    const_str_digest_3a9c9af3e588a2633a190cff1a10bb88 = UNSTREAM_STRING( &constant_bin[ 808772 ], 44, 0 );
    const_str_digest_edac874f144411fa00eea5af51810d35 = UNSTREAM_STRING( &constant_bin[ 808816 ], 31, 0 );
    const_str_digest_0bb657bab49ef543e096eeb93b12d22e = UNSTREAM_STRING( &constant_bin[ 808847 ], 16, 0 );
    const_str_digest_170fbc35e0bd1f7f0940a832e84e8905 = UNSTREAM_STRING( &constant_bin[ 808863 ], 786, 0 );
    const_tuple_str_digest_0337eaf78063cb96bf4678b105943104_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_0337eaf78063cb96bf4678b105943104_tuple, 0, const_str_digest_0337eaf78063cb96bf4678b105943104 ); Py_INCREF( const_str_digest_0337eaf78063cb96bf4678b105943104 );
    const_str_digest_488c7d63531ff8d954b32cb09970fd16 = UNSTREAM_STRING( &constant_bin[ 809649 ], 50, 0 );
    const_str_digest_35c9158baecd0085b3954968a96536eb = UNSTREAM_STRING( &constant_bin[ 809699 ], 39, 0 );
    const_str_digest_9b25501ee14be4762851524d43f59638 = UNSTREAM_STRING( &constant_bin[ 797552 ], 11, 0 );
    const_str_digest_69f24e9f0cf3c2a3ec814d04c9edfdf2 = UNSTREAM_STRING( &constant_bin[ 809738 ], 11, 0 );
    const_str_digest_74d76a791efaafa48494f438f04e3207 = UNSTREAM_STRING( &constant_bin[ 809749 ], 16, 0 );
    const_str_digest_3cc0372e2a4fb619e6863414a829c950 = UNSTREAM_STRING( &constant_bin[ 809765 ], 57, 0 );
    const_str_digest_7178dc6f935667e436cac6815906e220 = UNSTREAM_STRING( &constant_bin[ 809822 ], 56, 0 );
    const_str_digest_f84a55aeb58eb8347c93e2f1b19d36b1 = UNSTREAM_STRING( &constant_bin[ 809878 ], 30, 0 );
    const_str_digest_8ccc89ec0e61b203c6e566738d08b055 = UNSTREAM_STRING( &constant_bin[ 809908 ], 65, 0 );
    const_str_plain_ltx = UNSTREAM_STRING( &constant_bin[ 809973 ], 3, 1 );
    const_str_digest_17bcb58e75e5d8bce33ae36b2bf1b62d = UNSTREAM_STRING( &constant_bin[ 809976 ], 23, 0 );
    const_str_digest_9f02b2aa426d1e968bb0fe3cfd892925 = UNSTREAM_STRING( &constant_bin[ 809999 ], 25, 0 );
    const_str_digest_78e7855a1c411f5523b2f9a24c9da36d = UNSTREAM_STRING( &constant_bin[ 810024 ], 21, 0 );
    const_str_digest_ff06ccb2c23c449388cb0f214acc87f7 = UNSTREAM_STRING( &constant_bin[ 726185 ], 2, 0 );
    const_tuple_str_digest_eee6c61da125ddd4aae5b138d99219fb_tuple = PyTuple_New( 1 );
    const_str_digest_eee6c61da125ddd4aae5b138d99219fb = UNSTREAM_STRING( &constant_bin[ 810045 ], 44, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_eee6c61da125ddd4aae5b138d99219fb_tuple, 0, const_str_digest_eee6c61da125ddd4aae5b138d99219fb ); Py_INCREF( const_str_digest_eee6c61da125ddd4aae5b138d99219fb );
    const_str_digest_f681ff7c9e722de570a0e4171ce853b0 = UNSTREAM_STRING( &constant_bin[ 810089 ], 96, 0 );
    const_str_digest_a09721f72a5c34dacc0ffc15233c4471 = UNSTREAM_STRING( &constant_bin[ 810185 ], 436, 0 );
    const_str_digest_0967bcbd53c017d1a5d5547539b56ee3 = UNSTREAM_STRING( &constant_bin[ 809865 ], 11, 0 );
    const_str_digest_7fe249f2ea6a3ed66c02d89e1213fce8 = UNSTREAM_STRING( &constant_bin[ 810621 ], 8, 0 );
    const_str_digest_5ca3740c33ff4b38e47625fb5fd9b66b = UNSTREAM_STRING( &constant_bin[ 810629 ], 10, 0 );
    const_str_digest_7c415443cbc1606e2636a4c45b379117 = UNSTREAM_STRING( &constant_bin[ 810639 ], 54, 0 );
    const_dict_f901ef362e29b410a7de5c49b0849102 = _PyDict_NewPresized( 2 );
    PyDict_SetItem( const_dict_f901ef362e29b410a7de5c49b0849102, const_str_plain_latexdoc, const_str_digest_09bc009ffd858aaf58df7e98266d9b89 );
    PyDict_SetItem( const_dict_f901ef362e29b410a7de5c49b0849102, const_str_plain_restdoc, const_str_digest_09bc009ffd858aaf58df7e98266d9b89 );
    assert( PyDict_Size( const_dict_f901ef362e29b410a7de5c49b0849102 ) == 2 );
    const_str_digest_cd86e09bc11753fb56a3ef851d5f64d3 = UNSTREAM_STRING( &constant_bin[ 810693 ], 57, 0 );
    const_str_digest_d63884af5fa452403148da77aa33bbba = UNSTREAM_STRING( &constant_bin[ 810750 ], 19, 0 );
    const_str_digest_9162ef44a28670aee2da45cf26457013 = UNSTREAM_STRING( &constant_bin[ 810769 ], 47, 0 );
    const_str_digest_631e000c81d910a8147ab346cc8ad355 = UNSTREAM_STRING( &constant_bin[ 810816 ], 18, 0 );
    const_str_digest_fad16014b804349bb65b09a2311b1ac7 = UNSTREAM_STRING( &constant_bin[ 22649 ], 3, 0 );
    const_str_digest_66fffa7382fc579f724e49265556b744 = UNSTREAM_STRING( &constant_bin[ 810834 ], 38, 0 );
    const_str_digest_b1685647f0346194c5abc8530f497944 = UNSTREAM_STRING( &constant_bin[ 810872 ], 50, 0 );
    const_str_digest_1359d76a6df2fc5fce5bf1da14fde955 = UNSTREAM_STRING( &constant_bin[ 787588 ], 14, 0 );
    const_str_digest_b2ad6e17ea6c37fb40ca65618064396b = UNSTREAM_STRING( &constant_bin[ 810922 ], 23, 0 );
    const_list_83502bc928309bee706fd67dc708d8b5_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_83502bc928309bee706fd67dc708d8b5_list, 0, const_str_digest_7fb5819781c8f9c166c8b3034a26c432 ); Py_INCREF( const_str_digest_7fb5819781c8f9c166c8b3034a26c432 );
    PyList_SET_ITEM( const_list_83502bc928309bee706fd67dc708d8b5_list, 1, const_str_digest_78e7855a1c411f5523b2f9a24c9da36d ); Py_INCREF( const_str_digest_78e7855a1c411f5523b2f9a24c9da36d );
    PyList_SET_ITEM( const_list_83502bc928309bee706fd67dc708d8b5_list, 2, const_str_digest_a60174a114848d728a7bac00cb12b7d4 ); Py_INCREF( const_str_digest_a60174a114848d728a7bac00cb12b7d4 );
    const_str_digest_5b7ccc32e52fccf534ab08cff75fe54e = UNSTREAM_STRING( &constant_bin[ 810945 ], 19, 0 );
    const_str_digest_8b378a16bc207977d6266489de437e89 = UNSTREAM_STRING( &constant_bin[ 810964 ], 51, 0 );
    const_str_digest_cd4607fc44852b68f6faa04a473c87c2 = UNSTREAM_STRING( &constant_bin[ 811015 ], 25, 0 );
    const_str_digest_c4364c15f85c6aa770abecdf0860eef3 = UNSTREAM_STRING( &constant_bin[ 811040 ], 90, 0 );
    const_str_digest_660079687b96f232aaa5a3014be65b39 = UNSTREAM_STRING( &constant_bin[ 811130 ], 35, 0 );
    const_str_digest_77980ec1039787377cb2bd9237b0de43 = UNSTREAM_STRING( &constant_bin[ 811165 ], 108, 0 );
    const_str_digest_d9dd8713a53b56ea3a5074599b9e3487 = UNSTREAM_STRING( &constant_bin[ 811273 ], 11, 0 );
    const_str_digest_69bcf359a7b50491550fde7484871e51 = UNSTREAM_STRING( &constant_bin[ 811284 ], 78, 0 );
    const_str_digest_f71cea4c61eb6b8fcaae04bdb38a08bc = UNSTREAM_STRING( &constant_bin[ 811362 ], 40, 0 );
    const_str_digest_ecc6d7d65aba7b1225ac97578459be7a = UNSTREAM_STRING( &constant_bin[ 811402 ], 50, 0 );
    const_str_plain_callfortran = UNSTREAM_STRING( &constant_bin[ 798341 ], 11, 1 );
    const_str_digest_71436a61366dee7252a8788654eae266 = UNSTREAM_STRING( &constant_bin[ 811452 ], 76, 0 );
    const_str_digest_9774ec4c1bd3c4901e1c3fef5777de0b = UNSTREAM_STRING( &constant_bin[ 811528 ], 26, 0 );
    const_str_digest_6264e53bf9ed98be0a17c99db19ce952 = UNSTREAM_STRING( &constant_bin[ 811554 ], 87, 0 );
    const_str_digest_8f4a6ebd219b92c5b2fe5a6636dc1e65 = UNSTREAM_STRING( &constant_bin[ 811641 ], 41, 0 );
    const_str_plain_stnd = UNSTREAM_STRING( &constant_bin[ 811682 ], 4, 1 );
    const_str_digest_f48c9699284b5eab9a8d58a5db521367 = UNSTREAM_STRING( &constant_bin[ 811686 ], 86, 0 );
    const_str_digest_b36eba167a40a26a3820807615923d7e = UNSTREAM_STRING( &constant_bin[ 811772 ], 35, 0 );
    const_str_digest_1872273f673a454c879c2bca8fa0f177 = UNSTREAM_STRING( &constant_bin[ 811807 ], 56, 0 );
    const_str_digest_f0ccf18acc02945cb81efd922b1819aa = UNSTREAM_STRING( &constant_bin[ 811863 ], 57, 0 );
    const_str_digest_04f4c2c2c1e779d6eb09065af8957943 = UNSTREAM_STRING( &constant_bin[ 811920 ], 145, 0 );
    const_str_digest_b479b99c7dbd197f077384bde03834c4 = UNSTREAM_STRING( &constant_bin[ 812065 ], 37, 0 );
    const_str_plain_defmod_rules = UNSTREAM_STRING( &constant_bin[ 812102 ], 12, 1 );
    const_str_digest_2c6eb05daf937c60611d98859634dd33 = UNSTREAM_STRING( &constant_bin[ 812114 ], 49, 0 );
    const_str_digest_5e7d869da782af1421d1abc2296a84fd = UNSTREAM_STRING( &constant_bin[ 812163 ], 13, 0 );
    const_str_plain_functype = UNSTREAM_STRING( &constant_bin[ 803928 ], 8, 1 );
    const_str_digest_6c5d9030ff78b2d417d18e1093b4bafb = UNSTREAM_STRING( &constant_bin[ 812176 ], 8, 0 );
    const_str_digest_e9feacad3ffc7d40ca7fa991c347ae8e = UNSTREAM_STRING( &constant_bin[ 812184 ], 51, 0 );
    const_str_digest_7e5a52158bc4715036d44a08d9a59588 = UNSTREAM_STRING( &constant_bin[ 812235 ], 836, 0 );
    const_str_plain_unsigned = UNSTREAM_STRING( &constant_bin[ 154147 ], 8, 1 );
    const_str_plain_keys_capi = UNSTREAM_STRING( &constant_bin[ 804338 ], 9, 1 );
    const_str_plain_pyname = UNSTREAM_STRING( &constant_bin[ 797665 ], 6, 1 );
    const_str_digest_9cfd9f010c87212166c3a6b47669c9ec = UNSTREAM_STRING( &constant_bin[ 807179 ], 51, 0 );
    const_str_plain_routdebugenter = UNSTREAM_STRING( &constant_bin[ 798098 ], 14, 1 );
    const_str_digest_f079d8c7e0ce1658a2cdcdbc6577f10a = UNSTREAM_STRING( &constant_bin[ 813071 ], 110, 0 );
    const_str_digest_14e46075417ae2136dc3bcb6488889ce = UNSTREAM_STRING( &constant_bin[ 813181 ], 49, 0 );
    const_list_str_digest_c2ccddf34d5f3ccfcc1d66ae9e062936_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_c2ccddf34d5f3ccfcc1d66ae9e062936_list, 0, const_str_digest_c2ccddf34d5f3ccfcc1d66ae9e062936 ); Py_INCREF( const_str_digest_c2ccddf34d5f3ccfcc1d66ae9e062936 );
    const_str_digest_e5f2c17bbfe3be0dd9ee7e1c43bce690 = UNSTREAM_STRING( &constant_bin[ 813230 ], 32, 0 );
    const_tuple_str_digest_14e46075417ae2136dc3bcb6488889ce_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_14e46075417ae2136dc3bcb6488889ce_tuple, 0, const_str_digest_14e46075417ae2136dc3bcb6488889ce ); Py_INCREF( const_str_digest_14e46075417ae2136dc3bcb6488889ce );
    const_tuple_str_digest_dc8dd5a6a650d06eb556e20e18906c89_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_dc8dd5a6a650d06eb556e20e18906c89_tuple, 0, const_str_digest_dc8dd5a6a650d06eb556e20e18906c89 ); Py_INCREF( const_str_digest_dc8dd5a6a650d06eb556e20e18906c89 );
    const_str_plain_callfortranroutine = UNSTREAM_STRING( &constant_bin[ 798341 ], 18, 1 );
    const_list_10b104c3768849b37f92dfc64a682f14_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_10b104c3768849b37f92dfc64a682f14_list, 0, const_str_digest_7fb5819781c8f9c166c8b3034a26c432 ); Py_INCREF( const_str_digest_7fb5819781c8f9c166c8b3034a26c432 );
    PyList_SET_ITEM( const_list_10b104c3768849b37f92dfc64a682f14_list, 1, const_str_digest_78e7855a1c411f5523b2f9a24c9da36d ); Py_INCREF( const_str_digest_78e7855a1c411f5523b2f9a24c9da36d );
    const_str_digest_01daef0e26ca54c28969374339b40890 = UNSTREAM_STRING( &constant_bin[ 813262 ], 22, 0 );
    const_str_plain_rout_rules = UNSTREAM_STRING( &constant_bin[ 729870 ], 10, 1 );
    const_tuple_str_digest_b479b99c7dbd197f077384bde03834c4_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b479b99c7dbd197f077384bde03834c4_tuple, 0, const_str_digest_b479b99c7dbd197f077384bde03834c4 ); Py_INCREF( const_str_digest_b479b99c7dbd197f077384bde03834c4 );
    const_str_digest_b4c19ac5d0264d44f3b358978705a878 = UNSTREAM_STRING( &constant_bin[ 813284 ], 218, 0 );
    const_str_digest_b0e1a5bc6a31e8edcea9b71d04eea040 = UNSTREAM_STRING( &constant_bin[ 3547 ], 8, 0 );
    const_str_digest_a71697e2d65b2aee7f8a386bcf6560c6 = UNSTREAM_STRING( &constant_bin[ 813502 ], 37, 0 );
    const_str_digest_9aa41ddc81f67fdd23a634f026352f66 = UNSTREAM_STRING( &constant_bin[ 813539 ], 6, 0 );
    const_str_digest_c9903fbd55a8e7f7bbcf4a7ebb5c29f0 = UNSTREAM_STRING( &constant_bin[ 736270 ], 2, 0 );
    const_str_digest_cd5e665f895ef7c8eb453ced6fc763f4 = UNSTREAM_STRING( &constant_bin[ 813545 ], 48, 0 );
    const_str_digest_6f1be74ea92dca27c547a995cbe2baf3 = UNSTREAM_STRING( &constant_bin[ 813593 ], 39, 0 );
    const_str_plain_routdebugfailure = UNSTREAM_STRING( &constant_bin[ 798193 ], 16, 1 );
    const_list_63cf9afba8d0564dfc4c1155a17b0c8c_list = PyList_New( 3 );
    const_str_digest_5a0786a58a787b5e9acb9e24136f8f24 = UNSTREAM_STRING( &constant_bin[ 813632 ], 42, 0 );
    PyList_SET_ITEM( const_list_63cf9afba8d0564dfc4c1155a17b0c8c_list, 0, const_str_digest_5a0786a58a787b5e9acb9e24136f8f24 ); Py_INCREF( const_str_digest_5a0786a58a787b5e9acb9e24136f8f24 );
    PyList_SET_ITEM( const_list_63cf9afba8d0564dfc4c1155a17b0c8c_list, 1, const_str_digest_8f370fb2a3fdd500cfa3107631ac2b55 ); Py_INCREF( const_str_digest_8f370fb2a3fdd500cfa3107631ac2b55 );
    PyList_SET_ITEM( const_list_63cf9afba8d0564dfc4c1155a17b0c8c_list, 2, const_str_digest_5ca3740c33ff4b38e47625fb5fd9b66b ); Py_INCREF( const_str_digest_5ca3740c33ff4b38e47625fb5fd9b66b );
    const_tuple_str_digest_66fffa7382fc579f724e49265556b744_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_66fffa7382fc579f724e49265556b744_tuple, 0, const_str_digest_66fffa7382fc579f724e49265556b744 ); Py_INCREF( const_str_digest_66fffa7382fc579f724e49265556b744 );
    const_str_digest_135952e4416c93a7303e3f7aaf5a0da5 = UNSTREAM_STRING( &constant_bin[ 813674 ], 285, 0 );
    const_str_digest_d065d82fc9f51ae43f4b8db6651be301 = UNSTREAM_STRING( &constant_bin[ 813959 ], 12, 0 );
    const_str_digest_e6104d35553a035097ec1423ebaa6291 = UNSTREAM_STRING( &constant_bin[ 813971 ], 20, 0 );
    const_str_digest_0ec129680246017f27a2269f24523dbb = UNSTREAM_STRING( &constant_bin[ 813991 ], 33, 0 );
    const_str_digest_fbc04200dab383be8fc5e9dc341549b2 = UNSTREAM_STRING( &constant_bin[ 797586 ], 15, 0 );
    const_str_digest_1fd49f133ca390a888f362a49cd559e3 = UNSTREAM_STRING( &constant_bin[ 814024 ], 74, 0 );
    const_str_digest_a871c415f4ae2645c21857940d3b44f9 = UNSTREAM_STRING( &constant_bin[ 814098 ], 109, 0 );
    const_tuple_str_digest_f71cea4c61eb6b8fcaae04bdb38a08bc_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_f71cea4c61eb6b8fcaae04bdb38a08bc_tuple, 0, const_str_digest_f71cea4c61eb6b8fcaae04bdb38a08bc ); Py_INCREF( const_str_digest_f71cea4c61eb6b8fcaae04bdb38a08bc );
    const_str_digest_a48893cf324000647f544daf37b32385 = UNSTREAM_STRING( &constant_bin[ 814207 ], 20, 0 );
    const_str_digest_c634e279bc3759c83195e9f177b3e4ee = UNSTREAM_STRING( &constant_bin[ 814227 ], 22, 0 );
    const_str_digest_fc43de2b25b47bcb22ddc2ca412903c1 = UNSTREAM_STRING( &constant_bin[ 814249 ], 20, 0 );
    const_list_d9758b2de662a4320da70ff340579452_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_d9758b2de662a4320da70ff340579452_list, 0, const_str_digest_2c6eb05daf937c60611d98859634dd33 ); Py_INCREF( const_str_digest_2c6eb05daf937c60611d98859634dd33 );
    PyList_SET_ITEM( const_list_d9758b2de662a4320da70ff340579452_list, 1, const_str_digest_755ecb11d7620a38d1696cb048c38ef9 ); Py_INCREF( const_str_digest_755ecb11d7620a38d1696cb048c38ef9 );
    const_str_digest_eddadf0dabfc5042f9a31bb99020252b = UNSTREAM_STRING( &constant_bin[ 814269 ], 16, 0 );
    const_str_digest_7d26dd93dbe102ee8b81db081a6361f0 = UNSTREAM_STRING( &constant_bin[ 814285 ], 33, 0 );
    const_str_plain_callfortranappend = UNSTREAM_STRING( &constant_bin[ 800324 ], 17, 1 );
    const_str_digest_40637411422dfc32b28a843ad5dde31c = UNSTREAM_STRING( &constant_bin[ 814318 ], 96, 0 );
    const_str_plain_arg_rules = UNSTREAM_STRING( &constant_bin[ 730487 ], 9, 1 );
    const_str_plain_keyformat = UNSTREAM_STRING( &constant_bin[ 804280 ], 9, 1 );
    const_str_digest_a75b5e8e76ffa7e79c5a93ac611a3b01 = UNSTREAM_STRING( &constant_bin[ 814414 ], 62, 0 );
    const_str_digest_fa64e08327e0a6e4fa4e283d195f2c2e = UNSTREAM_STRING( &constant_bin[ 814476 ], 32, 0 );
    const_tuple_str_digest_963286ad3178c103324b9b07b66b91cf_tuple = PyTuple_New( 1 );
    const_str_digest_963286ad3178c103324b9b07b66b91cf = UNSTREAM_STRING( &constant_bin[ 814508 ], 28, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_963286ad3178c103324b9b07b66b91cf_tuple, 0, const_str_digest_963286ad3178c103324b9b07b66b91cf ); Py_INCREF( const_str_digest_963286ad3178c103324b9b07b66b91cf );
    const_str_digest_9ed50576800e8b31c86257ade86792c9 = UNSTREAM_STRING( &constant_bin[ 814536 ], 18, 0 );
    const_list_53e499b918b44aac469e052ee883b608_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_53e499b918b44aac469e052ee883b608_list, 0, const_str_digest_b74ba8bcf9c120398beaabec009ec7e5 ); Py_INCREF( const_str_digest_b74ba8bcf9c120398beaabec009ec7e5 );
    PyList_SET_ITEM( const_list_53e499b918b44aac469e052ee883b608_list, 1, const_str_digest_c7c129324aa8665b6edb34699c42e272 ); Py_INCREF( const_str_digest_c7c129324aa8665b6edb34699c42e272 );
    PyList_SET_ITEM( const_list_53e499b918b44aac469e052ee883b608_list, 2, const_str_digest_a421e87166c046882d98d6dafdeae7e2 ); Py_INCREF( const_str_digest_a421e87166c046882d98d6dafdeae7e2 );
    const_str_digest_f5e74abb58d16359f25a81ce2dbfb679 = UNSTREAM_STRING( &constant_bin[ 814554 ], 50, 0 );
    const_str_digest_6002d8c1f65ca339b0204f2c0395caf2 = UNSTREAM_STRING( &constant_bin[ 814604 ], 21, 0 );
    const_list_0725c8ade74f8f28b621ba88c880b6bd_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_0725c8ade74f8f28b621ba88c880b6bd_list, 0, const_str_digest_f5ccb89b2d4437f9d7dbcd87b32735ec ); Py_INCREF( const_str_digest_f5ccb89b2d4437f9d7dbcd87b32735ec );
    PyList_SET_ITEM( const_list_0725c8ade74f8f28b621ba88c880b6bd_list, 1, const_str_plain_CFUNCSMESS ); Py_INCREF( const_str_plain_CFUNCSMESS );
    PyList_SET_ITEM( const_list_0725c8ade74f8f28b621ba88c880b6bd_list, 2, const_str_plain_MINMAX ); Py_INCREF( const_str_plain_MINMAX );
    const_tuple_str_digest_1359d76a6df2fc5fce5bf1da14fde955_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_1359d76a6df2fc5fce5bf1da14fde955_tuple, 0, const_str_digest_1359d76a6df2fc5fce5bf1da14fde955 ); Py_INCREF( const_str_digest_1359d76a6df2fc5fce5bf1da14fde955 );
    const_list_str_plain_SWAP_str_plain_create_cb_arglist_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain_SWAP_str_plain_create_cb_arglist_list, 0, const_str_plain_SWAP ); Py_INCREF( const_str_plain_SWAP );
    PyList_SET_ITEM( const_list_str_plain_SWAP_str_plain_create_cb_arglist_list, 1, const_str_plain_create_cb_arglist ); Py_INCREF( const_str_plain_create_cb_arglist );
    const_str_plain_wn = UNSTREAM_STRING( &constant_bin[ 999 ], 2, 1 );
    const_str_digest_8fbf2e4eee7783460695f41dff730b42 = UNSTREAM_STRING( &constant_bin[ 814625 ], 22, 0 );
    const_str_digest_53072a7b20febbca5aacd3d90ca0035b = UNSTREAM_STRING( &constant_bin[ 814647 ], 435, 0 );
    const_str_plain_kwlistxa = UNSTREAM_STRING( &constant_bin[ 804110 ], 8, 1 );
    const_str_digest_eec1155b73c887bcd4e234f423320107 = UNSTREAM_STRING( &constant_bin[ 811090 ], 19, 0 );
    const_str_digest_7bdd9ab4ad5ebd4af4db670afc5ddd0d = UNSTREAM_STRING( &constant_bin[ 815082 ], 51, 0 );
    const_str_digest_70ca1db0f541403066a91a07e8aafa04 = UNSTREAM_STRING( &constant_bin[ 815133 ], 69, 0 );
    const_str_digest_84f027da8d9989afd7d384e03c83d525 = UNSTREAM_STRING( &constant_bin[ 815202 ], 57, 0 );
    const_dict_055a5e2e8d3048ab4922e8d2791b57c7 = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 815259 ], 122 );
    const_str_digest_ed8324cdd58a5f11071d24d180e25fba = UNSTREAM_STRING( &constant_bin[ 815381 ], 125, 0 );
    const_str_digest_e20e424cfc96e1ebeae47e009382b436 = UNSTREAM_STRING( &constant_bin[ 815506 ], 87, 0 );
    const_tuple_str_digest_787bc58289c516f4da3da43b0da58897_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_787bc58289c516f4da3da43b0da58897_tuple, 0, const_str_digest_787bc58289c516f4da3da43b0da58897 ); Py_INCREF( const_str_digest_787bc58289c516f4da3da43b0da58897 );
    const_str_digest_c766b4789856a6ba99bed500bbe3da6b = UNSTREAM_STRING( &constant_bin[ 815593 ], 40, 0 );
    const_str_plain_nb1 = UNSTREAM_STRING( &constant_bin[ 803448 ], 3, 1 );
    const_str_plain_docsignxa = UNSTREAM_STRING( &constant_bin[ 803078 ], 9, 1 );
    const_str_digest_ae43d06c73b4fbd5c298de60127d721d = UNSTREAM_STRING( &constant_bin[ 815633 ], 23, 0 );
    const_str_digest_62a1a1ac115d9bf18b02ed37eef6a5f9 = UNSTREAM_STRING( &constant_bin[ 815656 ], 34, 0 );
    const_str_digest_a505672d4ff6f54888f9e90c60cf9b67 = UNSTREAM_STRING( &constant_bin[ 815690 ], 123, 0 );
    const_str_digest_418fe04998188548a4eb680883e25e29 = UNSTREAM_STRING( &constant_bin[ 815813 ], 71, 0 );
    const_str_digest_7e73ba8d5edb7ec5ccd148bf6084d61b = UNSTREAM_STRING( &constant_bin[ 815884 ], 36, 0 );
    const_str_digest_b38ced1fe60c6e49953b60674230c84f = UNSTREAM_STRING( &constant_bin[ 797564 ], 16, 0 );
    const_str_digest_f79c650094dda7c6d84545f0a63bf1e9 = UNSTREAM_STRING( &constant_bin[ 815920 ], 9, 0 );
    const_list_str_digest_99dfc913087e0ea1a18c8ad788d0d99b_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_99dfc913087e0ea1a18c8ad788d0d99b_list, 0, const_str_digest_99dfc913087e0ea1a18c8ad788d0d99b ); Py_INCREF( const_str_digest_99dfc913087e0ea1a18c8ad788d0d99b );
    const_str_digest_935a9d3d7dcb4ad3becad3cdc81f7573 = UNSTREAM_STRING( &constant_bin[ 815929 ], 84, 0 );
    const_str_plain_routine_rules = UNSTREAM_STRING( &constant_bin[ 731493 ], 13, 1 );
    const_str_digest_a374575bcf8cb1068e38d978d5cd2122 = UNSTREAM_STRING( &constant_bin[ 803636 ], 38, 0 );
    const_str_digest_87274c2470e5d5c885675977ae6a3172 = UNSTREAM_STRING( &constant_bin[ 816013 ], 26, 0 );
    const_str_digest_f2caafda71f4c478cfe173963231fe37 = UNSTREAM_STRING( &constant_bin[ 816039 ], 33, 0 );
    const_str_plain_sepdict = UNSTREAM_STRING( &constant_bin[ 816072 ], 7, 1 );
    const_str_digest_73242ab7ac60aa6a101ca2a2c63a94f6 = UNSTREAM_STRING( &constant_bin[ 726937 ], 9, 0 );
    const_str_digest_8736fba406c717e343725a08ecb8beaa = UNSTREAM_STRING( &constant_bin[ 816079 ], 20, 0 );
    const_str_digest_b5fc975e73c53e47c4a1ef14fc1f67e1 = UNSTREAM_STRING( &constant_bin[ 816099 ], 13, 0 );
    const_list_str_digest_c4d2c3ebecea3ad233be322292339553_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_c4d2c3ebecea3ad233be322292339553_list, 0, const_str_digest_c4d2c3ebecea3ad233be322292339553 ); Py_INCREF( const_str_digest_c4d2c3ebecea3ad233be322292339553 );
    const_str_digest_9c43fa3f6d4fba5643ad09e3876054c8 = UNSTREAM_STRING( &constant_bin[ 816112 ], 18, 0 );
    const_str_digest_395a7e49a4a935a48f1bd9054ac302b4 = UNSTREAM_STRING( &constant_bin[ 816130 ], 89, 0 );
    const_str_digest_9283391fb6e933c6558013a71a260784 = UNSTREAM_STRING( &constant_bin[ 816219 ], 84, 0 );
    const_str_digest_c199754672a1a8212e0029f4201d48dd = UNSTREAM_STRING( &constant_bin[ 816303 ], 14, 0 );
    const_str_digest_121fa8c0a7f221c891dc8822fac5fdd1 = UNSTREAM_STRING( &constant_bin[ 816317 ], 258, 0 );
    const_str_digest_840172d388b493b7b1f460e6e40cfae7 = UNSTREAM_STRING( &constant_bin[ 816575 ], 964, 0 );
    const_str_digest_78744423de247d23fef27b4f24d61469 = UNSTREAM_STRING( &constant_bin[ 801119 ], 7, 0 );
    const_str_digest_87c2ebbc3b21746550e363bead591b36 = UNSTREAM_STRING( &constant_bin[ 817539 ], 35, 0 );
    const_str_plain_docsignatureshort = UNSTREAM_STRING( &constant_bin[ 798732 ], 17, 1 );
    const_str_digest_c3d060677e97d1e4eb3742c0a4b516c2 = UNSTREAM_STRING( &constant_bin[ 817574 ], 10, 0 );
    const_str_plain_localtime = UNSTREAM_STRING( &constant_bin[ 817584 ], 9, 1 );
    const_str_digest_2999263330b02d2a6d44588a7326f194 = UNSTREAM_STRING( &constant_bin[ 817593 ], 86, 0 );
    const_tuple_str_digest_345c26e0f9bcfb91e65723d2b555931c_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_345c26e0f9bcfb91e65723d2b555931c_tuple, 0, const_str_digest_345c26e0f9bcfb91e65723d2b555931c ); Py_INCREF( const_str_digest_345c26e0f9bcfb91e65723d2b555931c );
    const_str_digest_29e74fe1bb3a1c37df8d2af52c1fbbd4 = UNSTREAM_STRING( &constant_bin[ 817679 ], 46, 0 );
    const_str_plain_closepyobjfrom = UNSTREAM_STRING( &constant_bin[ 798615 ], 14, 1 );
    const_str_plain_setjmpbuf = UNSTREAM_STRING( &constant_bin[ 798220 ], 9, 1 );
    const_str_digest_563ace957d241680d13ba471193cde19 = UNSTREAM_STRING( &constant_bin[ 817725 ], 11, 0 );
    const_str_digest_67aace0cd79c924ba6b33fef89556eb4 = UNSTREAM_STRING( &constant_bin[ 817736 ], 37, 0 );
    const_str_digest_a91d17bf637fe2ed086dd27d03793bab = UNSTREAM_STRING( &constant_bin[ 817773 ], 20, 0 );
    const_str_digest_ebc59643359754d49b2daa361c01a91e = UNSTREAM_STRING( &constant_bin[ 787364 ], 10, 0 );
    const_str_digest_b84e338a3141ef4405d32063e11ea533 = UNSTREAM_STRING( &constant_bin[ 817793 ], 16, 0 );

    constants_created = true;
}

#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_numpy$f2py$rules( void )
{
    // The module may not have been used at all.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_ef916f58685472fc8f7752eb8173bddc;
static PyCodeObject *codeobj_1d0fcfabd30db8cfbc82a5833c9c24d9;
static PyCodeObject *codeobj_b792aaee40e363fc965f523c7097f76d;

static void createModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_f5e74abb58d16359f25a81ce2dbfb679 );
    codeobj_ef916f58685472fc8f7752eb8173bddc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_buildapi, 1347, const_tuple_20ae7db600419ead7934aa64123ca771_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_1d0fcfabd30db8cfbc82a5833c9c24d9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_buildmodule, 1160, const_tuple_88c260f85cd63106b992b7767f2d95e8_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_b792aaee40e363fc965f523c7097f76d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rules, 1, const_tuple_empty, 0, CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
}

// The module function declarations.
static PyObject *MAKE_FUNCTION_function_1_buildmodule_of_numpy$f2py$rules(  );


static PyObject *MAKE_FUNCTION_function_2_buildapi_of_numpy$f2py$rules(  );


// The module function definitions.
static PyObject *impl_function_1_buildmodule_of_numpy$f2py$rules( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_m = python_pars[ 0 ];
    PyObject *par_um = python_pars[ 1 ];
    PyObject *var_ret = NULL;
    PyObject *var_mod_rules = NULL;
    PyObject *var_vrd = NULL;
    PyObject *var_rd = NULL;
    PyObject *var_funcwrappers = NULL;
    PyObject *var_funcwrappers2 = NULL;
    PyObject *var_n = NULL;
    PyObject *var_nb = NULL;
    PyObject *var_bi = NULL;
    PyObject *var_b = NULL;
    PyObject *var_nb_list = NULL;
    PyObject *var_k = NULL;
    PyObject *var_a = NULL;
    PyObject *var_nb1 = NULL;
    PyObject *var_api = NULL;
    PyObject *var_wrap = NULL;
    PyObject *var_ar = NULL;
    PyObject *var_cr = NULL;
    PyObject *var_mr = NULL;
    PyObject *var_u = NULL;
    PyObject *var_needs = NULL;
    PyObject *var_code = NULL;
    PyObject *var_c = NULL;
    PyObject *var_r = NULL;
    PyObject *var_fn = NULL;
    PyObject *var_f = NULL;
    PyObject *var_wn = NULL;
    PyObject *var_lines = NULL;
    PyObject *var_l = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_for_loop_6__for_iterator = NULL;
    PyObject *tmp_for_loop_6__iter_value = NULL;
    PyObject *tmp_for_loop_7__for_iterator = NULL;
    PyObject *tmp_for_loop_7__iter_value = NULL;
    PyObject *tmp_for_loop_8__for_iterator = NULL;
    PyObject *tmp_for_loop_8__iter_value = NULL;
    PyObject *tmp_for_loop_9__for_iterator = NULL;
    PyObject *tmp_for_loop_9__iter_value = NULL;
    PyObject *tmp_for_loop_10__for_iterator = NULL;
    PyObject *tmp_for_loop_10__iter_value = NULL;
    PyObject *tmp_for_loop_11__for_iterator = NULL;
    PyObject *tmp_for_loop_11__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    int tmp_and_left_truth_3;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_left_value_3;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_and_right_value_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_args_element_name_47;
    PyObject *tmp_args_element_name_48;
    PyObject *tmp_args_element_name_49;
    PyObject *tmp_args_element_name_50;
    PyObject *tmp_args_element_name_51;
    PyObject *tmp_args_element_name_52;
    PyObject *tmp_args_element_name_53;
    PyObject *tmp_args_element_name_54;
    PyObject *tmp_args_element_name_55;
    PyObject *tmp_args_element_name_56;
    PyObject *tmp_args_element_name_57;
    PyObject *tmp_args_element_name_58;
    PyObject *tmp_args_element_name_59;
    PyObject *tmp_args_element_name_60;
    PyObject *tmp_args_element_name_61;
    PyObject *tmp_args_element_name_62;
    PyObject *tmp_args_element_name_63;
    PyObject *tmp_args_element_name_64;
    PyObject *tmp_args_element_name_65;
    PyObject *tmp_args_element_name_66;
    PyObject *tmp_args_element_name_67;
    PyObject *tmp_args_element_name_68;
    PyObject *tmp_args_element_name_69;
    PyObject *tmp_args_element_name_70;
    PyObject *tmp_args_element_name_71;
    PyObject *tmp_args_element_name_72;
    PyObject *tmp_args_element_name_73;
    PyObject *tmp_args_element_name_74;
    PyObject *tmp_args_element_name_75;
    PyObject *tmp_args_element_name_76;
    PyObject *tmp_args_element_name_77;
    PyObject *tmp_args_element_name_78;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscribed_2;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subscript_2;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_ass_subvalue_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_called_name_45;
    PyObject *tmp_called_name_46;
    PyObject *tmp_called_name_47;
    PyObject *tmp_called_name_48;
    PyObject *tmp_called_name_49;
    PyObject *tmp_called_name_50;
    PyObject *tmp_called_name_51;
    PyObject *tmp_called_name_52;
    PyObject *tmp_called_name_53;
    PyObject *tmp_called_name_54;
    PyObject *tmp_called_name_55;
    PyObject *tmp_called_name_56;
    PyObject *tmp_called_name_57;
    PyObject *tmp_called_name_58;
    PyObject *tmp_called_name_59;
    PyObject *tmp_called_name_60;
    PyObject *tmp_called_name_61;
    PyObject *tmp_called_name_62;
    PyObject *tmp_called_name_63;
    PyObject *tmp_called_name_64;
    PyObject *tmp_called_name_65;
    PyObject *tmp_called_name_66;
    PyObject *tmp_called_name_67;
    PyObject *tmp_called_name_68;
    PyObject *tmp_called_name_69;
    PyObject *tmp_called_name_70;
    PyObject *tmp_called_name_71;
    PyObject *tmp_called_name_72;
    PyObject *tmp_called_name_73;
    PyObject *tmp_called_name_74;
    PyObject *tmp_called_name_75;
    PyObject *tmp_called_name_76;
    PyObject *tmp_called_name_77;
    PyObject *tmp_called_name_78;
    PyObject *tmp_called_name_79;
    PyObject *tmp_called_name_80;
    PyObject *tmp_called_name_81;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Gt_1;
    int tmp_cmp_GtE_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    int tmp_cmp_NotIn_1;
    int tmp_cmp_NotIn_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_target_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dictset_dict;
    PyObject *tmp_dictset_key;
    PyObject *tmp_dictset_value;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iter_arg_8;
    PyObject *tmp_iter_arg_9;
    PyObject *tmp_iter_arg_10;
    PyObject *tmp_iter_arg_11;
    PyObject *tmp_iter_arg_12;
    PyObject *tmp_iter_arg_13;
    PyObject *tmp_iter_arg_14;
    PyObject *tmp_iter_arg_15;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_iterator_name_3;
    PyObject *tmp_iterator_name_4;
    PyObject *tmp_key_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_left_name_6;
    PyObject *tmp_left_name_7;
    PyObject *tmp_left_name_8;
    PyObject *tmp_left_name_9;
    PyObject *tmp_left_name_10;
    PyObject *tmp_left_name_11;
    PyObject *tmp_left_name_12;
    PyObject *tmp_left_name_13;
    PyObject *tmp_left_name_14;
    PyObject *tmp_left_name_15;
    PyObject *tmp_left_name_16;
    PyObject *tmp_left_name_17;
    PyObject *tmp_left_name_18;
    PyObject *tmp_left_name_19;
    PyObject *tmp_left_name_20;
    PyObject *tmp_left_name_21;
    PyObject *tmp_left_name_22;
    PyObject *tmp_left_name_23;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_list_element_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_next_source_7;
    PyObject *tmp_next_source_8;
    PyObject *tmp_next_source_9;
    PyObject *tmp_next_source_10;
    PyObject *tmp_next_source_11;
    PyObject *tmp_open_filename_1;
    PyObject *tmp_open_filename_2;
    PyObject *tmp_open_filename_3;
    PyObject *tmp_open_filename_4;
    PyObject *tmp_open_filename_5;
    PyObject *tmp_open_mode_1;
    PyObject *tmp_open_mode_2;
    PyObject *tmp_open_mode_3;
    PyObject *tmp_open_mode_4;
    PyObject *tmp_open_mode_5;
    PyObject *tmp_operand_name_1;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_right_name_6;
    PyObject *tmp_right_name_7;
    PyObject *tmp_right_name_8;
    PyObject *tmp_right_name_9;
    PyObject *tmp_right_name_10;
    PyObject *tmp_right_name_11;
    PyObject *tmp_right_name_12;
    PyObject *tmp_right_name_13;
    PyObject *tmp_right_name_14;
    PyObject *tmp_right_name_15;
    PyObject *tmp_right_name_16;
    PyObject *tmp_right_name_17;
    PyObject *tmp_right_name_18;
    PyObject *tmp_right_name_19;
    PyObject *tmp_right_name_20;
    PyObject *tmp_right_name_21;
    PyObject *tmp_right_name_22;
    PyObject *tmp_right_name_23;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_source_name_47;
    PyObject *tmp_source_name_48;
    PyObject *tmp_source_name_49;
    PyObject *tmp_source_name_50;
    PyObject *tmp_source_name_51;
    PyObject *tmp_source_name_52;
    PyObject *tmp_source_name_53;
    PyObject *tmp_source_name_54;
    PyObject *tmp_source_name_55;
    PyObject *tmp_source_name_56;
    PyObject *tmp_source_name_57;
    PyObject *tmp_source_name_58;
    PyObject *tmp_source_name_59;
    PyObject *tmp_source_name_60;
    PyObject *tmp_source_name_61;
    PyObject *tmp_source_name_62;
    PyObject *tmp_source_name_63;
    PyObject *tmp_source_name_64;
    PyObject *tmp_source_name_65;
    PyObject *tmp_source_name_66;
    PyObject *tmp_source_name_67;
    PyObject *tmp_source_name_68;
    PyObject *tmp_source_name_69;
    PyObject *tmp_source_name_70;
    PyObject *tmp_source_name_71;
    PyObject *tmp_source_name_72;
    PyObject *tmp_source_name_73;
    PyObject *tmp_source_name_74;
    PyObject *tmp_source_name_75;
    PyObject *tmp_source_name_76;
    PyObject *tmp_source_name_77;
    PyObject *tmp_source_name_78;
    PyObject *tmp_source_name_79;
    PyObject *tmp_source_name_80;
    PyObject *tmp_source_name_81;
    PyObject *tmp_source_name_82;
    PyObject *tmp_source_name_83;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscribed_name_7;
    PyObject *tmp_subscribed_name_8;
    PyObject *tmp_subscribed_name_9;
    PyObject *tmp_subscribed_name_10;
    PyObject *tmp_subscribed_name_11;
    PyObject *tmp_subscribed_name_12;
    PyObject *tmp_subscribed_name_13;
    PyObject *tmp_subscribed_name_14;
    PyObject *tmp_subscribed_name_15;
    PyObject *tmp_subscribed_name_16;
    PyObject *tmp_subscribed_name_17;
    PyObject *tmp_subscribed_name_18;
    PyObject *tmp_subscribed_name_19;
    PyObject *tmp_subscribed_name_20;
    PyObject *tmp_subscribed_name_21;
    PyObject *tmp_subscribed_name_22;
    PyObject *tmp_subscribed_name_23;
    PyObject *tmp_subscribed_name_24;
    PyObject *tmp_subscribed_name_25;
    PyObject *tmp_subscribed_name_26;
    PyObject *tmp_subscribed_name_27;
    PyObject *tmp_subscribed_name_28;
    PyObject *tmp_subscribed_name_29;
    PyObject *tmp_subscribed_name_30;
    PyObject *tmp_subscribed_name_31;
    PyObject *tmp_subscribed_name_32;
    PyObject *tmp_subscribed_name_33;
    PyObject *tmp_subscribed_name_34;
    PyObject *tmp_subscribed_name_35;
    PyObject *tmp_subscribed_name_36;
    PyObject *tmp_subscribed_name_37;
    PyObject *tmp_subscribed_name_38;
    PyObject *tmp_subscribed_name_39;
    PyObject *tmp_subscribed_name_40;
    PyObject *tmp_subscribed_name_41;
    PyObject *tmp_subscribed_name_42;
    PyObject *tmp_subscribed_name_43;
    PyObject *tmp_subscribed_name_44;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_subscript_name_7;
    PyObject *tmp_subscript_name_8;
    PyObject *tmp_subscript_name_9;
    PyObject *tmp_subscript_name_10;
    PyObject *tmp_subscript_name_11;
    PyObject *tmp_subscript_name_12;
    PyObject *tmp_subscript_name_13;
    PyObject *tmp_subscript_name_14;
    PyObject *tmp_subscript_name_15;
    PyObject *tmp_subscript_name_16;
    PyObject *tmp_subscript_name_17;
    PyObject *tmp_subscript_name_18;
    PyObject *tmp_subscript_name_19;
    PyObject *tmp_subscript_name_20;
    PyObject *tmp_subscript_name_21;
    PyObject *tmp_subscript_name_22;
    PyObject *tmp_subscript_name_23;
    PyObject *tmp_subscript_name_24;
    PyObject *tmp_subscript_name_25;
    PyObject *tmp_subscript_name_26;
    PyObject *tmp_subscript_name_27;
    PyObject *tmp_subscript_name_28;
    PyObject *tmp_subscript_name_29;
    PyObject *tmp_subscript_name_30;
    PyObject *tmp_subscript_name_31;
    PyObject *tmp_subscript_name_32;
    PyObject *tmp_subscript_name_33;
    PyObject *tmp_subscript_name_34;
    PyObject *tmp_subscript_name_35;
    PyObject *tmp_subscript_name_36;
    PyObject *tmp_subscript_name_37;
    PyObject *tmp_subscript_name_38;
    PyObject *tmp_subscript_name_39;
    PyObject *tmp_subscript_name_40;
    PyObject *tmp_subscript_name_41;
    PyObject *tmp_subscript_name_42;
    PyObject *tmp_subscript_name_43;
    PyObject *tmp_subscript_name_44;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    PyObject *tmp_unpack_5;
    PyObject *tmp_unpack_6;
    PyObject *tmp_unpack_7;
    PyObject *tmp_unpack_8;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1d0fcfabd30db8cfbc82a5833c9c24d9, module_numpy$f2py$rules );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "outmess" );
        exception_tb = NULL;

        exception_lineno = 1165;
        goto frame_exception_exit_1;
    }

    tmp_left_name_1 = const_str_digest_1a0597f7af49ea7c71c52aeff981960d;
    tmp_subscribed_name_1 = par_m;

    tmp_subscript_name_1 = const_str_plain_name;
    tmp_right_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1165;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1165;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1165;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1165;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_1 = PyDict_New();
    assert( var_ret == NULL );
    var_ret = tmp_assign_source_1;

    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = PY_SSIZE_T_MAX;
    tmp_slice_source_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_defmod_rules );

    if (unlikely( tmp_slice_source_1 == NULL ))
    {
        tmp_slice_source_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_defmod_rules );
    }

    if ( tmp_slice_source_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "defmod_rules" );
        exception_tb = NULL;

        exception_lineno = 1167;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_2 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1167;
        goto frame_exception_exit_1;
    }
    assert( var_mod_rules == NULL );
    var_mod_rules = tmp_assign_source_2;

    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_capi_maps );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_capi_maps );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "capi_maps" );
        exception_tb = NULL;

        exception_lineno = 1168;
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_modsign2map );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1168;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = par_m;

    frame_function->f_lineno = 1168;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1168;
        goto frame_exception_exit_1;
    }
    assert( var_vrd == NULL );
    var_vrd = tmp_assign_source_3;

    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "dictappend" );
        exception_tb = NULL;

        exception_lineno = 1169;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f2py_version );

    if (unlikely( tmp_dict_value_1 == NULL ))
    {
        tmp_dict_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f2py_version );
    }

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "f2py_version" );
        exception_tb = NULL;

        exception_lineno = 1169;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_f2py_version;
    PyDict_SetItem( tmp_args_element_name_3, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_args_element_name_4 = var_vrd;

    frame_function->f_lineno = 1169;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1169;
        goto frame_exception_exit_1;
    }
    assert( var_rd == NULL );
    var_rd = tmp_assign_source_4;

    tmp_assign_source_5 = PyList_New( 0 );
    assert( var_funcwrappers == NULL );
    var_funcwrappers = tmp_assign_source_5;

    tmp_assign_source_6 = PyList_New( 0 );
    assert( var_funcwrappers2 == NULL );
    var_funcwrappers2 = tmp_assign_source_6;

    tmp_subscribed_name_2 = par_m;

    tmp_subscript_name_2 = const_str_plain_interfaced;
    tmp_iter_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1172;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1172;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_7;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_8 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1172;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    tmp_assign_source_9 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_n;
        var_n = tmp_assign_source_9;
        Py_INCREF( var_n );
        Py_XDECREF( old );
    }

    tmp_assign_source_10 = Py_None;
    {
        PyObject *old = var_nb;
        var_nb = tmp_assign_source_10;
        Py_INCREF( var_nb );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_3 = par_m;

    tmp_subscript_name_3 = const_str_plain_body;
    tmp_iter_arg_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1174;
        goto try_except_handler_2;
    }
    tmp_assign_source_11 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1174;
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_for_loop_2__for_iterator;
        tmp_for_loop_2__for_iterator = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_12 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_12 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1174;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_12;
        Py_XDECREF( old );
    }

    tmp_assign_source_13 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_bi;
        var_bi = tmp_assign_source_13;
        Py_INCREF( var_bi );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_4 = var_bi;

    tmp_subscript_name_4 = const_str_plain_block;
    tmp_compare_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1175;
        goto try_except_handler_3;
    }
    tmp_compare_right_1 = const_str_plain_interface;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 1175;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_errmess );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_errmess );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "errmess" );
        exception_tb = NULL;

        exception_lineno = 1176;
        goto try_except_handler_3;
    }

    frame_function->f_lineno = 1176;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, &PyTuple_GET_ITEM( const_tuple_str_digest_14e46075417ae2136dc3bcb6488889ce_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1176;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_unused );
    goto loop_start_2;
    branch_no_1:;
    tmp_subscribed_name_5 = var_bi;

    tmp_subscript_name_5 = const_str_plain_body;
    tmp_iter_arg_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1178;
        goto try_except_handler_3;
    }
    tmp_assign_source_14 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1178;
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_for_loop_3__for_iterator;
        tmp_for_loop_3__for_iterator = tmp_assign_source_14;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_15 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_15 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1178;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_15;
        Py_XDECREF( old );
    }

    tmp_assign_source_16 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_b;
        var_b = tmp_assign_source_16;
        Py_INCREF( var_b );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_6 = var_b;

    tmp_subscript_name_6 = const_str_plain_name;
    tmp_compare_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1179;
        goto try_except_handler_4;
    }
    tmp_compare_right_2 = var_n;

    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        exception_lineno = 1179;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_17 = var_b;

    {
        PyObject *old = var_nb;
        var_nb = tmp_assign_source_17;
        Py_INCREF( var_nb );
        Py_XDECREF( old );
    }

    goto loop_end_3;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1178;
        goto try_except_handler_4;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1174;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_cond_value_1 = var_nb;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "nb" );
        exception_tb = NULL;

        exception_lineno = 1183;
        goto try_except_handler_2;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1183;
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_3;
    }
    else
    {
        goto branch_yes_3;
    }
    branch_yes_3:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_errmess );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_errmess );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "errmess" );
        exception_tb = NULL;

        exception_lineno = 1184;
        goto try_except_handler_2;
    }

    tmp_left_name_2 = const_str_digest_71436a61366dee7252a8788654eae266;
    tmp_right_name_2 = var_n;

    tmp_args_element_name_5 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1185;
        goto try_except_handler_2;
    }
    frame_function->f_lineno = 1185;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1185;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto loop_start_1;
    branch_no_3:;
    tmp_assign_source_18 = PyList_New( 1 );
    tmp_list_element_1 = var_nb;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_18 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "nb" );
        exception_tb = NULL;

        exception_lineno = 1187;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_18, 0, tmp_list_element_1 );
    {
        PyObject *old = var_nb_list;
        var_nb_list = tmp_assign_source_18;
        Py_XDECREF( old );
    }

    tmp_compare_left_3 = const_str_plain_entry;
    tmp_compare_right_3 = var_nb;

    if ( tmp_compare_right_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "nb" );
        exception_tb = NULL;

        exception_lineno = 1188;
        goto try_except_handler_2;
    }

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_subscribed_name_7 = var_nb;

    if ( tmp_subscribed_name_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "nb" );
        exception_tb = NULL;

        exception_lineno = 1189;
        goto try_except_handler_2;
    }

    tmp_subscript_name_7 = const_str_plain_entry;
    tmp_source_name_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1189;
        goto try_except_handler_2;
    }
    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_items );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1189;
        goto try_except_handler_2;
    }
    frame_function->f_lineno = 1189;
    tmp_iter_arg_4 = CALL_FUNCTION_NO_ARGS( tmp_called_name_6 );
    Py_DECREF( tmp_called_name_6 );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1189;
        goto try_except_handler_2;
    }
    tmp_assign_source_19 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1189;
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_for_loop_4__for_iterator;
        tmp_for_loop_4__for_iterator = tmp_assign_source_19;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_20 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_20 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1189;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_20;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_5 = tmp_for_loop_4__iter_value;

    tmp_assign_source_21 = MAKE_ITERATOR( tmp_iter_arg_5 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1189;
        goto try_except_handler_6;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_21;
        Py_XDECREF( old );
    }

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_22 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1189;
        goto try_except_handler_6;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_22;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_23 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_23 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1189;
        goto try_except_handler_6;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_23;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_6;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_6;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_5;
    // End of try:
    try_end_3:;
    tmp_assign_source_24 = tmp_tuple_unpack_1__element_1;

    {
        PyObject *old = var_k;
        var_k = tmp_assign_source_24;
        Py_INCREF( var_k );
        Py_XDECREF( old );
    }

    tmp_assign_source_25 = tmp_tuple_unpack_1__element_2;

    {
        PyObject *old = var_a;
        var_a = tmp_assign_source_25;
        Py_INCREF( var_a );
        Py_XDECREF( old );
    }

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__element_1 );
    Py_DECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__element_2 );
    Py_DECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_copy );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_copy );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "copy" );
        exception_tb = NULL;

        exception_lineno = 1190;
        goto try_except_handler_5;
    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_deepcopy );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1190;
        goto try_except_handler_5;
    }
    tmp_args_element_name_6 = var_nb;

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_7 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "nb" );
        exception_tb = NULL;

        exception_lineno = 1190;
        goto try_except_handler_5;
    }

    frame_function->f_lineno = 1190;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1190;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_nb1;
        var_nb1 = tmp_assign_source_26;
        Py_XDECREF( old );
    }

    tmp_delsubscr_target_1 = var_nb1;

    tmp_delsubscr_subscript_1 = const_str_plain_entry;
    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1191;
        goto try_except_handler_5;
    }
    tmp_ass_subvalue_1 = var_k;

    tmp_ass_subscribed_1 = var_nb1;

    tmp_ass_subscript_1 = const_str_plain_name;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1192;
        goto try_except_handler_5;
    }
    tmp_ass_subvalue_2 = var_a;

    tmp_ass_subscribed_2 = var_nb1;

    tmp_ass_subscript_2 = const_str_plain_args;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1193;
        goto try_except_handler_5;
    }
    tmp_source_name_4 = var_nb_list;

    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_append );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1194;
        goto try_except_handler_5;
    }
    tmp_args_element_name_7 = var_nb1;

    frame_function->f_lineno = 1194;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1194;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1189;
        goto try_except_handler_5;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_2;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    branch_no_4:;
    tmp_iter_arg_6 = var_nb_list;

    tmp_assign_source_27 = MAKE_ITERATOR( tmp_iter_arg_6 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1195;
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_for_loop_5__for_iterator;
        tmp_for_loop_5__for_iterator = tmp_assign_source_27;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    tmp_assign_source_28 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_28 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1195;
            goto try_except_handler_7;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_28;
        Py_XDECREF( old );
    }

    tmp_assign_source_29 = tmp_for_loop_5__iter_value;

    {
        PyObject *old = var_nb;
        var_nb = tmp_assign_source_29;
        Py_INCREF( var_nb );
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_called_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_buildapi );

    if (unlikely( tmp_called_name_9 == NULL ))
    {
        tmp_called_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_buildapi );
    }

    if ( tmp_called_name_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "buildapi" );
        exception_tb = NULL;

        exception_lineno = 1196;
        goto try_except_handler_8;
    }

    tmp_args_element_name_8 = var_nb;

    frame_function->f_lineno = 1196;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_iter_arg_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
    }

    if ( tmp_iter_arg_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1196;
        goto try_except_handler_8;
    }
    tmp_assign_source_30 = MAKE_ITERATOR( tmp_iter_arg_7 );
    Py_DECREF( tmp_iter_arg_7 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1196;
        goto try_except_handler_8;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__source_iter;
        tmp_tuple_unpack_2__source_iter = tmp_assign_source_30;
        Py_XDECREF( old );
    }

    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_31 = UNPACK_NEXT( tmp_unpack_3, 0 );
    if ( tmp_assign_source_31 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1196;
        goto try_except_handler_8;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_1;
        tmp_tuple_unpack_2__element_1 = tmp_assign_source_31;
        Py_XDECREF( old );
    }

    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_32 = UNPACK_NEXT( tmp_unpack_4, 1 );
    if ( tmp_assign_source_32 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1196;
        goto try_except_handler_8;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_2;
        tmp_tuple_unpack_2__element_2 = tmp_assign_source_32;
        Py_XDECREF( old );
    }

    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_8;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_8;
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_7;
    // End of try:
    try_end_5:;
    tmp_assign_source_33 = tmp_tuple_unpack_2__element_1;

    {
        PyObject *old = var_api;
        var_api = tmp_assign_source_33;
        Py_INCREF( var_api );
        Py_XDECREF( old );
    }

    tmp_assign_source_34 = tmp_tuple_unpack_2__element_2;

    {
        PyObject *old = var_wrap;
        var_wrap = tmp_assign_source_34;
        Py_INCREF( var_wrap );
        Py_XDECREF( old );
    }

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__element_1 );
    Py_DECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__element_2 );
    Py_DECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    tmp_cond_value_2 = var_wrap;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1197;
        goto try_except_handler_7;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_called_name_10 == NULL ))
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_called_name_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 1198;
        goto try_except_handler_7;
    }

    tmp_args_element_name_9 = var_nb;

    frame_function->f_lineno = 1198;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_cond_value_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
    }

    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1198;
        goto try_except_handler_7;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 1198;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_source_name_5 = var_funcwrappers2;

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_append );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1199;
        goto try_except_handler_7;
    }
    tmp_args_element_name_10 = var_wrap;

    frame_function->f_lineno = 1199;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_called_name_11 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1199;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_6;
    branch_no_6:;
    tmp_source_name_6 = var_funcwrappers;

    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_append );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1201;
        goto try_except_handler_7;
    }
    tmp_args_element_name_11 = var_wrap;

    frame_function->f_lineno = 1201;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
    }

    Py_DECREF( tmp_called_name_12 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1201;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_unused );
    branch_end_6:;
    branch_no_5:;
    tmp_called_name_13 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_name_13 == NULL ))
    {
        tmp_called_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_name_13 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "applyrules" );
        exception_tb = NULL;

        exception_lineno = 1202;
        goto try_except_handler_7;
    }

    tmp_args_element_name_12 = var_api;

    tmp_args_element_name_13 = var_vrd;

    frame_function->f_lineno = 1202;
    {
        PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_13 };
        tmp_assign_source_35 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_13, call_args );
    }

    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1202;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_ar;
        var_ar = tmp_assign_source_35;
        Py_XDECREF( old );
    }

    tmp_called_name_14 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_name_14 == NULL ))
    {
        tmp_called_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_name_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "dictappend" );
        exception_tb = NULL;

        exception_lineno = 1203;
        goto try_except_handler_7;
    }

    tmp_args_element_name_14 = var_rd;

    if ( tmp_args_element_name_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1203;
        goto try_except_handler_7;
    }

    tmp_args_element_name_15 = var_ar;

    frame_function->f_lineno = 1203;
    {
        PyObject *call_args[] = { tmp_args_element_name_14, tmp_args_element_name_15 };
        tmp_assign_source_36 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_14, call_args );
    }

    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1203;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rd;
        var_rd = tmp_assign_source_36;
        Py_XDECREF( old );
    }

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1195;
        goto try_except_handler_7;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_2;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1172;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Tried code:
    tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_common_rules );

    if (unlikely( tmp_source_name_7 == NULL ))
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_common_rules );
    }

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "common_rules" );
        exception_tb = NULL;

        exception_lineno = 1206;
        goto try_except_handler_9;
    }

    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_buildhooks );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1206;
        goto try_except_handler_9;
    }
    tmp_args_element_name_16 = par_m;

    frame_function->f_lineno = 1206;
    {
        PyObject *call_args[] = { tmp_args_element_name_16 };
        tmp_iter_arg_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
    }

    Py_DECREF( tmp_called_name_15 );
    if ( tmp_iter_arg_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1206;
        goto try_except_handler_9;
    }
    tmp_assign_source_37 = MAKE_ITERATOR( tmp_iter_arg_8 );
    Py_DECREF( tmp_iter_arg_8 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1206;
        goto try_except_handler_9;
    }
    assert( tmp_tuple_unpack_3__source_iter == NULL );
    tmp_tuple_unpack_3__source_iter = tmp_assign_source_37;

    tmp_unpack_5 = tmp_tuple_unpack_3__source_iter;

    tmp_assign_source_38 = UNPACK_NEXT( tmp_unpack_5, 0 );
    if ( tmp_assign_source_38 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1206;
        goto try_except_handler_9;
    }
    assert( tmp_tuple_unpack_3__element_1 == NULL );
    tmp_tuple_unpack_3__element_1 = tmp_assign_source_38;

    tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;

    tmp_assign_source_39 = UNPACK_NEXT( tmp_unpack_6, 1 );
    if ( tmp_assign_source_39 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1206;
        goto try_except_handler_9;
    }
    assert( tmp_tuple_unpack_3__element_2 == NULL );
    tmp_tuple_unpack_3__element_2 = tmp_assign_source_39;

    tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_9;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_9;
    }
    goto try_end_8;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_3__source_iter );
    tmp_tuple_unpack_3__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_1 );
    tmp_tuple_unpack_3__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_2 );
    tmp_tuple_unpack_3__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    tmp_assign_source_40 = tmp_tuple_unpack_3__element_1;

    assert( var_cr == NULL );
    Py_INCREF( tmp_assign_source_40 );
    var_cr = tmp_assign_source_40;

    tmp_assign_source_41 = tmp_tuple_unpack_3__element_2;

    {
        PyObject *old = var_wrap;
        var_wrap = tmp_assign_source_41;
        Py_INCREF( var_wrap );
        Py_XDECREF( old );
    }

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
    Py_DECREF( tmp_tuple_unpack_3__source_iter );
    tmp_tuple_unpack_3__source_iter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__element_1 );
    Py_DECREF( tmp_tuple_unpack_3__element_1 );
    tmp_tuple_unpack_3__element_1 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__element_2 );
    Py_DECREF( tmp_tuple_unpack_3__element_2 );
    tmp_tuple_unpack_3__element_2 = NULL;

    tmp_cond_value_4 = var_wrap;

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1207;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_source_name_8 = var_funcwrappers;

    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_append );
    if ( tmp_called_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1208;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_17 = var_wrap;

    frame_function->f_lineno = 1208;
    {
        PyObject *call_args[] = { tmp_args_element_name_17 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, call_args );
    }

    Py_DECREF( tmp_called_name_16 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1208;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_7:;
    tmp_called_name_17 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_name_17 == NULL ))
    {
        tmp_called_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_name_17 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "applyrules" );
        exception_tb = NULL;

        exception_lineno = 1209;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_18 = var_cr;

    tmp_args_element_name_19 = var_vrd;

    frame_function->f_lineno = 1209;
    {
        PyObject *call_args[] = { tmp_args_element_name_18, tmp_args_element_name_19 };
        tmp_assign_source_42 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_17, call_args );
    }

    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1209;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_ar;
        var_ar = tmp_assign_source_42;
        Py_XDECREF( old );
    }

    tmp_called_name_18 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_name_18 == NULL ))
    {
        tmp_called_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_name_18 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "dictappend" );
        exception_tb = NULL;

        exception_lineno = 1210;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_20 = var_rd;

    if ( tmp_args_element_name_20 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1210;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_21 = var_ar;

    frame_function->f_lineno = 1210;
    {
        PyObject *call_args[] = { tmp_args_element_name_20, tmp_args_element_name_21 };
        tmp_assign_source_43 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_18, call_args );
    }

    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1210;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_rd;
        var_rd = tmp_assign_source_43;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f90mod_rules );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f90mod_rules );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "f90mod_rules" );
        exception_tb = NULL;

        exception_lineno = 1213;
        goto try_except_handler_10;
    }

    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_buildhooks );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1213;
        goto try_except_handler_10;
    }
    tmp_args_element_name_22 = par_m;

    frame_function->f_lineno = 1213;
    {
        PyObject *call_args[] = { tmp_args_element_name_22 };
        tmp_iter_arg_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, call_args );
    }

    Py_DECREF( tmp_called_name_19 );
    if ( tmp_iter_arg_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1213;
        goto try_except_handler_10;
    }
    tmp_assign_source_44 = MAKE_ITERATOR( tmp_iter_arg_9 );
    Py_DECREF( tmp_iter_arg_9 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1213;
        goto try_except_handler_10;
    }
    assert( tmp_tuple_unpack_4__source_iter == NULL );
    tmp_tuple_unpack_4__source_iter = tmp_assign_source_44;

    tmp_unpack_7 = tmp_tuple_unpack_4__source_iter;

    tmp_assign_source_45 = UNPACK_NEXT( tmp_unpack_7, 0 );
    if ( tmp_assign_source_45 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1213;
        goto try_except_handler_10;
    }
    assert( tmp_tuple_unpack_4__element_1 == NULL );
    tmp_tuple_unpack_4__element_1 = tmp_assign_source_45;

    tmp_unpack_8 = tmp_tuple_unpack_4__source_iter;

    tmp_assign_source_46 = UNPACK_NEXT( tmp_unpack_8, 1 );
    if ( tmp_assign_source_46 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1213;
        goto try_except_handler_10;
    }
    assert( tmp_tuple_unpack_4__element_2 == NULL );
    tmp_tuple_unpack_4__element_2 = tmp_assign_source_46;

    tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_4 ); assert( HAS_ITERNEXT( tmp_iterator_name_4 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_4 )->tp_iternext)( tmp_iterator_name_4 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_10;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_10;
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_4__source_iter );
    tmp_tuple_unpack_4__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_4__element_1 );
    tmp_tuple_unpack_4__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_4__element_2 );
    tmp_tuple_unpack_4__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    tmp_assign_source_47 = tmp_tuple_unpack_4__element_1;

    assert( var_mr == NULL );
    Py_INCREF( tmp_assign_source_47 );
    var_mr = tmp_assign_source_47;

    tmp_assign_source_48 = tmp_tuple_unpack_4__element_2;

    {
        PyObject *old = var_wrap;
        assert( old != NULL );
        var_wrap = tmp_assign_source_48;
        Py_INCREF( var_wrap );
        Py_DECREF( old );
    }

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
    Py_DECREF( tmp_tuple_unpack_4__source_iter );
    tmp_tuple_unpack_4__source_iter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__element_1 );
    Py_DECREF( tmp_tuple_unpack_4__element_1 );
    tmp_tuple_unpack_4__element_1 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__element_2 );
    Py_DECREF( tmp_tuple_unpack_4__element_2 );
    tmp_tuple_unpack_4__element_2 = NULL;

    tmp_cond_value_5 = var_wrap;

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1214;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_source_name_10 = var_funcwrappers2;

    tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_append );
    if ( tmp_called_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1215;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_23 = var_wrap;

    frame_function->f_lineno = 1215;
    {
        PyObject *call_args[] = { tmp_args_element_name_23 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_20, call_args );
    }

    Py_DECREF( tmp_called_name_20 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1215;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_8:;
    tmp_called_name_21 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_name_21 == NULL ))
    {
        tmp_called_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_name_21 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "applyrules" );
        exception_tb = NULL;

        exception_lineno = 1216;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_24 = var_mr;

    tmp_args_element_name_25 = var_vrd;

    frame_function->f_lineno = 1216;
    {
        PyObject *call_args[] = { tmp_args_element_name_24, tmp_args_element_name_25 };
        tmp_assign_source_49 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_21, call_args );
    }

    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1216;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_ar;
        assert( old != NULL );
        var_ar = tmp_assign_source_49;
        Py_DECREF( old );
    }

    tmp_called_name_22 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_name_22 == NULL ))
    {
        tmp_called_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_name_22 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "dictappend" );
        exception_tb = NULL;

        exception_lineno = 1217;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_26 = var_rd;

    tmp_args_element_name_27 = var_ar;

    frame_function->f_lineno = 1217;
    {
        PyObject *call_args[] = { tmp_args_element_name_26, tmp_args_element_name_27 };
        tmp_assign_source_50 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_22, call_args );
    }

    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1217;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_rd;
        assert( old != NULL );
        var_rd = tmp_assign_source_50;
        Py_DECREF( old );
    }

    tmp_iter_arg_10 = par_um;

    tmp_assign_source_51 = MAKE_ITERATOR( tmp_iter_arg_10 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1219;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_6__for_iterator == NULL );
    tmp_for_loop_6__for_iterator = tmp_assign_source_51;

    // Tried code:
    loop_start_6:;
    tmp_next_source_6 = tmp_for_loop_6__for_iterator;

    tmp_assign_source_52 = ITERATOR_NEXT( tmp_next_source_6 );
    if ( tmp_assign_source_52 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_6;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1219;
            goto try_except_handler_11;
        }
    }

    {
        PyObject *old = tmp_for_loop_6__iter_value;
        tmp_for_loop_6__iter_value = tmp_assign_source_52;
        Py_XDECREF( old );
    }

    tmp_assign_source_53 = tmp_for_loop_6__iter_value;

    {
        PyObject *old = var_u;
        var_u = tmp_assign_source_53;
        Py_INCREF( var_u );
        Py_XDECREF( old );
    }

    tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_use_rules );

    if (unlikely( tmp_source_name_11 == NULL ))
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_use_rules );
    }

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "use_rules" );
        exception_tb = NULL;

        exception_lineno = 1220;
        goto try_except_handler_11;
    }

    tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_buildusevars );
    if ( tmp_called_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1220;
        goto try_except_handler_11;
    }
    tmp_args_element_name_28 = var_u;

    tmp_subscribed_name_9 = par_m;

    tmp_subscript_name_8 = const_str_plain_use;
    tmp_subscribed_name_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_8 );
    if ( tmp_subscribed_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_23 );

        exception_lineno = 1220;
        goto try_except_handler_11;
    }
    tmp_subscribed_name_10 = var_u;

    tmp_subscript_name_10 = const_str_plain_name;
    tmp_subscript_name_9 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_10, tmp_subscript_name_10 );
    if ( tmp_subscript_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_subscribed_name_8 );

        exception_lineno = 1220;
        goto try_except_handler_11;
    }
    tmp_args_element_name_29 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_9 );
    Py_DECREF( tmp_subscribed_name_8 );
    Py_DECREF( tmp_subscript_name_9 );
    if ( tmp_args_element_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_23 );

        exception_lineno = 1220;
        goto try_except_handler_11;
    }
    frame_function->f_lineno = 1220;
    {
        PyObject *call_args[] = { tmp_args_element_name_28, tmp_args_element_name_29 };
        tmp_assign_source_54 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_23, call_args );
    }

    Py_DECREF( tmp_called_name_23 );
    Py_DECREF( tmp_args_element_name_29 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1220;
        goto try_except_handler_11;
    }
    {
        PyObject *old = var_ar;
        var_ar = tmp_assign_source_54;
        Py_XDECREF( old );
    }

    tmp_called_name_24 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_name_24 == NULL ))
    {
        tmp_called_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_name_24 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "dictappend" );
        exception_tb = NULL;

        exception_lineno = 1221;
        goto try_except_handler_11;
    }

    tmp_args_element_name_30 = var_rd;

    if ( tmp_args_element_name_30 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1221;
        goto try_except_handler_11;
    }

    tmp_args_element_name_31 = var_ar;

    frame_function->f_lineno = 1221;
    {
        PyObject *call_args[] = { tmp_args_element_name_30, tmp_args_element_name_31 };
        tmp_assign_source_55 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_24, call_args );
    }

    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1221;
        goto try_except_handler_11;
    }
    {
        PyObject *old = var_rd;
        var_rd = tmp_assign_source_55;
        Py_XDECREF( old );
    }

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1219;
        goto try_except_handler_11;
    }
    goto loop_start_6;
    loop_end_6:;
    goto try_end_10;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_12 == NULL ))
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1223;
        goto frame_exception_exit_1;
    }

    tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_get_needs );
    if ( tmp_called_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1223;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1223;
    tmp_assign_source_56 = CALL_FUNCTION_NO_ARGS( tmp_called_name_25 );
    Py_DECREF( tmp_called_name_25 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1223;
        goto frame_exception_exit_1;
    }
    assert( var_needs == NULL );
    var_needs = tmp_assign_source_56;

    tmp_assign_source_57 = PyDict_New();
    assert( var_code == NULL );
    var_code = tmp_assign_source_57;

    tmp_source_name_13 = var_needs;

    tmp_called_name_26 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_keys );
    if ( tmp_called_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1225;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1225;
    tmp_iter_arg_11 = CALL_FUNCTION_NO_ARGS( tmp_called_name_26 );
    Py_DECREF( tmp_called_name_26 );
    if ( tmp_iter_arg_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1225;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_58 = MAKE_ITERATOR( tmp_iter_arg_11 );
    Py_DECREF( tmp_iter_arg_11 );
    if ( tmp_assign_source_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1225;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_7__for_iterator == NULL );
    tmp_for_loop_7__for_iterator = tmp_assign_source_58;

    // Tried code:
    loop_start_7:;
    tmp_next_source_7 = tmp_for_loop_7__for_iterator;

    tmp_assign_source_59 = ITERATOR_NEXT( tmp_next_source_7 );
    if ( tmp_assign_source_59 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_7;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1225;
            goto try_except_handler_12;
        }
    }

    {
        PyObject *old = tmp_for_loop_7__iter_value;
        tmp_for_loop_7__iter_value = tmp_assign_source_59;
        Py_XDECREF( old );
    }

    tmp_assign_source_60 = tmp_for_loop_7__iter_value;

    {
        PyObject *old = var_n;
        var_n = tmp_assign_source_60;
        Py_INCREF( var_n );
        Py_XDECREF( old );
    }

    tmp_dictset_value = PyList_New( 0 );
    tmp_dictset_dict = var_code;

    tmp_dictset_key = var_n;

    tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
    Py_DECREF( tmp_dictset_value );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1226;
        goto try_except_handler_12;
    }
    tmp_subscribed_name_11 = var_needs;

    tmp_subscript_name_11 = var_n;

    tmp_iter_arg_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_11, tmp_subscript_name_11 );
    if ( tmp_iter_arg_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1227;
        goto try_except_handler_12;
    }
    tmp_assign_source_61 = MAKE_ITERATOR( tmp_iter_arg_12 );
    Py_DECREF( tmp_iter_arg_12 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1227;
        goto try_except_handler_12;
    }
    {
        PyObject *old = tmp_for_loop_8__for_iterator;
        tmp_for_loop_8__for_iterator = tmp_assign_source_61;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_8:;
    tmp_next_source_8 = tmp_for_loop_8__for_iterator;

    tmp_assign_source_62 = ITERATOR_NEXT( tmp_next_source_8 );
    if ( tmp_assign_source_62 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_8;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1227;
            goto try_except_handler_13;
        }
    }

    {
        PyObject *old = tmp_for_loop_8__iter_value;
        tmp_for_loop_8__iter_value = tmp_assign_source_62;
        Py_XDECREF( old );
    }

    tmp_assign_source_63 = tmp_for_loop_8__iter_value;

    {
        PyObject *old = var_k;
        var_k = tmp_assign_source_63;
        Py_INCREF( var_k );
        Py_XDECREF( old );
    }

    tmp_assign_source_64 = const_str_empty;
    {
        PyObject *old = var_c;
        var_c = tmp_assign_source_64;
        Py_INCREF( var_c );
        Py_XDECREF( old );
    }

    tmp_compare_left_4 = var_k;

    tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_14 == NULL ))
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1229;
        goto try_except_handler_13;
    }

    tmp_compare_right_4 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_includes0 );
    if ( tmp_compare_right_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1229;
        goto try_except_handler_13;
    }
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_2 == -1) );
    Py_DECREF( tmp_compare_right_4 );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_15 == NULL ))
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_15 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1230;
        goto try_except_handler_13;
    }

    tmp_subscribed_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_includes0 );
    if ( tmp_subscribed_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1230;
        goto try_except_handler_13;
    }
    tmp_subscript_name_12 = var_k;

    tmp_assign_source_65 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_12, tmp_subscript_name_12 );
    Py_DECREF( tmp_subscribed_name_12 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1230;
        goto try_except_handler_13;
    }
    {
        PyObject *old = var_c;
        assert( old != NULL );
        var_c = tmp_assign_source_65;
        Py_DECREF( old );
    }

    goto branch_end_9;
    branch_no_9:;
    tmp_compare_left_5 = var_k;

    tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_16 == NULL ))
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_16 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1231;
        goto try_except_handler_13;
    }

    tmp_compare_right_5 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_includes );
    if ( tmp_compare_right_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1231;
        goto try_except_handler_13;
    }
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_3 == -1) );
    Py_DECREF( tmp_compare_right_5 );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_17 == NULL ))
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_17 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1232;
        goto try_except_handler_13;
    }

    tmp_subscribed_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_includes );
    if ( tmp_subscribed_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1232;
        goto try_except_handler_13;
    }
    tmp_subscript_name_13 = var_k;

    tmp_assign_source_66 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_13, tmp_subscript_name_13 );
    Py_DECREF( tmp_subscribed_name_13 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1232;
        goto try_except_handler_13;
    }
    {
        PyObject *old = var_c;
        assert( old != NULL );
        var_c = tmp_assign_source_66;
        Py_DECREF( old );
    }

    goto branch_end_10;
    branch_no_10:;
    tmp_compare_left_6 = var_k;

    tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_18 == NULL ))
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_18 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1233;
        goto try_except_handler_13;
    }

    tmp_compare_right_6 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_userincludes );
    if ( tmp_compare_right_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1233;
        goto try_except_handler_13;
    }
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_In_4 == -1) );
    Py_DECREF( tmp_compare_right_6 );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_19 == NULL ))
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_19 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1234;
        goto try_except_handler_13;
    }

    tmp_subscribed_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_userincludes );
    if ( tmp_subscribed_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1234;
        goto try_except_handler_13;
    }
    tmp_subscript_name_14 = var_k;

    tmp_assign_source_67 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_14, tmp_subscript_name_14 );
    Py_DECREF( tmp_subscribed_name_14 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1234;
        goto try_except_handler_13;
    }
    {
        PyObject *old = var_c;
        assert( old != NULL );
        var_c = tmp_assign_source_67;
        Py_DECREF( old );
    }

    goto branch_end_11;
    branch_no_11:;
    tmp_compare_left_7 = var_k;

    tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_20 == NULL ))
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_20 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1235;
        goto try_except_handler_13;
    }

    tmp_compare_right_7 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_typedefs );
    if ( tmp_compare_right_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1235;
        goto try_except_handler_13;
    }
    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    assert( !(tmp_cmp_In_5 == -1) );
    Py_DECREF( tmp_compare_right_7 );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_21 == NULL ))
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_21 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1236;
        goto try_except_handler_13;
    }

    tmp_subscribed_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_typedefs );
    if ( tmp_subscribed_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1236;
        goto try_except_handler_13;
    }
    tmp_subscript_name_15 = var_k;

    tmp_assign_source_68 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_15, tmp_subscript_name_15 );
    Py_DECREF( tmp_subscribed_name_15 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1236;
        goto try_except_handler_13;
    }
    {
        PyObject *old = var_c;
        assert( old != NULL );
        var_c = tmp_assign_source_68;
        Py_DECREF( old );
    }

    goto branch_end_12;
    branch_no_12:;
    tmp_compare_left_8 = var_k;

    tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_22 == NULL ))
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_22 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1237;
        goto try_except_handler_13;
    }

    tmp_compare_right_8 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_typedefs_generated );
    if ( tmp_compare_right_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1237;
        goto try_except_handler_13;
    }
    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_6 == -1) );
    Py_DECREF( tmp_compare_right_8 );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_23 == NULL ))
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_23 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1238;
        goto try_except_handler_13;
    }

    tmp_subscribed_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_typedefs_generated );
    if ( tmp_subscribed_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1238;
        goto try_except_handler_13;
    }
    tmp_subscript_name_16 = var_k;

    tmp_assign_source_69 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_16, tmp_subscript_name_16 );
    Py_DECREF( tmp_subscribed_name_16 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1238;
        goto try_except_handler_13;
    }
    {
        PyObject *old = var_c;
        assert( old != NULL );
        var_c = tmp_assign_source_69;
        Py_DECREF( old );
    }

    goto branch_end_13;
    branch_no_13:;
    tmp_compare_left_9 = var_k;

    tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_24 == NULL ))
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_24 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1239;
        goto try_except_handler_13;
    }

    tmp_compare_right_9 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_cppmacros );
    if ( tmp_compare_right_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1239;
        goto try_except_handler_13;
    }
    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_In_7 == -1) );
    Py_DECREF( tmp_compare_right_9 );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_source_name_25 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_25 == NULL ))
    {
        tmp_source_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_25 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1240;
        goto try_except_handler_13;
    }

    tmp_subscribed_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_cppmacros );
    if ( tmp_subscribed_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1240;
        goto try_except_handler_13;
    }
    tmp_subscript_name_17 = var_k;

    tmp_assign_source_70 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_17, tmp_subscript_name_17 );
    Py_DECREF( tmp_subscribed_name_17 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1240;
        goto try_except_handler_13;
    }
    {
        PyObject *old = var_c;
        assert( old != NULL );
        var_c = tmp_assign_source_70;
        Py_DECREF( old );
    }

    goto branch_end_14;
    branch_no_14:;
    tmp_compare_left_10 = var_k;

    tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_26 == NULL ))
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_26 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1241;
        goto try_except_handler_13;
    }

    tmp_compare_right_10 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_cfuncs );
    if ( tmp_compare_right_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1241;
        goto try_except_handler_13;
    }
    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    assert( !(tmp_cmp_In_8 == -1) );
    Py_DECREF( tmp_compare_right_10 );
    if ( tmp_cmp_In_8 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_source_name_27 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_27 == NULL ))
    {
        tmp_source_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_27 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1242;
        goto try_except_handler_13;
    }

    tmp_subscribed_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_cfuncs );
    if ( tmp_subscribed_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1242;
        goto try_except_handler_13;
    }
    tmp_subscript_name_18 = var_k;

    tmp_assign_source_71 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_18, tmp_subscript_name_18 );
    Py_DECREF( tmp_subscribed_name_18 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1242;
        goto try_except_handler_13;
    }
    {
        PyObject *old = var_c;
        assert( old != NULL );
        var_c = tmp_assign_source_71;
        Py_DECREF( old );
    }

    goto branch_end_15;
    branch_no_15:;
    tmp_compare_left_11 = var_k;

    tmp_source_name_28 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_28 == NULL ))
    {
        tmp_source_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_28 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1243;
        goto try_except_handler_13;
    }

    tmp_compare_right_11 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_callbacks );
    if ( tmp_compare_right_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1243;
        goto try_except_handler_13;
    }
    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_9 == -1) );
    Py_DECREF( tmp_compare_right_11 );
    if ( tmp_cmp_In_9 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_source_name_29 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_29 == NULL ))
    {
        tmp_source_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_29 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1244;
        goto try_except_handler_13;
    }

    tmp_subscribed_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_callbacks );
    if ( tmp_subscribed_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1244;
        goto try_except_handler_13;
    }
    tmp_subscript_name_19 = var_k;

    tmp_assign_source_72 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_19, tmp_subscript_name_19 );
    Py_DECREF( tmp_subscribed_name_19 );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1244;
        goto try_except_handler_13;
    }
    {
        PyObject *old = var_c;
        assert( old != NULL );
        var_c = tmp_assign_source_72;
        Py_DECREF( old );
    }

    goto branch_end_16;
    branch_no_16:;
    tmp_compare_left_12 = var_k;

    tmp_source_name_30 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_30 == NULL ))
    {
        tmp_source_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_30 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1245;
        goto try_except_handler_13;
    }

    tmp_compare_right_12 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_f90modhooks );
    if ( tmp_compare_right_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1245;
        goto try_except_handler_13;
    }
    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    assert( !(tmp_cmp_In_10 == -1) );
    Py_DECREF( tmp_compare_right_12 );
    if ( tmp_cmp_In_10 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_source_name_31 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_31 == NULL ))
    {
        tmp_source_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_31 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1246;
        goto try_except_handler_13;
    }

    tmp_subscribed_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_f90modhooks );
    if ( tmp_subscribed_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1246;
        goto try_except_handler_13;
    }
    tmp_subscript_name_20 = var_k;

    tmp_assign_source_73 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_20, tmp_subscript_name_20 );
    Py_DECREF( tmp_subscribed_name_20 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1246;
        goto try_except_handler_13;
    }
    {
        PyObject *old = var_c;
        assert( old != NULL );
        var_c = tmp_assign_source_73;
        Py_DECREF( old );
    }

    goto branch_end_17;
    branch_no_17:;
    tmp_compare_left_13 = var_k;

    tmp_source_name_32 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_32 == NULL ))
    {
        tmp_source_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_32 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1247;
        goto try_except_handler_13;
    }

    tmp_compare_right_13 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_commonhooks );
    if ( tmp_compare_right_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1247;
        goto try_except_handler_13;
    }
    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_13, tmp_compare_left_13 );
    assert( !(tmp_cmp_In_11 == -1) );
    Py_DECREF( tmp_compare_right_13 );
    if ( tmp_cmp_In_11 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_source_name_33 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_33 == NULL ))
    {
        tmp_source_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_33 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "cfuncs" );
        exception_tb = NULL;

        exception_lineno = 1248;
        goto try_except_handler_13;
    }

    tmp_subscribed_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_commonhooks );
    if ( tmp_subscribed_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1248;
        goto try_except_handler_13;
    }
    tmp_subscript_name_21 = var_k;

    tmp_assign_source_74 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_21, tmp_subscript_name_21 );
    Py_DECREF( tmp_subscribed_name_21 );
    if ( tmp_assign_source_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1248;
        goto try_except_handler_13;
    }
    {
        PyObject *old = var_c;
        assert( old != NULL );
        var_c = tmp_assign_source_74;
        Py_DECREF( old );
    }

    goto branch_end_18;
    branch_no_18:;
    tmp_called_name_27 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_errmess );

    if (unlikely( tmp_called_name_27 == NULL ))
    {
        tmp_called_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_errmess );
    }

    if ( tmp_called_name_27 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "errmess" );
        exception_tb = NULL;

        exception_lineno = 1250;
        goto try_except_handler_13;
    }

    tmp_left_name_3 = const_str_digest_f84a55aeb58eb8347c93e2f1b19d36b1;
    tmp_operand_name_1 = var_k;

    tmp_right_name_3 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_1 );
    if ( tmp_right_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1250;
        goto try_except_handler_13;
    }
    tmp_args_element_name_32 = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_3 );
    Py_DECREF( tmp_right_name_3 );
    if ( tmp_args_element_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1250;
        goto try_except_handler_13;
    }
    frame_function->f_lineno = 1250;
    {
        PyObject *call_args[] = { tmp_args_element_name_32 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_27, call_args );
    }

    Py_DECREF( tmp_args_element_name_32 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1250;
        goto try_except_handler_13;
    }
    Py_DECREF( tmp_unused );
    goto loop_start_8;
    branch_end_18:;
    branch_end_17:;
    branch_end_16:;
    branch_end_15:;
    branch_end_14:;
    branch_end_13:;
    branch_end_12:;
    branch_end_11:;
    branch_end_10:;
    branch_end_9:;
    tmp_dict_name_1 = var_code;

    tmp_key_name_1 = var_n;

    tmp_source_name_34 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_source_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1252;
        goto try_except_handler_13;
    }
    tmp_called_name_28 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_append );
    Py_DECREF( tmp_source_name_34 );
    if ( tmp_called_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1252;
        goto try_except_handler_13;
    }
    tmp_args_element_name_33 = var_c;

    if ( tmp_args_element_name_33 == NULL )
    {
        Py_DECREF( tmp_called_name_28 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "c" );
        exception_tb = NULL;

        exception_lineno = 1252;
        goto try_except_handler_13;
    }

    frame_function->f_lineno = 1252;
    {
        PyObject *call_args[] = { tmp_args_element_name_33 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_28, call_args );
    }

    Py_DECREF( tmp_called_name_28 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1252;
        goto try_except_handler_13;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1227;
        goto try_except_handler_13;
    }
    goto loop_start_8;
    loop_end_8:;
    goto try_end_11;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_8__iter_value );
    tmp_for_loop_8__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_8__for_iterator );
    Py_DECREF( tmp_for_loop_8__for_iterator );
    tmp_for_loop_8__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto try_except_handler_12;
    // End of try:
    try_end_11:;
    Py_XDECREF( tmp_for_loop_8__iter_value );
    tmp_for_loop_8__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_8__for_iterator );
    Py_DECREF( tmp_for_loop_8__for_iterator );
    tmp_for_loop_8__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1225;
        goto try_except_handler_12;
    }
    goto loop_start_7;
    loop_end_7:;
    goto try_end_12;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    tmp_source_name_35 = var_mod_rules;

    tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_append );
    if ( tmp_called_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1253;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_34 = var_code;

    frame_function->f_lineno = 1253;
    {
        PyObject *call_args[] = { tmp_args_element_name_34 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_29, call_args );
    }

    Py_DECREF( tmp_called_name_29 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1253;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_iter_arg_13 = var_mod_rules;

    tmp_assign_source_75 = MAKE_ITERATOR( tmp_iter_arg_13 );
    if ( tmp_assign_source_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1254;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_9__for_iterator == NULL );
    tmp_for_loop_9__for_iterator = tmp_assign_source_75;

    // Tried code:
    loop_start_9:;
    tmp_next_source_9 = tmp_for_loop_9__for_iterator;

    tmp_assign_source_76 = ITERATOR_NEXT( tmp_next_source_9 );
    if ( tmp_assign_source_76 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_9;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1254;
            goto try_except_handler_14;
        }
    }

    {
        PyObject *old = tmp_for_loop_9__iter_value;
        tmp_for_loop_9__iter_value = tmp_assign_source_76;
        Py_XDECREF( old );
    }

    tmp_assign_source_77 = tmp_for_loop_9__iter_value;

    {
        PyObject *old = var_r;
        var_r = tmp_assign_source_77;
        Py_INCREF( var_r );
        Py_XDECREF( old );
    }

    tmp_compexpr_left_1 = const_str_plain__check;
    tmp_compexpr_right_1 = var_r;

    tmp_and_left_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1255;
        goto try_except_handler_14;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    assert( !(tmp_and_left_truth_1 == -1) );
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_subscribed_name_22 = var_r;

    tmp_subscript_name_22 = const_str_plain__check;
    tmp_called_name_30 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_22, tmp_subscript_name_22 );
    if ( tmp_called_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1255;
        goto try_except_handler_14;
    }
    tmp_args_element_name_35 = par_m;

    frame_function->f_lineno = 1255;
    {
        PyObject *call_args[] = { tmp_args_element_name_35 };
        tmp_and_right_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_30, call_args );
    }

    Py_DECREF( tmp_called_name_30 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1255;
        goto try_except_handler_14;
    }
    tmp_or_left_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    Py_INCREF( tmp_and_left_value_1 );
    tmp_or_left_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_1 );

        exception_lineno = 1255;
        goto try_except_handler_14;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    Py_DECREF( tmp_or_left_value_1 );
    tmp_compexpr_left_2 = const_str_plain__check;
    tmp_compexpr_right_2 = var_r;

    tmp_or_right_value_1 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1255;
        goto try_except_handler_14;
    }
    Py_INCREF( tmp_or_right_value_1 );
    tmp_cond_value_6 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_6 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 1255;
        goto try_except_handler_14;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_called_name_31 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_name_31 == NULL ))
    {
        tmp_called_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_name_31 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "applyrules" );
        exception_tb = NULL;

        exception_lineno = 1256;
        goto try_except_handler_14;
    }

    tmp_args_element_name_36 = var_r;

    tmp_args_element_name_37 = var_vrd;

    tmp_args_element_name_38 = par_m;

    frame_function->f_lineno = 1256;
    {
        PyObject *call_args[] = { tmp_args_element_name_36, tmp_args_element_name_37, tmp_args_element_name_38 };
        tmp_assign_source_78 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_31, call_args );
    }

    if ( tmp_assign_source_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1256;
        goto try_except_handler_14;
    }
    {
        PyObject *old = var_ar;
        var_ar = tmp_assign_source_78;
        Py_XDECREF( old );
    }

    tmp_called_name_32 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_name_32 == NULL ))
    {
        tmp_called_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_name_32 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "dictappend" );
        exception_tb = NULL;

        exception_lineno = 1257;
        goto try_except_handler_14;
    }

    tmp_args_element_name_39 = var_rd;

    if ( tmp_args_element_name_39 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1257;
        goto try_except_handler_14;
    }

    tmp_args_element_name_40 = var_ar;

    frame_function->f_lineno = 1257;
    {
        PyObject *call_args[] = { tmp_args_element_name_39, tmp_args_element_name_40 };
        tmp_assign_source_79 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_32, call_args );
    }

    if ( tmp_assign_source_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1257;
        goto try_except_handler_14;
    }
    {
        PyObject *old = var_rd;
        var_rd = tmp_assign_source_79;
        Py_XDECREF( old );
    }

    branch_no_19:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1254;
        goto try_except_handler_14;
    }
    goto loop_start_9;
    loop_end_9:;
    goto try_end_13;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_9__iter_value );
    tmp_for_loop_9__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_9__for_iterator );
    Py_DECREF( tmp_for_loop_9__for_iterator );
    tmp_for_loop_9__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    Py_XDECREF( tmp_for_loop_9__iter_value );
    tmp_for_loop_9__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_9__for_iterator );
    Py_DECREF( tmp_for_loop_9__for_iterator );
    tmp_for_loop_9__for_iterator = NULL;

    tmp_called_name_33 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_name_33 == NULL ))
    {
        tmp_called_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_name_33 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "applyrules" );
        exception_tb = NULL;

        exception_lineno = 1258;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_41 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_module_rules );

    if (unlikely( tmp_args_element_name_41 == NULL ))
    {
        tmp_args_element_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_module_rules );
    }

    if ( tmp_args_element_name_41 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "module_rules" );
        exception_tb = NULL;

        exception_lineno = 1258;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_42 = var_rd;

    if ( tmp_args_element_name_42 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1258;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1258;
    {
        PyObject *call_args[] = { tmp_args_element_name_41, tmp_args_element_name_42 };
        tmp_assign_source_80 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_33, call_args );
    }

    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1258;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_ar;
        var_ar = tmp_assign_source_80;
        Py_XDECREF( old );
    }

    tmp_source_name_37 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_37 == NULL ))
    {
        tmp_source_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_37 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "os" );
        exception_tb = NULL;

        exception_lineno = 1260;
        goto frame_exception_exit_1;
    }

    tmp_source_name_36 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_path );
    if ( tmp_source_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1260;
        goto frame_exception_exit_1;
    }
    tmp_called_name_34 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_join );
    Py_DECREF( tmp_source_name_36 );
    if ( tmp_called_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1260;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_23 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscribed_name_23 == NULL ))
    {
        tmp_subscribed_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscribed_name_23 == NULL )
    {
        Py_DECREF( tmp_called_name_34 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "options" );
        exception_tb = NULL;

        exception_lineno = 1260;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_23 = const_str_plain_buildpath;
    tmp_args_element_name_43 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_23, tmp_subscript_name_23 );
    if ( tmp_args_element_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_34 );

        exception_lineno = 1260;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_24 = var_vrd;

    tmp_subscript_name_24 = const_str_plain_coutput;
    tmp_args_element_name_44 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_24, tmp_subscript_name_24 );
    if ( tmp_args_element_name_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_34 );
        Py_DECREF( tmp_args_element_name_43 );

        exception_lineno = 1260;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1260;
    {
        PyObject *call_args[] = { tmp_args_element_name_43, tmp_args_element_name_44 };
        tmp_assign_source_81 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_34, call_args );
    }

    Py_DECREF( tmp_called_name_34 );
    Py_DECREF( tmp_args_element_name_43 );
    Py_DECREF( tmp_args_element_name_44 );
    if ( tmp_assign_source_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1260;
        goto frame_exception_exit_1;
    }
    assert( var_fn == NULL );
    var_fn = tmp_assign_source_81;

    tmp_dictset_value = var_fn;

    tmp_dictset_dict = var_ret;

    tmp_dictset_key = const_str_plain_csrc;
    tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
    assert( !(tmp_res != 0) );
    tmp_open_filename_1 = var_fn;

    tmp_open_mode_1 = const_str_plain_w;
    tmp_assign_source_82 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL );
    if ( tmp_assign_source_82 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1262;
        goto frame_exception_exit_1;
    }
    assert( var_f == NULL );
    var_f = tmp_assign_source_82;

    tmp_source_name_38 = var_f;

    tmp_called_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_write );
    if ( tmp_called_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1263;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_25 = var_ar;

    tmp_subscript_name_25 = const_str_plain_modulebody;
    tmp_source_name_39 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_25, tmp_subscript_name_25 );
    if ( tmp_source_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_35 );

        exception_lineno = 1263;
        goto frame_exception_exit_1;
    }
    tmp_called_name_36 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_replace );
    Py_DECREF( tmp_source_name_39 );
    if ( tmp_called_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_35 );

        exception_lineno = 1263;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1263;
    tmp_args_element_name_45 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_36, &PyTuple_GET_ITEM( const_tuple_str_chr_9_str_digest_b8872718382dd39ffa4013e303d20ce5_tuple, 0 ) );

    Py_DECREF( tmp_called_name_36 );
    if ( tmp_args_element_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_35 );

        exception_lineno = 1263;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1263;
    {
        PyObject *call_args[] = { tmp_args_element_name_45 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_35, call_args );
    }

    Py_DECREF( tmp_called_name_35 );
    Py_DECREF( tmp_args_element_name_45 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1263;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_40 = var_f;

    tmp_called_name_37 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_close );
    if ( tmp_called_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1264;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1264;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_37 );
    Py_DECREF( tmp_called_name_37 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1264;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_38 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_name_38 == NULL ))
    {
        tmp_called_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_name_38 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "outmess" );
        exception_tb = NULL;

        exception_lineno = 1265;
        goto frame_exception_exit_1;
    }

    tmp_left_name_4 = const_str_digest_ef7930d2a77ddf997ab5a3884f57cd03;
    tmp_right_name_4 = PyTuple_New( 2 );
    tmp_subscribed_name_26 = par_m;

    tmp_subscript_name_26 = const_str_plain_name;
    tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_26, tmp_subscript_name_26 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_4 );

        exception_lineno = 1265;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_4, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_fn;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_right_name_4, 1, tmp_tuple_element_1 );
    tmp_args_element_name_46 = BINARY_OPERATION_REMAINDER( tmp_left_name_4, tmp_right_name_4 );
    Py_DECREF( tmp_right_name_4 );
    if ( tmp_args_element_name_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1265;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1265;
    {
        PyObject *call_args[] = { tmp_args_element_name_46 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_38, call_args );
    }

    Py_DECREF( tmp_args_element_name_46 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1265;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_27 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscribed_name_27 == NULL ))
    {
        tmp_subscribed_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscribed_name_27 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "options" );
        exception_tb = NULL;

        exception_lineno = 1267;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_27 = const_str_plain_dorestdoc;
    tmp_cond_value_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_27, tmp_subscript_name_27 );
    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1267;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        exception_lineno = 1267;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_source_name_42 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_42 == NULL ))
    {
        tmp_source_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_42 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "os" );
        exception_tb = NULL;

        exception_lineno = 1268;
        goto frame_exception_exit_1;
    }

    tmp_source_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_path );
    if ( tmp_source_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1268;
        goto frame_exception_exit_1;
    }
    tmp_called_name_39 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_join );
    Py_DECREF( tmp_source_name_41 );
    if ( tmp_called_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1268;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_28 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscribed_name_28 == NULL ))
    {
        tmp_subscribed_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscribed_name_28 == NULL )
    {
        Py_DECREF( tmp_called_name_39 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "options" );
        exception_tb = NULL;

        exception_lineno = 1269;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_28 = const_str_plain_buildpath;
    tmp_args_element_name_47 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_28, tmp_subscript_name_28 );
    if ( tmp_args_element_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_39 );

        exception_lineno = 1269;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_29 = var_vrd;

    tmp_subscript_name_29 = const_str_plain_modulename;
    tmp_left_name_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_29, tmp_subscript_name_29 );
    if ( tmp_left_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_39 );
        Py_DECREF( tmp_args_element_name_47 );

        exception_lineno = 1269;
        goto frame_exception_exit_1;
    }
    tmp_right_name_5 = const_str_digest_0967bcbd53c017d1a5d5547539b56ee3;
    tmp_args_element_name_48 = BINARY_OPERATION_ADD( tmp_left_name_5, tmp_right_name_5 );
    Py_DECREF( tmp_left_name_5 );
    if ( tmp_args_element_name_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_39 );
        Py_DECREF( tmp_args_element_name_47 );

        exception_lineno = 1269;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1269;
    {
        PyObject *call_args[] = { tmp_args_element_name_47, tmp_args_element_name_48 };
        tmp_assign_source_83 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_39, call_args );
    }

    Py_DECREF( tmp_called_name_39 );
    Py_DECREF( tmp_args_element_name_47 );
    Py_DECREF( tmp_args_element_name_48 );
    if ( tmp_assign_source_83 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1269;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_fn;
        assert( old != NULL );
        var_fn = tmp_assign_source_83;
        Py_DECREF( old );
    }

    tmp_open_filename_2 = var_fn;

    tmp_open_mode_2 = const_str_plain_w;
    tmp_assign_source_84 = BUILTIN_OPEN( tmp_open_filename_2, tmp_open_mode_2, NULL );
    if ( tmp_assign_source_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1270;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_f;
        assert( old != NULL );
        var_f = tmp_assign_source_84;
        Py_DECREF( old );
    }

    tmp_source_name_43 = var_f;

    tmp_called_name_40 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_write );
    if ( tmp_called_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1271;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1271;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_40, &PyTuple_GET_ITEM( const_tuple_str_digest_2c46aa3007c6fd6726f2d9aac9bc2818_tuple, 0 ) );

    Py_DECREF( tmp_called_name_40 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1271;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_44 = var_f;

    tmp_called_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_write );
    if ( tmp_called_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1272;
        goto frame_exception_exit_1;
    }
    tmp_source_name_45 = const_str_newline;
    tmp_called_name_42 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_join );
    assert( tmp_called_name_42 != NULL );
    tmp_subscribed_name_30 = var_ar;

    tmp_subscript_name_30 = const_str_plain_restdoc;
    tmp_args_element_name_50 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_30, tmp_subscript_name_30 );
    if ( tmp_args_element_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_41 );
        Py_DECREF( tmp_called_name_42 );

        exception_lineno = 1272;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1272;
    {
        PyObject *call_args[] = { tmp_args_element_name_50 };
        tmp_args_element_name_49 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_42, call_args );
    }

    Py_DECREF( tmp_called_name_42 );
    Py_DECREF( tmp_args_element_name_50 );
    if ( tmp_args_element_name_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_41 );

        exception_lineno = 1272;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1272;
    {
        PyObject *call_args[] = { tmp_args_element_name_49 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_41, call_args );
    }

    Py_DECREF( tmp_called_name_41 );
    Py_DECREF( tmp_args_element_name_49 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1272;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_46 = var_f;

    tmp_called_name_43 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_close );
    if ( tmp_called_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1273;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1273;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_43 );
    Py_DECREF( tmp_called_name_43 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1273;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_44 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_name_44 == NULL ))
    {
        tmp_called_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_name_44 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "outmess" );
        exception_tb = NULL;

        exception_lineno = 1274;
        goto frame_exception_exit_1;
    }

    tmp_left_name_6 = const_str_digest_7178dc6f935667e436cac6815906e220;
    tmp_right_name_6 = PyTuple_New( 2 );
    tmp_subscribed_name_31 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscribed_name_31 == NULL ))
    {
        tmp_subscribed_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscribed_name_31 == NULL )
    {
        Py_DECREF( tmp_right_name_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "options" );
        exception_tb = NULL;

        exception_lineno = 1275;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_31 = const_str_plain_buildpath;
    tmp_tuple_element_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_31, tmp_subscript_name_31 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_6 );

        exception_lineno = 1275;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_6, 0, tmp_tuple_element_2 );
    tmp_subscribed_name_32 = var_vrd;

    tmp_subscript_name_32 = const_str_plain_modulename;
    tmp_tuple_element_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_32, tmp_subscript_name_32 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_6 );

        exception_lineno = 1275;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_6, 1, tmp_tuple_element_2 );
    tmp_args_element_name_51 = BINARY_OPERATION_REMAINDER( tmp_left_name_6, tmp_right_name_6 );
    Py_DECREF( tmp_right_name_6 );
    if ( tmp_args_element_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1274;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1275;
    {
        PyObject *call_args[] = { tmp_args_element_name_51 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_44, call_args );
    }

    Py_DECREF( tmp_args_element_name_51 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1275;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_20:;
    tmp_subscribed_name_33 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscribed_name_33 == NULL ))
    {
        tmp_subscribed_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscribed_name_33 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "options" );
        exception_tb = NULL;

        exception_lineno = 1276;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_33 = const_str_plain_dolatexdoc;
    tmp_cond_value_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_33, tmp_subscript_name_33 );
    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1276;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        exception_lineno = 1276;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_source_name_48 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_48 == NULL ))
    {
        tmp_source_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_48 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "os" );
        exception_tb = NULL;

        exception_lineno = 1277;
        goto frame_exception_exit_1;
    }

    tmp_source_name_47 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_path );
    if ( tmp_source_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1277;
        goto frame_exception_exit_1;
    }
    tmp_called_name_45 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_join );
    Py_DECREF( tmp_source_name_47 );
    if ( tmp_called_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1277;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_34 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscribed_name_34 == NULL ))
    {
        tmp_subscribed_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscribed_name_34 == NULL )
    {
        Py_DECREF( tmp_called_name_45 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "options" );
        exception_tb = NULL;

        exception_lineno = 1278;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_34 = const_str_plain_buildpath;
    tmp_args_element_name_52 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_34, tmp_subscript_name_34 );
    if ( tmp_args_element_name_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_45 );

        exception_lineno = 1278;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_35 = var_vrd;

    tmp_subscript_name_35 = const_str_plain_modulename;
    tmp_left_name_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_35, tmp_subscript_name_35 );
    if ( tmp_left_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_45 );
        Py_DECREF( tmp_args_element_name_52 );

        exception_lineno = 1278;
        goto frame_exception_exit_1;
    }
    tmp_right_name_7 = const_str_digest_ebc59643359754d49b2daa361c01a91e;
    tmp_args_element_name_53 = BINARY_OPERATION_ADD( tmp_left_name_7, tmp_right_name_7 );
    Py_DECREF( tmp_left_name_7 );
    if ( tmp_args_element_name_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_45 );
        Py_DECREF( tmp_args_element_name_52 );

        exception_lineno = 1278;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1278;
    {
        PyObject *call_args[] = { tmp_args_element_name_52, tmp_args_element_name_53 };
        tmp_assign_source_85 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_45, call_args );
    }

    Py_DECREF( tmp_called_name_45 );
    Py_DECREF( tmp_args_element_name_52 );
    Py_DECREF( tmp_args_element_name_53 );
    if ( tmp_assign_source_85 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1278;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_fn;
        assert( old != NULL );
        var_fn = tmp_assign_source_85;
        Py_DECREF( old );
    }

    tmp_dictset_value = var_fn;

    tmp_dictset_dict = var_ret;

    tmp_dictset_key = const_str_plain_ltx;
    tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
    assert( !(tmp_res != 0) );
    tmp_open_filename_3 = var_fn;

    tmp_open_mode_3 = const_str_plain_w;
    tmp_assign_source_86 = BUILTIN_OPEN( tmp_open_filename_3, tmp_open_mode_3, NULL );
    if ( tmp_assign_source_86 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1280;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_f;
        assert( old != NULL );
        var_f = tmp_assign_source_86;
        Py_DECREF( old );
    }

    tmp_source_name_49 = var_f;

    tmp_called_name_46 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_write );
    if ( tmp_called_name_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1281;
        goto frame_exception_exit_1;
    }
    tmp_left_name_8 = const_str_digest_7c415443cbc1606e2636a4c45b379117;
    tmp_right_name_8 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f2py_version );

    if (unlikely( tmp_right_name_8 == NULL ))
    {
        tmp_right_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f2py_version );
    }

    if ( tmp_right_name_8 == NULL )
    {
        Py_DECREF( tmp_called_name_46 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "f2py_version" );
        exception_tb = NULL;

        exception_lineno = 1282;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_54 = BINARY_OPERATION_REMAINDER( tmp_left_name_8, tmp_right_name_8 );
    if ( tmp_args_element_name_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_46 );

        exception_lineno = 1282;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1282;
    {
        PyObject *call_args[] = { tmp_args_element_name_54 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_46, call_args );
    }

    Py_DECREF( tmp_called_name_46 );
    Py_DECREF( tmp_args_element_name_54 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1282;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_compare_left_14 = const_str_plain_shortlatex;
    tmp_compare_right_14 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_compare_right_14 == NULL ))
    {
        tmp_compare_right_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_compare_right_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "options" );
        exception_tb = NULL;

        exception_lineno = 1283;
        goto frame_exception_exit_1;
    }

    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_14, tmp_compare_left_14 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_source_name_50 = var_f;

    tmp_called_name_47 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_write );
    if ( tmp_called_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1284;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1285;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_47, &PyTuple_GET_ITEM( const_tuple_str_digest_f56fee16ec8153a6367a71f0309f3dea_tuple, 0 ) );

    Py_DECREF( tmp_called_name_47 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1285;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_22:;
    tmp_source_name_51 = var_f;

    tmp_called_name_48 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_write );
    if ( tmp_called_name_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1286;
        goto frame_exception_exit_1;
    }
    tmp_source_name_52 = const_str_newline;
    tmp_called_name_49 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_join );
    assert( tmp_called_name_49 != NULL );
    tmp_subscribed_name_36 = var_ar;

    tmp_subscript_name_36 = const_str_plain_latexdoc;
    tmp_args_element_name_56 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_36, tmp_subscript_name_36 );
    if ( tmp_args_element_name_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_called_name_49 );

        exception_lineno = 1286;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1286;
    {
        PyObject *call_args[] = { tmp_args_element_name_56 };
        tmp_args_element_name_55 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_49, call_args );
    }

    Py_DECREF( tmp_called_name_49 );
    Py_DECREF( tmp_args_element_name_56 );
    if ( tmp_args_element_name_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_48 );

        exception_lineno = 1286;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1286;
    {
        PyObject *call_args[] = { tmp_args_element_name_55 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_48, call_args );
    }

    Py_DECREF( tmp_called_name_48 );
    Py_DECREF( tmp_args_element_name_55 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1286;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_compare_left_15 = const_str_plain_shortlatex;
    tmp_compare_right_15 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_compare_right_15 == NULL ))
    {
        tmp_compare_right_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_compare_right_15 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "options" );
        exception_tb = NULL;

        exception_lineno = 1287;
        goto frame_exception_exit_1;
    }

    tmp_cmp_NotIn_2 = PySequence_Contains( tmp_compare_right_15, tmp_compare_left_15 );
    assert( !(tmp_cmp_NotIn_2 == -1) );
    if ( tmp_cmp_NotIn_2 == 0 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_source_name_53 = var_f;

    tmp_called_name_50 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_write );
    if ( tmp_called_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1288;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1288;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_50, &PyTuple_GET_ITEM( const_tuple_str_digest_1359d76a6df2fc5fce5bf1da14fde955_tuple, 0 ) );

    Py_DECREF( tmp_called_name_50 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1288;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_23:;
    tmp_source_name_54 = var_f;

    tmp_called_name_51 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain_close );
    if ( tmp_called_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1289;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1289;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_51 );
    Py_DECREF( tmp_called_name_51 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1289;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_52 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_name_52 == NULL ))
    {
        tmp_called_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_name_52 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "outmess" );
        exception_tb = NULL;

        exception_lineno = 1290;
        goto frame_exception_exit_1;
    }

    tmp_left_name_9 = const_str_digest_ecc6d7d65aba7b1225ac97578459be7a;
    tmp_right_name_9 = PyTuple_New( 2 );
    tmp_subscribed_name_37 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscribed_name_37 == NULL ))
    {
        tmp_subscribed_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscribed_name_37 == NULL )
    {
        Py_DECREF( tmp_right_name_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "options" );
        exception_tb = NULL;

        exception_lineno = 1291;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_37 = const_str_plain_buildpath;
    tmp_tuple_element_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_37, tmp_subscript_name_37 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_9 );

        exception_lineno = 1291;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_9, 0, tmp_tuple_element_3 );
    tmp_subscribed_name_38 = var_vrd;

    tmp_subscript_name_38 = const_str_plain_modulename;
    tmp_tuple_element_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_38, tmp_subscript_name_38 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_9 );

        exception_lineno = 1291;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_9, 1, tmp_tuple_element_3 );
    tmp_args_element_name_57 = BINARY_OPERATION_REMAINDER( tmp_left_name_9, tmp_right_name_9 );
    Py_DECREF( tmp_right_name_9 );
    if ( tmp_args_element_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1290;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1291;
    {
        PyObject *call_args[] = { tmp_args_element_name_57 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_52, call_args );
    }

    Py_DECREF( tmp_args_element_name_57 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1291;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_21:;
    tmp_cond_value_9 = var_funcwrappers;

    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1292;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_source_name_56 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_56 == NULL ))
    {
        tmp_source_name_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_56 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "os" );
        exception_tb = NULL;

        exception_lineno = 1293;
        goto frame_exception_exit_1;
    }

    tmp_source_name_55 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain_path );
    if ( tmp_source_name_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1293;
        goto frame_exception_exit_1;
    }
    tmp_called_name_53 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain_join );
    Py_DECREF( tmp_source_name_55 );
    if ( tmp_called_name_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1293;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_39 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscribed_name_39 == NULL ))
    {
        tmp_subscribed_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscribed_name_39 == NULL )
    {
        Py_DECREF( tmp_called_name_53 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "options" );
        exception_tb = NULL;

        exception_lineno = 1293;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_39 = const_str_plain_buildpath;
    tmp_args_element_name_58 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_39, tmp_subscript_name_39 );
    if ( tmp_args_element_name_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_53 );

        exception_lineno = 1293;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_40 = var_vrd;

    tmp_subscript_name_40 = const_str_plain_f2py_wrapper_output;
    tmp_args_element_name_59 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_40, tmp_subscript_name_40 );
    if ( tmp_args_element_name_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_53 );
        Py_DECREF( tmp_args_element_name_58 );

        exception_lineno = 1293;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1293;
    {
        PyObject *call_args[] = { tmp_args_element_name_58, tmp_args_element_name_59 };
        tmp_assign_source_87 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_53, call_args );
    }

    Py_DECREF( tmp_called_name_53 );
    Py_DECREF( tmp_args_element_name_58 );
    Py_DECREF( tmp_args_element_name_59 );
    if ( tmp_assign_source_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1293;
        goto frame_exception_exit_1;
    }
    assert( var_wn == NULL );
    var_wn = tmp_assign_source_87;

    tmp_dictset_value = var_wn;

    tmp_dictset_dict = var_ret;

    tmp_dictset_key = const_str_plain_fsrc;
    tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
    assert( !(tmp_res != 0) );
    tmp_open_filename_4 = var_wn;

    tmp_open_mode_4 = const_str_plain_w;
    tmp_assign_source_88 = BUILTIN_OPEN( tmp_open_filename_4, tmp_open_mode_4, NULL );
    if ( tmp_assign_source_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1295;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_f;
        var_f = tmp_assign_source_88;
        Py_XDECREF( old );
    }

    tmp_source_name_57 = var_f;

    tmp_called_name_54 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain_write );
    if ( tmp_called_name_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1296;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1296;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_54, &PyTuple_GET_ITEM( const_tuple_str_digest_dc8dd5a6a650d06eb556e20e18906c89_tuple, 0 ) );

    Py_DECREF( tmp_called_name_54 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1296;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_58 = var_f;

    tmp_called_name_55 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain_write );
    if ( tmp_called_name_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1297;
        goto frame_exception_exit_1;
    }
    tmp_left_name_10 = const_str_digest_e577de0849b7e7b9012751e2668e791b;
    tmp_right_name_10 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f2py_version );

    if (unlikely( tmp_right_name_10 == NULL ))
    {
        tmp_right_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f2py_version );
    }

    if ( tmp_right_name_10 == NULL )
    {
        Py_DECREF( tmp_called_name_55 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "f2py_version" );
        exception_tb = NULL;

        exception_lineno = 1298;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_60 = BINARY_OPERATION_REMAINDER( tmp_left_name_10, tmp_right_name_10 );
    if ( tmp_args_element_name_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_55 );

        exception_lineno = 1298;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1298;
    {
        PyObject *call_args[] = { tmp_args_element_name_60 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_55, call_args );
    }

    Py_DECREF( tmp_called_name_55 );
    Py_DECREF( tmp_args_element_name_60 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1298;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_59 = var_f;

    tmp_called_name_56 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain_write );
    if ( tmp_called_name_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1299;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1300;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_56, &PyTuple_GET_ITEM( const_tuple_str_digest_29af8796ba8bf65ff4bf13d6ccb716bc_tuple, 0 ) );

    Py_DECREF( tmp_called_name_56 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1300;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_89 = PyList_New( 0 );
    assert( var_lines == NULL );
    var_lines = tmp_assign_source_89;

    tmp_source_name_61 = const_str_digest_09bc009ffd858aaf58df7e98266d9b89;
    tmp_called_name_58 = LOOKUP_ATTRIBUTE( tmp_source_name_61, const_str_plain_join );
    assert( tmp_called_name_58 != NULL );
    tmp_args_element_name_61 = var_funcwrappers;

    frame_function->f_lineno = 1302;
    {
        PyObject *call_args[] = { tmp_args_element_name_61 };
        tmp_left_name_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_58, call_args );
    }

    Py_DECREF( tmp_called_name_58 );
    if ( tmp_left_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1302;
        goto frame_exception_exit_1;
    }
    tmp_right_name_11 = const_str_newline;
    tmp_source_name_60 = BINARY_OPERATION_ADD( tmp_left_name_11, tmp_right_name_11 );
    Py_DECREF( tmp_left_name_11 );
    if ( tmp_source_name_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1302;
        goto frame_exception_exit_1;
    }
    tmp_called_name_57 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain_split );
    Py_DECREF( tmp_source_name_60 );
    if ( tmp_called_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1302;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1302;
    tmp_iter_arg_14 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_57, &PyTuple_GET_ITEM( const_tuple_str_newline_tuple, 0 ) );

    Py_DECREF( tmp_called_name_57 );
    if ( tmp_iter_arg_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1302;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_90 = MAKE_ITERATOR( tmp_iter_arg_14 );
    Py_DECREF( tmp_iter_arg_14 );
    if ( tmp_assign_source_90 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1302;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_10__for_iterator == NULL );
    tmp_for_loop_10__for_iterator = tmp_assign_source_90;

    // Tried code:
    loop_start_10:;
    tmp_next_source_10 = tmp_for_loop_10__for_iterator;

    tmp_assign_source_91 = ITERATOR_NEXT( tmp_next_source_10 );
    if ( tmp_assign_source_91 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_10;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1302;
            goto try_except_handler_15;
        }
    }

    {
        PyObject *old = tmp_for_loop_10__iter_value;
        tmp_for_loop_10__iter_value = tmp_assign_source_91;
        Py_XDECREF( old );
    }

    tmp_assign_source_92 = tmp_for_loop_10__iter_value;

    {
        PyObject *old = var_l;
        var_l = tmp_assign_source_92;
        Py_INCREF( var_l );
        Py_XDECREF( old );
    }

    tmp_and_left_value_2 = var_l;

    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1303;
        goto try_except_handler_15;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_subscribed_name_41 = var_l;

    tmp_subscript_name_41 = const_int_0;
    tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_41, tmp_subscript_name_41 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1303;
        goto try_except_handler_15;
    }
    tmp_compexpr_right_3 = const_str_space;
    tmp_and_right_value_2 = RICH_COMPARE_EQ( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1303;
        goto try_except_handler_15;
    }
    tmp_cond_value_10 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    Py_INCREF( tmp_and_left_value_2 );
    tmp_cond_value_10 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 1303;
        goto try_except_handler_15;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    loop_start_11:;
    tmp_len_arg_1 = var_l;

    if ( tmp_len_arg_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "l" );
        exception_tb = NULL;

        exception_lineno = 1304;
        goto try_except_handler_15;
    }

    tmp_compare_left_16 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compare_left_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1304;
        goto try_except_handler_15;
    }
    tmp_compare_right_16 = const_int_pos_66;
    tmp_cmp_GtE_1 = RICH_COMPARE_BOOL_GE( tmp_compare_left_16, tmp_compare_right_16 );
    if ( tmp_cmp_GtE_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_16 );

        exception_lineno = 1304;
        goto try_except_handler_15;
    }
    Py_DECREF( tmp_compare_left_16 );
    if ( tmp_cmp_GtE_1 == 1 )
    {
        goto branch_no_26;
    }
    else
    {
        goto branch_yes_26;
    }
    branch_yes_26:;
    goto loop_end_11;
    branch_no_26:;
    tmp_source_name_62 = var_lines;

    tmp_called_name_59 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain_append );
    if ( tmp_called_name_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1305;
        goto try_except_handler_15;
    }
    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = 66;
    tmp_slice_source_2 = var_l;

    if ( tmp_slice_source_2 == NULL )
    {
        Py_DECREF( tmp_called_name_59 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "l" );
        exception_tb = NULL;

        exception_lineno = 1305;
        goto try_except_handler_15;
    }

    tmp_left_name_12 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_left_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_59 );

        exception_lineno = 1305;
        goto try_except_handler_15;
    }
    tmp_right_name_12 = const_str_digest_78744423de247d23fef27b4f24d61469;
    tmp_args_element_name_62 = BINARY_OPERATION_ADD( tmp_left_name_12, tmp_right_name_12 );
    Py_DECREF( tmp_left_name_12 );
    if ( tmp_args_element_name_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_59 );

        exception_lineno = 1305;
        goto try_except_handler_15;
    }
    frame_function->f_lineno = 1305;
    {
        PyObject *call_args[] = { tmp_args_element_name_62 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_59, call_args );
    }

    Py_DECREF( tmp_called_name_59 );
    Py_DECREF( tmp_args_element_name_62 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1305;
        goto try_except_handler_15;
    }
    Py_DECREF( tmp_unused );
    tmp_sliceslicedel_index_lower_3 = 66;
    tmp_slice_index_upper_3 = PY_SSIZE_T_MAX;
    tmp_slice_source_3 = var_l;

    if ( tmp_slice_source_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "l" );
        exception_tb = NULL;

        exception_lineno = 1306;
        goto try_except_handler_15;
    }

    tmp_assign_source_93 = LOOKUP_INDEX_SLICE( tmp_slice_source_3, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_93 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1306;
        goto try_except_handler_15;
    }
    {
        PyObject *old = var_l;
        var_l = tmp_assign_source_93;
        Py_XDECREF( old );
    }

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1304;
        goto try_except_handler_15;
    }
    goto loop_start_11;
    loop_end_11:;
    tmp_source_name_63 = var_lines;

    tmp_called_name_60 = LOOKUP_ATTRIBUTE( tmp_source_name_63, const_str_plain_append );
    if ( tmp_called_name_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1307;
        goto try_except_handler_15;
    }
    tmp_left_name_13 = var_l;

    if ( tmp_left_name_13 == NULL )
    {
        Py_DECREF( tmp_called_name_60 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "l" );
        exception_tb = NULL;

        exception_lineno = 1307;
        goto try_except_handler_15;
    }

    tmp_right_name_13 = const_str_newline;
    tmp_args_element_name_63 = BINARY_OPERATION_ADD( tmp_left_name_13, tmp_right_name_13 );
    if ( tmp_args_element_name_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_60 );

        exception_lineno = 1307;
        goto try_except_handler_15;
    }
    frame_function->f_lineno = 1307;
    {
        PyObject *call_args[] = { tmp_args_element_name_63 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_60, call_args );
    }

    Py_DECREF( tmp_called_name_60 );
    Py_DECREF( tmp_args_element_name_63 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1307;
        goto try_except_handler_15;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_25;
    branch_no_25:;
    tmp_source_name_64 = var_lines;

    tmp_called_name_61 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain_append );
    if ( tmp_called_name_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1309;
        goto try_except_handler_15;
    }
    tmp_left_name_14 = var_l;

    tmp_right_name_14 = const_str_newline;
    tmp_args_element_name_64 = BINARY_OPERATION_ADD( tmp_left_name_14, tmp_right_name_14 );
    if ( tmp_args_element_name_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_61 );

        exception_lineno = 1309;
        goto try_except_handler_15;
    }
    frame_function->f_lineno = 1309;
    {
        PyObject *call_args[] = { tmp_args_element_name_64 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_61, call_args );
    }

    Py_DECREF( tmp_called_name_61 );
    Py_DECREF( tmp_args_element_name_64 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1309;
        goto try_except_handler_15;
    }
    Py_DECREF( tmp_unused );
    branch_end_25:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1302;
        goto try_except_handler_15;
    }
    goto loop_start_10;
    loop_end_10:;
    goto try_end_14;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_10__iter_value );
    tmp_for_loop_10__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_10__for_iterator );
    Py_DECREF( tmp_for_loop_10__for_iterator );
    tmp_for_loop_10__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    Py_XDECREF( tmp_for_loop_10__iter_value );
    tmp_for_loop_10__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_10__for_iterator );
    Py_DECREF( tmp_for_loop_10__for_iterator );
    tmp_for_loop_10__for_iterator = NULL;

    tmp_source_name_66 = const_str_empty;
    tmp_called_name_63 = LOOKUP_ATTRIBUTE( tmp_source_name_66, const_str_plain_join );
    assert( tmp_called_name_63 != NULL );
    tmp_args_element_name_65 = var_lines;

    frame_function->f_lineno = 1310;
    {
        PyObject *call_args[] = { tmp_args_element_name_65 };
        tmp_source_name_65 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_63, call_args );
    }

    Py_DECREF( tmp_called_name_63 );
    if ( tmp_source_name_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1310;
        goto frame_exception_exit_1;
    }
    tmp_called_name_62 = LOOKUP_ATTRIBUTE( tmp_source_name_65, const_str_plain_replace );
    Py_DECREF( tmp_source_name_65 );
    if ( tmp_called_name_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1310;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1310;
    tmp_assign_source_94 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_62, &PyTuple_GET_ITEM( const_tuple_str_digest_ae2f2b951c1c5b9ca49bec8c509fa575_str_newline_tuple, 0 ) );

    Py_DECREF( tmp_called_name_62 );
    if ( tmp_assign_source_94 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1310;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_lines;
        assert( old != NULL );
        var_lines = tmp_assign_source_94;
        Py_DECREF( old );
    }

    tmp_source_name_67 = var_f;

    tmp_called_name_64 = LOOKUP_ATTRIBUTE( tmp_source_name_67, const_str_plain_write );
    if ( tmp_called_name_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1311;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_66 = var_lines;

    frame_function->f_lineno = 1311;
    {
        PyObject *call_args[] = { tmp_args_element_name_66 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_64, call_args );
    }

    Py_DECREF( tmp_called_name_64 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1311;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_68 = var_f;

    tmp_called_name_65 = LOOKUP_ATTRIBUTE( tmp_source_name_68, const_str_plain_close );
    if ( tmp_called_name_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1312;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1312;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_65 );
    Py_DECREF( tmp_called_name_65 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1312;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_66 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_name_66 == NULL ))
    {
        tmp_called_name_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_name_66 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "outmess" );
        exception_tb = NULL;

        exception_lineno = 1313;
        goto frame_exception_exit_1;
    }

    tmp_left_name_15 = const_str_digest_35c9158baecd0085b3954968a96536eb;
    tmp_right_name_15 = var_wn;

    tmp_args_element_name_67 = BINARY_OPERATION_REMAINDER( tmp_left_name_15, tmp_right_name_15 );
    if ( tmp_args_element_name_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1313;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1313;
    {
        PyObject *call_args[] = { tmp_args_element_name_67 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_66, call_args );
    }

    Py_DECREF( tmp_args_element_name_67 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1313;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_24:;
    tmp_cond_value_11 = var_funcwrappers2;

    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1314;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_11 == 1 )
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_source_name_70 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_70 == NULL ))
    {
        tmp_source_name_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_70 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "os" );
        exception_tb = NULL;

        exception_lineno = 1315;
        goto frame_exception_exit_1;
    }

    tmp_source_name_69 = LOOKUP_ATTRIBUTE( tmp_source_name_70, const_str_plain_path );
    if ( tmp_source_name_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1315;
        goto frame_exception_exit_1;
    }
    tmp_called_name_67 = LOOKUP_ATTRIBUTE( tmp_source_name_69, const_str_plain_join );
    Py_DECREF( tmp_source_name_69 );
    if ( tmp_called_name_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1315;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_42 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscribed_name_42 == NULL ))
    {
        tmp_subscribed_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscribed_name_42 == NULL )
    {
        Py_DECREF( tmp_called_name_67 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "options" );
        exception_tb = NULL;

        exception_lineno = 1316;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_42 = const_str_plain_buildpath;
    tmp_args_element_name_68 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_42, tmp_subscript_name_42 );
    if ( tmp_args_element_name_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_67 );

        exception_lineno = 1316;
        goto frame_exception_exit_1;
    }
    tmp_left_name_16 = const_str_digest_8736fba406c717e343725a08ecb8beaa;
    tmp_subscribed_name_43 = var_vrd;

    tmp_subscript_name_43 = const_str_plain_modulename;
    tmp_right_name_16 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_43, tmp_subscript_name_43 );
    if ( tmp_right_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_67 );
        Py_DECREF( tmp_args_element_name_68 );

        exception_lineno = 1316;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_69 = BINARY_OPERATION_REMAINDER( tmp_left_name_16, tmp_right_name_16 );
    Py_DECREF( tmp_right_name_16 );
    if ( tmp_args_element_name_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_67 );
        Py_DECREF( tmp_args_element_name_68 );

        exception_lineno = 1316;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1316;
    {
        PyObject *call_args[] = { tmp_args_element_name_68, tmp_args_element_name_69 };
        tmp_assign_source_95 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_67, call_args );
    }

    Py_DECREF( tmp_called_name_67 );
    Py_DECREF( tmp_args_element_name_68 );
    Py_DECREF( tmp_args_element_name_69 );
    if ( tmp_assign_source_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1316;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_wn;
        var_wn = tmp_assign_source_95;
        Py_XDECREF( old );
    }

    tmp_dictset_value = var_wn;

    tmp_dictset_dict = var_ret;

    tmp_dictset_key = const_str_plain_fsrc;
    tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
    assert( !(tmp_res != 0) );
    tmp_open_filename_5 = var_wn;

    tmp_open_mode_5 = const_str_plain_w;
    tmp_assign_source_96 = BUILTIN_OPEN( tmp_open_filename_5, tmp_open_mode_5, NULL );
    if ( tmp_assign_source_96 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1318;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_f;
        var_f = tmp_assign_source_96;
        Py_XDECREF( old );
    }

    tmp_source_name_71 = var_f;

    tmp_called_name_68 = LOOKUP_ATTRIBUTE( tmp_source_name_71, const_str_plain_write );
    if ( tmp_called_name_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1319;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1319;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_68, &PyTuple_GET_ITEM( const_tuple_str_digest_9c66944f85ececbe0338840a546bb4dd_tuple, 0 ) );

    Py_DECREF( tmp_called_name_68 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1319;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_72 = var_f;

    tmp_called_name_69 = LOOKUP_ATTRIBUTE( tmp_source_name_72, const_str_plain_write );
    if ( tmp_called_name_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1320;
        goto frame_exception_exit_1;
    }
    tmp_left_name_17 = const_str_digest_bb0849e7e2d4c1c22783c604269c9e5c;
    tmp_right_name_17 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f2py_version );

    if (unlikely( tmp_right_name_17 == NULL ))
    {
        tmp_right_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f2py_version );
    }

    if ( tmp_right_name_17 == NULL )
    {
        Py_DECREF( tmp_called_name_69 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "f2py_version" );
        exception_tb = NULL;

        exception_lineno = 1321;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_70 = BINARY_OPERATION_REMAINDER( tmp_left_name_17, tmp_right_name_17 );
    if ( tmp_args_element_name_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_69 );

        exception_lineno = 1321;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1321;
    {
        PyObject *call_args[] = { tmp_args_element_name_70 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_69, call_args );
    }

    Py_DECREF( tmp_called_name_69 );
    Py_DECREF( tmp_args_element_name_70 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1321;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_73 = var_f;

    tmp_called_name_70 = LOOKUP_ATTRIBUTE( tmp_source_name_73, const_str_plain_write );
    if ( tmp_called_name_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1322;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1323;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_70, &PyTuple_GET_ITEM( const_tuple_str_digest_7e683b4fcd50010e69923f70359689eb_tuple, 0 ) );

    Py_DECREF( tmp_called_name_70 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1323;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_97 = PyList_New( 0 );
    {
        PyObject *old = var_lines;
        var_lines = tmp_assign_source_97;
        Py_XDECREF( old );
    }

    tmp_source_name_75 = const_str_digest_09bc009ffd858aaf58df7e98266d9b89;
    tmp_called_name_72 = LOOKUP_ATTRIBUTE( tmp_source_name_75, const_str_plain_join );
    assert( tmp_called_name_72 != NULL );
    tmp_args_element_name_71 = var_funcwrappers2;

    frame_function->f_lineno = 1325;
    {
        PyObject *call_args[] = { tmp_args_element_name_71 };
        tmp_left_name_18 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_72, call_args );
    }

    Py_DECREF( tmp_called_name_72 );
    if ( tmp_left_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1325;
        goto frame_exception_exit_1;
    }
    tmp_right_name_18 = const_str_newline;
    tmp_source_name_74 = BINARY_OPERATION_ADD( tmp_left_name_18, tmp_right_name_18 );
    Py_DECREF( tmp_left_name_18 );
    if ( tmp_source_name_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1325;
        goto frame_exception_exit_1;
    }
    tmp_called_name_71 = LOOKUP_ATTRIBUTE( tmp_source_name_74, const_str_plain_split );
    Py_DECREF( tmp_source_name_74 );
    if ( tmp_called_name_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1325;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1325;
    tmp_iter_arg_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_71, &PyTuple_GET_ITEM( const_tuple_str_newline_tuple, 0 ) );

    Py_DECREF( tmp_called_name_71 );
    if ( tmp_iter_arg_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1325;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_98 = MAKE_ITERATOR( tmp_iter_arg_15 );
    Py_DECREF( tmp_iter_arg_15 );
    if ( tmp_assign_source_98 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1325;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_11__for_iterator == NULL );
    tmp_for_loop_11__for_iterator = tmp_assign_source_98;

    // Tried code:
    loop_start_12:;
    tmp_next_source_11 = tmp_for_loop_11__for_iterator;

    tmp_assign_source_99 = ITERATOR_NEXT( tmp_next_source_11 );
    if ( tmp_assign_source_99 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_12;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1325;
            goto try_except_handler_16;
        }
    }

    {
        PyObject *old = tmp_for_loop_11__iter_value;
        tmp_for_loop_11__iter_value = tmp_assign_source_99;
        Py_XDECREF( old );
    }

    tmp_assign_source_100 = tmp_for_loop_11__iter_value;

    {
        PyObject *old = var_l;
        var_l = tmp_assign_source_100;
        Py_INCREF( var_l );
        Py_XDECREF( old );
    }

    tmp_len_arg_2 = var_l;

    tmp_compexpr_left_4 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1326;
        goto try_except_handler_16;
    }
    tmp_compexpr_right_4 = const_int_pos_72;
    tmp_and_left_value_3 = RICH_COMPARE_GT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_and_left_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1326;
        goto try_except_handler_16;
    }
    tmp_and_left_truth_3 = CHECK_IF_TRUE( tmp_and_left_value_3 );
    if ( tmp_and_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_3 );

        exception_lineno = 1326;
        goto try_except_handler_16;
    }
    if ( tmp_and_left_truth_3 == 1 )
    {
        goto and_right_3;
    }
    else
    {
        goto and_left_3;
    }
    and_right_3:;
    Py_DECREF( tmp_and_left_value_3 );
    tmp_subscribed_name_44 = var_l;

    tmp_subscript_name_44 = const_int_0;
    tmp_compexpr_left_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_44, tmp_subscript_name_44 );
    if ( tmp_compexpr_left_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1326;
        goto try_except_handler_16;
    }
    tmp_compexpr_right_5 = const_str_space;
    tmp_and_right_value_3 = RICH_COMPARE_EQ( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    Py_DECREF( tmp_compexpr_left_5 );
    if ( tmp_and_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1326;
        goto try_except_handler_16;
    }
    tmp_cond_value_12 = tmp_and_right_value_3;
    goto and_end_3;
    and_left_3:;
    tmp_cond_value_12 = tmp_and_left_value_3;
    and_end_3:;
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_12 );

        exception_lineno = 1326;
        goto try_except_handler_16;
    }
    Py_DECREF( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == 1 )
    {
        goto branch_yes_28;
    }
    else
    {
        goto branch_no_28;
    }
    branch_yes_28:;
    tmp_source_name_76 = var_lines;

    tmp_called_name_73 = LOOKUP_ATTRIBUTE( tmp_source_name_76, const_str_plain_append );
    if ( tmp_called_name_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1327;
        goto try_except_handler_16;
    }
    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = 72;
    tmp_slice_source_4 = var_l;

    tmp_left_name_19 = LOOKUP_INDEX_SLICE( tmp_slice_source_4, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_left_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_73 );

        exception_lineno = 1327;
        goto try_except_handler_16;
    }
    tmp_right_name_19 = const_str_digest_6c5d9030ff78b2d417d18e1093b4bafb;
    tmp_args_element_name_72 = BINARY_OPERATION_ADD( tmp_left_name_19, tmp_right_name_19 );
    Py_DECREF( tmp_left_name_19 );
    if ( tmp_args_element_name_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_73 );

        exception_lineno = 1327;
        goto try_except_handler_16;
    }
    frame_function->f_lineno = 1327;
    {
        PyObject *call_args[] = { tmp_args_element_name_72 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_73, call_args );
    }

    Py_DECREF( tmp_called_name_73 );
    Py_DECREF( tmp_args_element_name_72 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1327;
        goto try_except_handler_16;
    }
    Py_DECREF( tmp_unused );
    tmp_sliceslicedel_index_lower_5 = 72;
    tmp_slice_index_upper_5 = PY_SSIZE_T_MAX;
    tmp_slice_source_5 = var_l;

    tmp_assign_source_101 = LOOKUP_INDEX_SLICE( tmp_slice_source_5, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_assign_source_101 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1328;
        goto try_except_handler_16;
    }
    {
        PyObject *old = var_l;
        assert( old != NULL );
        var_l = tmp_assign_source_101;
        Py_DECREF( old );
    }

    loop_start_13:;
    tmp_len_arg_3 = var_l;

    if ( tmp_len_arg_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "l" );
        exception_tb = NULL;

        exception_lineno = 1329;
        goto try_except_handler_16;
    }

    tmp_compare_left_17 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_compare_left_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1329;
        goto try_except_handler_16;
    }
    tmp_compare_right_17 = const_int_pos_66;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_17, tmp_compare_right_17 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_17 );

        exception_lineno = 1329;
        goto try_except_handler_16;
    }
    Py_DECREF( tmp_compare_left_17 );
    if ( tmp_cmp_Gt_1 == 1 )
    {
        goto branch_no_29;
    }
    else
    {
        goto branch_yes_29;
    }
    branch_yes_29:;
    goto loop_end_13;
    branch_no_29:;
    tmp_source_name_77 = var_lines;

    tmp_called_name_74 = LOOKUP_ATTRIBUTE( tmp_source_name_77, const_str_plain_append );
    if ( tmp_called_name_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1330;
        goto try_except_handler_16;
    }
    tmp_sliceslicedel_index_lower_6 = 0;
    tmp_slice_index_upper_6 = 66;
    tmp_slice_source_6 = var_l;

    if ( tmp_slice_source_6 == NULL )
    {
        Py_DECREF( tmp_called_name_74 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "l" );
        exception_tb = NULL;

        exception_lineno = 1330;
        goto try_except_handler_16;
    }

    tmp_left_name_20 = LOOKUP_INDEX_SLICE( tmp_slice_source_6, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    if ( tmp_left_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_74 );

        exception_lineno = 1330;
        goto try_except_handler_16;
    }
    tmp_right_name_20 = const_str_digest_6c5d9030ff78b2d417d18e1093b4bafb;
    tmp_args_element_name_73 = BINARY_OPERATION_ADD( tmp_left_name_20, tmp_right_name_20 );
    Py_DECREF( tmp_left_name_20 );
    if ( tmp_args_element_name_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_74 );

        exception_lineno = 1330;
        goto try_except_handler_16;
    }
    frame_function->f_lineno = 1330;
    {
        PyObject *call_args[] = { tmp_args_element_name_73 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_74, call_args );
    }

    Py_DECREF( tmp_called_name_74 );
    Py_DECREF( tmp_args_element_name_73 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1330;
        goto try_except_handler_16;
    }
    Py_DECREF( tmp_unused );
    tmp_sliceslicedel_index_lower_7 = 66;
    tmp_slice_index_upper_7 = PY_SSIZE_T_MAX;
    tmp_slice_source_7 = var_l;

    if ( tmp_slice_source_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "l" );
        exception_tb = NULL;

        exception_lineno = 1331;
        goto try_except_handler_16;
    }

    tmp_assign_source_102 = LOOKUP_INDEX_SLICE( tmp_slice_source_7, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    if ( tmp_assign_source_102 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1331;
        goto try_except_handler_16;
    }
    {
        PyObject *old = var_l;
        var_l = tmp_assign_source_102;
        Py_XDECREF( old );
    }

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1329;
        goto try_except_handler_16;
    }
    goto loop_start_13;
    loop_end_13:;
    tmp_source_name_78 = var_lines;

    tmp_called_name_75 = LOOKUP_ATTRIBUTE( tmp_source_name_78, const_str_plain_append );
    if ( tmp_called_name_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1332;
        goto try_except_handler_16;
    }
    tmp_left_name_21 = var_l;

    if ( tmp_left_name_21 == NULL )
    {
        Py_DECREF( tmp_called_name_75 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "l" );
        exception_tb = NULL;

        exception_lineno = 1332;
        goto try_except_handler_16;
    }

    tmp_right_name_21 = const_str_newline;
    tmp_args_element_name_74 = BINARY_OPERATION_ADD( tmp_left_name_21, tmp_right_name_21 );
    if ( tmp_args_element_name_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_75 );

        exception_lineno = 1332;
        goto try_except_handler_16;
    }
    frame_function->f_lineno = 1332;
    {
        PyObject *call_args[] = { tmp_args_element_name_74 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_75, call_args );
    }

    Py_DECREF( tmp_called_name_75 );
    Py_DECREF( tmp_args_element_name_74 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1332;
        goto try_except_handler_16;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_28;
    branch_no_28:;
    tmp_source_name_79 = var_lines;

    tmp_called_name_76 = LOOKUP_ATTRIBUTE( tmp_source_name_79, const_str_plain_append );
    if ( tmp_called_name_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1334;
        goto try_except_handler_16;
    }
    tmp_left_name_22 = var_l;

    tmp_right_name_22 = const_str_newline;
    tmp_args_element_name_75 = BINARY_OPERATION_ADD( tmp_left_name_22, tmp_right_name_22 );
    if ( tmp_args_element_name_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_76 );

        exception_lineno = 1334;
        goto try_except_handler_16;
    }
    frame_function->f_lineno = 1334;
    {
        PyObject *call_args[] = { tmp_args_element_name_75 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_76, call_args );
    }

    Py_DECREF( tmp_called_name_76 );
    Py_DECREF( tmp_args_element_name_75 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1334;
        goto try_except_handler_16;
    }
    Py_DECREF( tmp_unused );
    branch_end_28:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1325;
        goto try_except_handler_16;
    }
    goto loop_start_12;
    loop_end_12:;
    goto try_end_15;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_11__iter_value );
    tmp_for_loop_11__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_11__for_iterator );
    Py_DECREF( tmp_for_loop_11__for_iterator );
    tmp_for_loop_11__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    Py_XDECREF( tmp_for_loop_11__iter_value );
    tmp_for_loop_11__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_11__for_iterator );
    Py_DECREF( tmp_for_loop_11__for_iterator );
    tmp_for_loop_11__for_iterator = NULL;

    tmp_source_name_81 = const_str_empty;
    tmp_called_name_78 = LOOKUP_ATTRIBUTE( tmp_source_name_81, const_str_plain_join );
    assert( tmp_called_name_78 != NULL );
    tmp_args_element_name_76 = var_lines;

    frame_function->f_lineno = 1335;
    {
        PyObject *call_args[] = { tmp_args_element_name_76 };
        tmp_source_name_80 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_78, call_args );
    }

    Py_DECREF( tmp_called_name_78 );
    if ( tmp_source_name_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1335;
        goto frame_exception_exit_1;
    }
    tmp_called_name_77 = LOOKUP_ATTRIBUTE( tmp_source_name_80, const_str_plain_replace );
    Py_DECREF( tmp_source_name_80 );
    if ( tmp_called_name_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1335;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1335;
    tmp_assign_source_103 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_77, &PyTuple_GET_ITEM( const_tuple_str_digest_ae2f2b951c1c5b9ca49bec8c509fa575_str_newline_tuple, 0 ) );

    Py_DECREF( tmp_called_name_77 );
    if ( tmp_assign_source_103 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1335;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_lines;
        assert( old != NULL );
        var_lines = tmp_assign_source_103;
        Py_DECREF( old );
    }

    tmp_source_name_82 = var_f;

    tmp_called_name_79 = LOOKUP_ATTRIBUTE( tmp_source_name_82, const_str_plain_write );
    if ( tmp_called_name_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1336;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_77 = var_lines;

    frame_function->f_lineno = 1336;
    {
        PyObject *call_args[] = { tmp_args_element_name_77 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_79, call_args );
    }

    Py_DECREF( tmp_called_name_79 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1336;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_83 = var_f;

    tmp_called_name_80 = LOOKUP_ATTRIBUTE( tmp_source_name_83, const_str_plain_close );
    if ( tmp_called_name_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1337;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1337;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_80 );
    Py_DECREF( tmp_called_name_80 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1337;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_81 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_name_81 == NULL ))
    {
        tmp_called_name_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_name_81 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "outmess" );
        exception_tb = NULL;

        exception_lineno = 1338;
        goto frame_exception_exit_1;
    }

    tmp_left_name_23 = const_str_digest_44d06b0ec49d7cbf872e01bc77a777d5;
    tmp_right_name_23 = var_wn;

    tmp_args_element_name_78 = BINARY_OPERATION_REMAINDER( tmp_left_name_23, tmp_right_name_23 );
    if ( tmp_args_element_name_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1338;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1338;
    {
        PyObject *call_args[] = { tmp_args_element_name_78 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_81, call_args );
    }

    Py_DECREF( tmp_args_element_name_78 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1338;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_27:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_m )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_m,
                    par_m
                );

                assert( res == 0 );
            }

            if ( par_um )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_um,
                    par_um
                );

                assert( res == 0 );
            }

            if ( var_ret )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_ret,
                    var_ret
                );

                assert( res == 0 );
            }

            if ( var_mod_rules )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_mod_rules,
                    var_mod_rules
                );

                assert( res == 0 );
            }

            if ( var_vrd )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_vrd,
                    var_vrd
                );

                assert( res == 0 );
            }

            if ( var_rd )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rd,
                    var_rd
                );

                assert( res == 0 );
            }

            if ( var_funcwrappers )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_funcwrappers,
                    var_funcwrappers
                );

                assert( res == 0 );
            }

            if ( var_funcwrappers2 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_funcwrappers2,
                    var_funcwrappers2
                );

                assert( res == 0 );
            }

            if ( var_n )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_n,
                    var_n
                );

                assert( res == 0 );
            }

            if ( var_nb )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_nb,
                    var_nb
                );

                assert( res == 0 );
            }

            if ( var_bi )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_bi,
                    var_bi
                );

                assert( res == 0 );
            }

            if ( var_b )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_b,
                    var_b
                );

                assert( res == 0 );
            }

            if ( var_nb_list )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_nb_list,
                    var_nb_list
                );

                assert( res == 0 );
            }

            if ( var_k )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_k,
                    var_k
                );

                assert( res == 0 );
            }

            if ( var_a )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_a,
                    var_a
                );

                assert( res == 0 );
            }

            if ( var_nb1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_nb1,
                    var_nb1
                );

                assert( res == 0 );
            }

            if ( var_api )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_api,
                    var_api
                );

                assert( res == 0 );
            }

            if ( var_wrap )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_wrap,
                    var_wrap
                );

                assert( res == 0 );
            }

            if ( var_ar )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_ar,
                    var_ar
                );

                assert( res == 0 );
            }

            if ( var_cr )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_cr,
                    var_cr
                );

                assert( res == 0 );
            }

            if ( var_mr )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_mr,
                    var_mr
                );

                assert( res == 0 );
            }

            if ( var_u )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_u,
                    var_u
                );

                assert( res == 0 );
            }

            if ( var_needs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_needs,
                    var_needs
                );

                assert( res == 0 );
            }

            if ( var_code )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_code,
                    var_code
                );

                assert( res == 0 );
            }

            if ( var_c )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_c,
                    var_c
                );

                assert( res == 0 );
            }

            if ( var_r )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r,
                    var_r
                );

                assert( res == 0 );
            }

            if ( var_fn )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fn,
                    var_fn
                );

                assert( res == 0 );
            }

            if ( var_f )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_f,
                    var_f
                );

                assert( res == 0 );
            }

            if ( var_wn )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_wn,
                    var_wn
                );

                assert( res == 0 );
            }

            if ( var_lines )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_lines,
                    var_lines
                );

                assert( res == 0 );
            }

            if ( var_l )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_l,
                    var_l
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = var_ret;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_1_buildmodule_of_numpy$f2py$rules );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_m );
    Py_DECREF( par_m );
    par_m = NULL;

    CHECK_OBJECT( (PyObject *)par_um );
    Py_DECREF( par_um );
    par_um = NULL;

    CHECK_OBJECT( (PyObject *)var_ret );
    Py_DECREF( var_ret );
    var_ret = NULL;

    CHECK_OBJECT( (PyObject *)var_mod_rules );
    Py_DECREF( var_mod_rules );
    var_mod_rules = NULL;

    CHECK_OBJECT( (PyObject *)var_vrd );
    Py_DECREF( var_vrd );
    var_vrd = NULL;

    Py_XDECREF( var_rd );
    var_rd = NULL;

    CHECK_OBJECT( (PyObject *)var_funcwrappers );
    Py_DECREF( var_funcwrappers );
    var_funcwrappers = NULL;

    CHECK_OBJECT( (PyObject *)var_funcwrappers2 );
    Py_DECREF( var_funcwrappers2 );
    var_funcwrappers2 = NULL;

    Py_XDECREF( var_n );
    var_n = NULL;

    Py_XDECREF( var_nb );
    var_nb = NULL;

    Py_XDECREF( var_bi );
    var_bi = NULL;

    Py_XDECREF( var_b );
    var_b = NULL;

    Py_XDECREF( var_nb_list );
    var_nb_list = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_a );
    var_a = NULL;

    Py_XDECREF( var_nb1 );
    var_nb1 = NULL;

    Py_XDECREF( var_api );
    var_api = NULL;

    CHECK_OBJECT( (PyObject *)var_wrap );
    Py_DECREF( var_wrap );
    var_wrap = NULL;

    CHECK_OBJECT( (PyObject *)var_ar );
    Py_DECREF( var_ar );
    var_ar = NULL;

    CHECK_OBJECT( (PyObject *)var_cr );
    Py_DECREF( var_cr );
    var_cr = NULL;

    CHECK_OBJECT( (PyObject *)var_mr );
    Py_DECREF( var_mr );
    var_mr = NULL;

    Py_XDECREF( var_u );
    var_u = NULL;

    CHECK_OBJECT( (PyObject *)var_needs );
    Py_DECREF( var_needs );
    var_needs = NULL;

    CHECK_OBJECT( (PyObject *)var_code );
    Py_DECREF( var_code );
    var_code = NULL;

    Py_XDECREF( var_c );
    var_c = NULL;

    Py_XDECREF( var_r );
    var_r = NULL;

    Py_XDECREF( var_fn );
    var_fn = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_wn );
    var_wn = NULL;

    Py_XDECREF( var_lines );
    var_lines = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_m );
    Py_DECREF( par_m );
    par_m = NULL;

    CHECK_OBJECT( (PyObject *)par_um );
    Py_DECREF( par_um );
    par_um = NULL;

    Py_XDECREF( var_ret );
    var_ret = NULL;

    Py_XDECREF( var_mod_rules );
    var_mod_rules = NULL;

    Py_XDECREF( var_vrd );
    var_vrd = NULL;

    Py_XDECREF( var_rd );
    var_rd = NULL;

    Py_XDECREF( var_funcwrappers );
    var_funcwrappers = NULL;

    Py_XDECREF( var_funcwrappers2 );
    var_funcwrappers2 = NULL;

    Py_XDECREF( var_n );
    var_n = NULL;

    Py_XDECREF( var_nb );
    var_nb = NULL;

    Py_XDECREF( var_bi );
    var_bi = NULL;

    Py_XDECREF( var_b );
    var_b = NULL;

    Py_XDECREF( var_nb_list );
    var_nb_list = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_a );
    var_a = NULL;

    Py_XDECREF( var_nb1 );
    var_nb1 = NULL;

    Py_XDECREF( var_api );
    var_api = NULL;

    Py_XDECREF( var_wrap );
    var_wrap = NULL;

    Py_XDECREF( var_ar );
    var_ar = NULL;

    Py_XDECREF( var_cr );
    var_cr = NULL;

    Py_XDECREF( var_mr );
    var_mr = NULL;

    Py_XDECREF( var_u );
    var_u = NULL;

    Py_XDECREF( var_needs );
    var_needs = NULL;

    Py_XDECREF( var_code );
    var_code = NULL;

    Py_XDECREF( var_c );
    var_c = NULL;

    Py_XDECREF( var_r );
    var_r = NULL;

    Py_XDECREF( var_fn );
    var_fn = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_wn );
    var_wn = NULL;

    Py_XDECREF( var_lines );
    var_lines = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_1_buildmodule_of_numpy$f2py$rules );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_2_buildapi_of_numpy$f2py$rules( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_rout = python_pars[ 0 ];
    PyObject *var_wrap = NULL;
    PyObject *var_args = NULL;
    PyObject *var_depargs = NULL;
    PyObject *var_var = NULL;
    PyObject *var_vrd = NULL;
    PyObject *var_rd = NULL;
    PyObject *var_r = NULL;
    PyObject *var_ar = NULL;
    PyObject *var_nth = NULL;
    PyObject *var_nthk = NULL;
    PyObject *var_savevrd = NULL;
    PyObject *var_a = NULL;
    PyObject *var__rules = NULL;
    PyObject *var_c = NULL;
    PyObject *var_optargs = NULL;
    PyObject *var_cfs = NULL;
    PyObject *var_k = NULL;
    PyObject *var_argformat = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *tmp_for_loop_6__for_iterator = NULL;
    PyObject *tmp_for_loop_6__iter_value = NULL;
    PyObject *tmp_for_loop_7__for_iterator = NULL;
    PyObject *tmp_for_loop_7__iter_value = NULL;
    PyObject *tmp_inplace_assign_subscr_1__target = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    int tmp_and_left_truth_3;
    int tmp_and_left_truth_4;
    int tmp_and_left_truth_5;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_left_value_3;
    PyObject *tmp_and_left_value_4;
    PyObject *tmp_and_left_value_5;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_and_right_value_3;
    PyObject *tmp_and_right_value_4;
    PyObject *tmp_and_right_value_5;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_args_element_name_47;
    PyObject *tmp_args_element_name_48;
    PyObject *tmp_args_element_name_49;
    PyObject *tmp_args_element_name_50;
    PyObject *tmp_args_element_name_51;
    PyObject *tmp_args_element_name_52;
    PyObject *tmp_args_element_name_53;
    PyObject *tmp_args_element_name_54;
    PyObject *tmp_args_element_name_55;
    PyObject *tmp_args_element_name_56;
    PyObject *tmp_args_element_name_57;
    PyObject *tmp_args_element_name_58;
    PyObject *tmp_args_element_name_59;
    PyObject *tmp_args_element_name_60;
    PyObject *tmp_args_element_name_61;
    PyObject *tmp_args_element_name_62;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscribed_2;
    PyObject *tmp_ass_subscribed_3;
    PyObject *tmp_ass_subscribed_4;
    PyObject *tmp_ass_subscribed_5;
    PyObject *tmp_ass_subscribed_6;
    PyObject *tmp_ass_subscribed_7;
    PyObject *tmp_ass_subscribed_8;
    PyObject *tmp_ass_subscribed_9;
    PyObject *tmp_ass_subscribed_10;
    PyObject *tmp_ass_subscribed_11;
    PyObject *tmp_ass_subscribed_12;
    PyObject *tmp_ass_subscribed_13;
    PyObject *tmp_ass_subscribed_14;
    PyObject *tmp_ass_subscribed_15;
    PyObject *tmp_ass_subscribed_16;
    PyObject *tmp_ass_subscribed_17;
    PyObject *tmp_ass_subscribed_18;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subscript_2;
    PyObject *tmp_ass_subscript_3;
    PyObject *tmp_ass_subscript_4;
    PyObject *tmp_ass_subscript_5;
    PyObject *tmp_ass_subscript_6;
    PyObject *tmp_ass_subscript_7;
    PyObject *tmp_ass_subscript_8;
    PyObject *tmp_ass_subscript_9;
    PyObject *tmp_ass_subscript_10;
    PyObject *tmp_ass_subscript_11;
    PyObject *tmp_ass_subscript_12;
    PyObject *tmp_ass_subscript_13;
    PyObject *tmp_ass_subscript_14;
    PyObject *tmp_ass_subscript_15;
    PyObject *tmp_ass_subscript_16;
    PyObject *tmp_ass_subscript_17;
    PyObject *tmp_ass_subscript_18;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_ass_subvalue_2;
    PyObject *tmp_ass_subvalue_3;
    PyObject *tmp_ass_subvalue_4;
    PyObject *tmp_ass_subvalue_5;
    PyObject *tmp_ass_subvalue_6;
    PyObject *tmp_ass_subvalue_7;
    PyObject *tmp_ass_subvalue_8;
    PyObject *tmp_ass_subvalue_9;
    PyObject *tmp_ass_subvalue_10;
    PyObject *tmp_ass_subvalue_11;
    PyObject *tmp_ass_subvalue_12;
    PyObject *tmp_ass_subvalue_13;
    PyObject *tmp_ass_subvalue_14;
    PyObject *tmp_ass_subvalue_15;
    PyObject *tmp_ass_subvalue_16;
    PyObject *tmp_ass_subvalue_17;
    PyObject *tmp_ass_subvalue_18;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_called_name_45;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Gt_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_left_7;
    PyObject *tmp_compexpr_left_8;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    PyObject *tmp_compexpr_right_7;
    PyObject *tmp_compexpr_right_8;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_key_12;
    PyObject *tmp_dict_key_13;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dict_value_12;
    PyObject *tmp_dict_value_13;
    PyObject *tmp_dictset_dict;
    PyObject *tmp_dictset_key;
    PyObject *tmp_dictset_value;
    PyObject *tmp_frame_locals;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_cls_4;
    PyObject *tmp_isinstance_cls_5;
    PyObject *tmp_isinstance_cls_6;
    PyObject *tmp_isinstance_cls_7;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    PyObject *tmp_isinstance_inst_4;
    PyObject *tmp_isinstance_inst_5;
    PyObject *tmp_isinstance_inst_6;
    PyObject *tmp_isinstance_inst_7;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iter_arg_8;
    PyObject *tmp_iter_arg_9;
    PyObject *tmp_iter_arg_10;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_iterator_name_3;
    PyObject *tmp_key_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_left_name_6;
    PyObject *tmp_left_name_7;
    PyObject *tmp_left_name_8;
    PyObject *tmp_left_name_9;
    PyObject *tmp_left_name_10;
    PyObject *tmp_left_name_11;
    PyObject *tmp_left_name_12;
    PyObject *tmp_left_name_13;
    PyObject *tmp_left_name_14;
    PyObject *tmp_left_name_15;
    PyObject *tmp_left_name_16;
    PyObject *tmp_left_name_17;
    PyObject *tmp_left_name_18;
    PyObject *tmp_left_name_19;
    PyObject *tmp_left_name_20;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_next_source_7;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    int tmp_or_left_truth_3;
    int tmp_or_left_truth_4;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_left_value_3;
    PyObject *tmp_or_left_value_4;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_or_right_value_3;
    PyObject *tmp_or_right_value_4;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_value_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_right_name_6;
    PyObject *tmp_right_name_7;
    PyObject *tmp_right_name_8;
    PyObject *tmp_right_name_9;
    PyObject *tmp_right_name_10;
    PyObject *tmp_right_name_11;
    PyObject *tmp_right_name_12;
    PyObject *tmp_right_name_13;
    PyObject *tmp_right_name_14;
    PyObject *tmp_right_name_15;
    PyObject *tmp_right_name_16;
    PyObject *tmp_right_name_17;
    PyObject *tmp_right_name_18;
    PyObject *tmp_right_name_19;
    PyObject *tmp_right_name_20;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscribed_name_7;
    PyObject *tmp_subscribed_name_8;
    PyObject *tmp_subscribed_name_9;
    PyObject *tmp_subscribed_name_10;
    PyObject *tmp_subscribed_name_11;
    PyObject *tmp_subscribed_name_12;
    PyObject *tmp_subscribed_name_13;
    PyObject *tmp_subscribed_name_14;
    PyObject *tmp_subscribed_name_15;
    PyObject *tmp_subscribed_name_16;
    PyObject *tmp_subscribed_name_17;
    PyObject *tmp_subscribed_name_18;
    PyObject *tmp_subscribed_name_19;
    PyObject *tmp_subscribed_name_20;
    PyObject *tmp_subscribed_name_21;
    PyObject *tmp_subscribed_name_22;
    PyObject *tmp_subscribed_name_23;
    PyObject *tmp_subscribed_name_24;
    PyObject *tmp_subscribed_name_25;
    PyObject *tmp_subscribed_name_26;
    PyObject *tmp_subscribed_name_27;
    PyObject *tmp_subscribed_name_28;
    PyObject *tmp_subscribed_name_29;
    PyObject *tmp_subscribed_name_30;
    PyObject *tmp_subscribed_name_31;
    PyObject *tmp_subscribed_name_32;
    PyObject *tmp_subscribed_name_33;
    PyObject *tmp_subscribed_name_34;
    PyObject *tmp_subscribed_name_35;
    PyObject *tmp_subscribed_name_36;
    PyObject *tmp_subscribed_name_37;
    PyObject *tmp_subscribed_name_38;
    PyObject *tmp_subscribed_name_39;
    PyObject *tmp_subscribed_name_40;
    PyObject *tmp_subscribed_name_41;
    PyObject *tmp_subscribed_name_42;
    PyObject *tmp_subscribed_name_43;
    PyObject *tmp_subscribed_name_44;
    PyObject *tmp_subscribed_name_45;
    PyObject *tmp_subscribed_name_46;
    PyObject *tmp_subscribed_name_47;
    PyObject *tmp_subscribed_name_48;
    PyObject *tmp_subscribed_name_49;
    PyObject *tmp_subscribed_name_50;
    PyObject *tmp_subscribed_name_51;
    PyObject *tmp_subscribed_name_52;
    PyObject *tmp_subscribed_name_53;
    PyObject *tmp_subscribed_name_54;
    PyObject *tmp_subscribed_name_55;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_subscript_name_7;
    PyObject *tmp_subscript_name_8;
    PyObject *tmp_subscript_name_9;
    PyObject *tmp_subscript_name_10;
    PyObject *tmp_subscript_name_11;
    PyObject *tmp_subscript_name_12;
    PyObject *tmp_subscript_name_13;
    PyObject *tmp_subscript_name_14;
    PyObject *tmp_subscript_name_15;
    PyObject *tmp_subscript_name_16;
    PyObject *tmp_subscript_name_17;
    PyObject *tmp_subscript_name_18;
    PyObject *tmp_subscript_name_19;
    PyObject *tmp_subscript_name_20;
    PyObject *tmp_subscript_name_21;
    PyObject *tmp_subscript_name_22;
    PyObject *tmp_subscript_name_23;
    PyObject *tmp_subscript_name_24;
    PyObject *tmp_subscript_name_25;
    PyObject *tmp_subscript_name_26;
    PyObject *tmp_subscript_name_27;
    PyObject *tmp_subscript_name_28;
    PyObject *tmp_subscript_name_29;
    PyObject *tmp_subscript_name_30;
    PyObject *tmp_subscript_name_31;
    PyObject *tmp_subscript_name_32;
    PyObject *tmp_subscript_name_33;
    PyObject *tmp_subscript_name_34;
    PyObject *tmp_subscript_name_35;
    PyObject *tmp_subscript_name_36;
    PyObject *tmp_subscript_name_37;
    PyObject *tmp_subscript_name_38;
    PyObject *tmp_subscript_name_39;
    PyObject *tmp_subscript_name_40;
    PyObject *tmp_subscript_name_41;
    PyObject *tmp_subscript_name_42;
    PyObject *tmp_subscript_name_43;
    PyObject *tmp_subscript_name_44;
    PyObject *tmp_subscript_name_45;
    PyObject *tmp_subscript_name_46;
    PyObject *tmp_subscript_name_47;
    PyObject *tmp_subscript_name_48;
    PyObject *tmp_subscript_name_49;
    PyObject *tmp_subscript_name_50;
    PyObject *tmp_subscript_name_51;
    PyObject *tmp_subscript_name_52;
    PyObject *tmp_subscript_name_53;
    PyObject *tmp_subscript_name_54;
    PyObject *tmp_subscript_name_55;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    PyObject *tmp_unpack_5;
    PyObject *tmp_unpack_6;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ef916f58685472fc8f7752eb8173bddc, module_numpy$f2py$rules );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_func2subr );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_func2subr );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "func2subr" );
        exception_tb = NULL;

        exception_lineno = 1348;
        goto try_except_handler_2;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_assubr );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1348;
        goto try_except_handler_2;
    }
    tmp_args_element_name_1 = par_rout;

    frame_function->f_lineno = 1348;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1348;
        goto try_except_handler_2;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1348;
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1348;
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1348;
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_2;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_2;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    tmp_assign_source_4 = tmp_tuple_unpack_1__element_1;

    {
        PyObject *old = par_rout;
        assert( old != NULL );
        par_rout = tmp_assign_source_4;
        Py_INCREF( par_rout );
        Py_DECREF( old );
    }

    tmp_assign_source_5 = tmp_tuple_unpack_1__element_2;

    assert( var_wrap == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var_wrap = tmp_assign_source_5;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__element_1 );
    Py_DECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__element_2 );
    Py_DECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Tried code:
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_getargs2 );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_getargs2 );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "getargs2" );
        exception_tb = NULL;

        exception_lineno = 1349;
        goto try_except_handler_3;
    }

    tmp_args_element_name_2 = par_rout;

    frame_function->f_lineno = 1349;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1349;
        goto try_except_handler_3;
    }
    tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1349;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_2__source_iter == NULL );
    tmp_tuple_unpack_2__source_iter = tmp_assign_source_6;

    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_3, 0 );
    if ( tmp_assign_source_7 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1349;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_2__element_1 == NULL );
    tmp_tuple_unpack_2__element_1 = tmp_assign_source_7;

    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_4, 1 );
    if ( tmp_assign_source_8 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1349;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_2__element_2 == NULL );
    tmp_tuple_unpack_2__element_2 = tmp_assign_source_8;

    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_3;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    tmp_assign_source_9 = tmp_tuple_unpack_2__element_1;

    assert( var_args == NULL );
    Py_INCREF( tmp_assign_source_9 );
    var_args = tmp_assign_source_9;

    tmp_assign_source_10 = tmp_tuple_unpack_2__element_2;

    assert( var_depargs == NULL );
    Py_INCREF( tmp_assign_source_10 );
    var_depargs = tmp_assign_source_10;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__element_1 );
    Py_DECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__element_2 );
    Py_DECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    tmp_assattr_name_1 = var_depargs;

    tmp_assattr_target_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_capi_maps );

    if (unlikely( tmp_assattr_target_1 == NULL ))
    {
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_capi_maps );
    }

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "capi_maps" );
        exception_tb = NULL;

        exception_lineno = 1350;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_depargs, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1350;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_1 = par_rout;

    tmp_subscript_name_1 = const_str_plain_vars;
    tmp_assign_source_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1351;
        goto frame_exception_exit_1;
    }
    assert( var_var == NULL );
    var_var = tmp_assign_source_11;

    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 1353;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = par_rout;

    frame_function->f_lineno = 1353;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1353;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 1353;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "outmess" );
        exception_tb = NULL;

        exception_lineno = 1354;
        goto frame_exception_exit_1;
    }

    tmp_left_name_1 = const_str_digest_cc8aef51ccd568f750b3cc95ee24cb9e;
    tmp_right_name_1 = PyTuple_New( 2 );
    tmp_subscribed_name_2 = par_rout;

    tmp_subscript_name_2 = const_str_plain_modulename;
    tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_1 );

        exception_lineno = 1355;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
    tmp_subscribed_name_3 = par_rout;

    tmp_subscript_name_3 = const_str_plain_name;
    tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_1 );

        exception_lineno = 1355;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
    tmp_args_element_name_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1354;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1355;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1355;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_1;
    branch_no_1:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "outmess" );
        exception_tb = NULL;

        exception_lineno = 1357;
        goto frame_exception_exit_1;
    }

    tmp_left_name_2 = const_str_digest_c766b4789856a6ba99bed500bbe3da6b;
    tmp_subscribed_name_4 = par_rout;

    tmp_subscript_name_4 = const_str_plain_name;
    tmp_right_name_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_right_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1357;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
    Py_DECREF( tmp_right_name_2 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1357;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1357;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1357;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_1:;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_capi_maps );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_capi_maps );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "capi_maps" );
        exception_tb = NULL;

        exception_lineno = 1359;
        goto frame_exception_exit_1;
    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_routsign2map );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1359;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = par_rout;

    frame_function->f_lineno = 1359;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_assign_source_12 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_called_name_6 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1359;
        goto frame_exception_exit_1;
    }
    assert( var_vrd == NULL );
    var_vrd = tmp_assign_source_12;

    tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_name_7 == NULL ))
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_name_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "dictappend" );
        exception_tb = NULL;

        exception_lineno = 1360;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = PyDict_New();
    tmp_args_element_name_8 = var_vrd;

    frame_function->f_lineno = 1360;
    {
        PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8 };
        tmp_assign_source_13 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1360;
        goto frame_exception_exit_1;
    }
    assert( var_rd == NULL );
    var_rd = tmp_assign_source_13;

    tmp_iter_arg_3 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_rout_rules );

    if (unlikely( tmp_iter_arg_3 == NULL ))
    {
        tmp_iter_arg_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_rout_rules );
    }

    if ( tmp_iter_arg_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "rout_rules" );
        exception_tb = NULL;

        exception_lineno = 1361;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_14 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1361;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_14;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_15 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_15 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1361;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_15;
        Py_XDECREF( old );
    }

    tmp_assign_source_16 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_r;
        var_r = tmp_assign_source_16;
        Py_INCREF( var_r );
        Py_XDECREF( old );
    }

    tmp_compexpr_left_1 = const_str_plain__check;
    tmp_compexpr_right_1 = var_r;

    tmp_and_left_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1362;
        goto try_except_handler_4;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    assert( !(tmp_and_left_truth_1 == -1) );
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_subscribed_name_5 = var_r;

    tmp_subscript_name_5 = const_str_plain__check;
    tmp_called_name_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1362;
        goto try_except_handler_4;
    }
    tmp_args_element_name_9 = par_rout;

    frame_function->f_lineno = 1362;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_and_right_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1362;
        goto try_except_handler_4;
    }
    tmp_or_left_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    Py_INCREF( tmp_and_left_value_1 );
    tmp_or_left_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_1 );

        exception_lineno = 1362;
        goto try_except_handler_4;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    Py_DECREF( tmp_or_left_value_1 );
    tmp_compexpr_left_2 = const_str_plain__check;
    tmp_compexpr_right_2 = var_r;

    tmp_or_right_value_1 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1362;
        goto try_except_handler_4;
    }
    Py_INCREF( tmp_or_right_value_1 );
    tmp_cond_value_2 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_2 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 1362;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_name_9 == NULL ))
    {
        tmp_called_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_name_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "applyrules" );
        exception_tb = NULL;

        exception_lineno = 1363;
        goto try_except_handler_4;
    }

    tmp_args_element_name_10 = var_r;

    tmp_args_element_name_11 = var_vrd;

    tmp_args_element_name_12 = par_rout;

    frame_function->f_lineno = 1363;
    {
        PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 };
        tmp_assign_source_17 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, call_args );
    }

    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1363;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_ar;
        var_ar = tmp_assign_source_17;
        Py_XDECREF( old );
    }

    tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_name_10 == NULL ))
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_name_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "dictappend" );
        exception_tb = NULL;

        exception_lineno = 1364;
        goto try_except_handler_4;
    }

    tmp_args_element_name_13 = var_rd;

    if ( tmp_args_element_name_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1364;
        goto try_except_handler_4;
    }

    tmp_args_element_name_14 = var_ar;

    frame_function->f_lineno = 1364;
    {
        PyObject *call_args[] = { tmp_args_element_name_13, tmp_args_element_name_14 };
        tmp_assign_source_18 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, call_args );
    }

    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1364;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rd;
        var_rd = tmp_assign_source_18;
        Py_XDECREF( old );
    }

    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1361;
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_iter_arg_4 = const_tuple_int_0_int_0_tuple;
    tmp_assign_source_19 = MAKE_ITERATOR( tmp_iter_arg_4 );
    assert( tmp_assign_source_19 != NULL );
    assert( tmp_tuple_unpack_3__source_iter == NULL );
    tmp_tuple_unpack_3__source_iter = tmp_assign_source_19;

    // Tried code:
    tmp_unpack_5 = tmp_tuple_unpack_3__source_iter;

    tmp_assign_source_20 = UNPACK_NEXT( tmp_unpack_5, 0 );
    if ( tmp_assign_source_20 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1367;
        goto try_except_handler_5;
    }
    assert( tmp_tuple_unpack_3__element_1 == NULL );
    tmp_tuple_unpack_3__element_1 = tmp_assign_source_20;

    tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;

    tmp_assign_source_21 = UNPACK_NEXT( tmp_unpack_6, 1 );
    if ( tmp_assign_source_21 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1367;
        goto try_except_handler_5;
    }
    assert( tmp_tuple_unpack_3__element_2 == NULL );
    tmp_tuple_unpack_3__element_2 = tmp_assign_source_21;

    tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_5;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_5;
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
    Py_DECREF( tmp_tuple_unpack_3__source_iter );
    tmp_tuple_unpack_3__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_1 );
    tmp_tuple_unpack_3__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_2 );
    tmp_tuple_unpack_3__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    tmp_assign_source_22 = tmp_tuple_unpack_3__element_1;

    assert( var_nth == NULL );
    Py_INCREF( tmp_assign_source_22 );
    var_nth = tmp_assign_source_22;

    tmp_assign_source_23 = tmp_tuple_unpack_3__element_2;

    assert( var_nthk == NULL );
    Py_INCREF( tmp_assign_source_23 );
    var_nthk = tmp_assign_source_23;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
    Py_DECREF( tmp_tuple_unpack_3__source_iter );
    tmp_tuple_unpack_3__source_iter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__element_1 );
    Py_DECREF( tmp_tuple_unpack_3__element_1 );
    tmp_tuple_unpack_3__element_1 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__element_2 );
    Py_DECREF( tmp_tuple_unpack_3__element_2 );
    tmp_tuple_unpack_3__element_2 = NULL;

    tmp_assign_source_24 = PyDict_New();
    assert( var_savevrd == NULL );
    var_savevrd = tmp_assign_source_24;

    tmp_iter_arg_5 = var_args;

    tmp_assign_source_25 = MAKE_ITERATOR( tmp_iter_arg_5 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1369;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_25;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_26 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_26 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1369;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_26;
        Py_XDECREF( old );
    }

    tmp_assign_source_27 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_a;
        var_a = tmp_assign_source_27;
        Py_INCREF( var_a );
        Py_XDECREF( old );
    }

    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_capi_maps );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_capi_maps );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "capi_maps" );
        exception_tb = NULL;

        exception_lineno = 1370;
        goto try_except_handler_6;
    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_sign2map );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1370;
        goto try_except_handler_6;
    }
    tmp_args_element_name_15 = var_a;

    tmp_subscribed_name_6 = var_var;

    tmp_subscript_name_6 = var_a;

    tmp_args_element_name_16 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 1370;
        goto try_except_handler_6;
    }
    frame_function->f_lineno = 1370;
    {
        PyObject *call_args[] = { tmp_args_element_name_15, tmp_args_element_name_16 };
        tmp_assign_source_28 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_16 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1370;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_vrd;
        var_vrd = tmp_assign_source_28;
        Py_XDECREF( old );
    }

    tmp_called_name_12 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_aux );

    if (unlikely( tmp_called_name_12 == NULL ))
    {
        tmp_called_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_aux );
    }

    if ( tmp_called_name_12 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "isintent_aux" );
        exception_tb = NULL;

        exception_lineno = 1371;
        goto try_except_handler_6;
    }

    tmp_subscribed_name_7 = var_var;

    tmp_subscript_name_7 = var_a;

    tmp_args_element_name_17 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
    if ( tmp_args_element_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1371;
        goto try_except_handler_6;
    }
    frame_function->f_lineno = 1371;
    {
        PyObject *call_args[] = { tmp_args_element_name_17 };
        tmp_cond_value_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
    }

    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1371;
        goto try_except_handler_6;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 1371;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_29 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_aux_rules );

    if (unlikely( tmp_assign_source_29 == NULL ))
    {
        tmp_assign_source_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_aux_rules );
    }

    if ( tmp_assign_source_29 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "aux_rules" );
        exception_tb = NULL;

        exception_lineno = 1372;
        goto try_except_handler_6;
    }

    {
        PyObject *old = var__rules;
        var__rules = tmp_assign_source_29;
        Py_INCREF( var__rules );
        Py_XDECREF( old );
    }

    goto branch_end_3;
    branch_no_3:;
    tmp_assign_source_30 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_arg_rules );

    if (unlikely( tmp_assign_source_30 == NULL ))
    {
        tmp_assign_source_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_arg_rules );
    }

    if ( tmp_assign_source_30 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "arg_rules" );
        exception_tb = NULL;

        exception_lineno = 1374;
        goto try_except_handler_6;
    }

    {
        PyObject *old = var__rules;
        var__rules = tmp_assign_source_30;
        Py_INCREF( var__rules );
        Py_XDECREF( old );
    }

    tmp_called_name_13 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_called_name_13 == NULL ))
    {
        tmp_called_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_called_name_13 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 1375;
        goto try_except_handler_6;
    }

    tmp_subscribed_name_8 = var_var;

    tmp_subscript_name_8 = var_a;

    tmp_args_element_name_18 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
    if ( tmp_args_element_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1375;
        goto try_except_handler_6;
    }
    frame_function->f_lineno = 1375;
    {
        PyObject *call_args[] = { tmp_args_element_name_18 };
        tmp_cond_value_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, call_args );
    }

    Py_DECREF( tmp_args_element_name_18 );
    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1375;
        goto try_except_handler_6;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 1375;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_no_4;
    }
    else
    {
        goto branch_yes_4;
    }
    branch_yes_4:;
    tmp_called_name_14 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_called_name_14 == NULL ))
    {
        tmp_called_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_called_name_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 1376;
        goto try_except_handler_6;
    }

    tmp_subscribed_name_9 = var_var;

    tmp_subscript_name_9 = var_a;

    tmp_args_element_name_19 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_9 );
    if ( tmp_args_element_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1376;
        goto try_except_handler_6;
    }
    frame_function->f_lineno = 1376;
    {
        PyObject *call_args[] = { tmp_args_element_name_19 };
        tmp_cond_value_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, call_args );
    }

    Py_DECREF( tmp_args_element_name_19 );
    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1376;
        goto try_except_handler_6;
    }
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        exception_lineno = 1376;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_no_5;
    }
    else
    {
        goto branch_yes_5;
    }
    branch_yes_5:;
    tmp_left_name_3 = var_nth;

    if ( tmp_left_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "nth" );
        exception_tb = NULL;

        exception_lineno = 1377;
        goto try_except_handler_6;
    }

    tmp_right_name_3 = const_int_pos_1;
    tmp_assign_source_31 = BINARY_OPERATION_ADD( tmp_left_name_3, tmp_right_name_3 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1377;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_nth;
        var_nth = tmp_assign_source_31;
        Py_XDECREF( old );
    }

    tmp_operand_name_1 = var_nth;

    tmp_left_name_5 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_1 );
    if ( tmp_left_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1378;
        goto try_except_handler_6;
    }
    tmp_subscribed_name_10 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stnd );

    if (unlikely( tmp_subscribed_name_10 == NULL ))
    {
        tmp_subscribed_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stnd );
    }

    if ( tmp_subscribed_name_10 == NULL )
    {
        Py_DECREF( tmp_left_name_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "stnd" );
        exception_tb = NULL;

        exception_lineno = 1378;
        goto try_except_handler_6;
    }

    tmp_left_name_6 = var_nth;

    tmp_right_name_5 = const_int_pos_10;
    tmp_subscript_name_10 = BINARY_OPERATION_REMAINDER( tmp_left_name_6, tmp_right_name_5 );
    if ( tmp_subscript_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_5 );

        exception_lineno = 1378;
        goto try_except_handler_6;
    }
    tmp_right_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_10, tmp_subscript_name_10 );
    Py_DECREF( tmp_subscript_name_10 );
    if ( tmp_right_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_5 );

        exception_lineno = 1378;
        goto try_except_handler_6;
    }
    tmp_left_name_4 = BINARY_OPERATION_ADD( tmp_left_name_5, tmp_right_name_4 );
    Py_DECREF( tmp_left_name_5 );
    Py_DECREF( tmp_right_name_4 );
    if ( tmp_left_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1378;
        goto try_except_handler_6;
    }
    tmp_right_name_6 = const_str_digest_4c59686e115e363877096931bfcc9764;
    tmp_ass_subvalue_1 = BINARY_OPERATION_ADD( tmp_left_name_4, tmp_right_name_6 );
    Py_DECREF( tmp_left_name_4 );
    if ( tmp_ass_subvalue_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1378;
        goto try_except_handler_6;
    }
    tmp_ass_subscribed_1 = var_vrd;

    tmp_ass_subscript_1 = const_str_plain_nth;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1378;
        goto try_except_handler_6;
    }
    goto branch_end_5;
    branch_no_5:;
    tmp_left_name_7 = var_nthk;

    if ( tmp_left_name_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "nthk" );
        exception_tb = NULL;

        exception_lineno = 1380;
        goto try_except_handler_6;
    }

    tmp_right_name_7 = const_int_pos_1;
    tmp_assign_source_32 = BINARY_OPERATION_ADD( tmp_left_name_7, tmp_right_name_7 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1380;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_nthk;
        var_nthk = tmp_assign_source_32;
        Py_XDECREF( old );
    }

    tmp_operand_name_2 = var_nthk;

    tmp_left_name_9 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_2 );
    if ( tmp_left_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1381;
        goto try_except_handler_6;
    }
    tmp_subscribed_name_11 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stnd );

    if (unlikely( tmp_subscribed_name_11 == NULL ))
    {
        tmp_subscribed_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stnd );
    }

    if ( tmp_subscribed_name_11 == NULL )
    {
        Py_DECREF( tmp_left_name_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "stnd" );
        exception_tb = NULL;

        exception_lineno = 1381;
        goto try_except_handler_6;
    }

    tmp_left_name_10 = var_nthk;

    tmp_right_name_9 = const_int_pos_10;
    tmp_subscript_name_11 = BINARY_OPERATION_REMAINDER( tmp_left_name_10, tmp_right_name_9 );
    if ( tmp_subscript_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_9 );

        exception_lineno = 1381;
        goto try_except_handler_6;
    }
    tmp_right_name_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_11, tmp_subscript_name_11 );
    Py_DECREF( tmp_subscript_name_11 );
    if ( tmp_right_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_9 );

        exception_lineno = 1381;
        goto try_except_handler_6;
    }
    tmp_left_name_8 = BINARY_OPERATION_ADD( tmp_left_name_9, tmp_right_name_8 );
    Py_DECREF( tmp_left_name_9 );
    Py_DECREF( tmp_right_name_8 );
    if ( tmp_left_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1381;
        goto try_except_handler_6;
    }
    tmp_right_name_10 = const_str_digest_b0e1a5bc6a31e8edcea9b71d04eea040;
    tmp_ass_subvalue_2 = BINARY_OPERATION_ADD( tmp_left_name_8, tmp_right_name_10 );
    Py_DECREF( tmp_left_name_8 );
    if ( tmp_ass_subvalue_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1381;
        goto try_except_handler_6;
    }
    tmp_ass_subscribed_2 = var_vrd;

    tmp_ass_subscript_2 = const_str_plain_nth;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
    Py_DECREF( tmp_ass_subvalue_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1381;
        goto try_except_handler_6;
    }
    branch_end_5:;
    goto branch_end_4;
    branch_no_4:;
    tmp_ass_subvalue_3 = const_str_plain_hidden;
    tmp_ass_subscribed_3 = var_vrd;

    tmp_ass_subscript_3 = const_str_plain_nth;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1383;
        goto try_except_handler_6;
    }
    branch_end_4:;
    branch_end_3:;
    tmp_dictset_value = var_vrd;

    tmp_dictset_dict = var_savevrd;

    tmp_dictset_key = var_a;

    tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1384;
        goto try_except_handler_6;
    }
    tmp_iter_arg_6 = var__rules;

    tmp_assign_source_33 = MAKE_ITERATOR( tmp_iter_arg_6 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1385;
        goto try_except_handler_6;
    }
    {
        PyObject *old = tmp_for_loop_3__for_iterator;
        tmp_for_loop_3__for_iterator = tmp_assign_source_33;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_34 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_34 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1385;
            goto try_except_handler_7;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_34;
        Py_XDECREF( old );
    }

    tmp_assign_source_35 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_r;
        var_r = tmp_assign_source_35;
        Py_INCREF( var_r );
        Py_XDECREF( old );
    }

    tmp_compare_left_1 = const_str_plain__depend;
    tmp_compare_right_1 = var_r;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    goto loop_start_3;
    branch_no_6:;
    tmp_compexpr_left_3 = const_str_plain__check;
    tmp_compexpr_right_3 = var_r;

    tmp_and_left_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1388;
        goto try_except_handler_7;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    assert( !(tmp_and_left_truth_2 == -1) );
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_subscribed_name_12 = var_r;

    tmp_subscript_name_12 = const_str_plain__check;
    tmp_called_name_15 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_12, tmp_subscript_name_12 );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1388;
        goto try_except_handler_7;
    }
    tmp_subscribed_name_13 = var_var;

    tmp_subscript_name_13 = var_a;

    tmp_args_element_name_20 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_13, tmp_subscript_name_13 );
    if ( tmp_args_element_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_15 );

        exception_lineno = 1388;
        goto try_except_handler_7;
    }
    frame_function->f_lineno = 1388;
    {
        PyObject *call_args[] = { tmp_args_element_name_20 };
        tmp_and_right_value_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
    }

    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_args_element_name_20 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1388;
        goto try_except_handler_7;
    }
    tmp_or_left_value_2 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    Py_INCREF( tmp_and_left_value_2 );
    tmp_or_left_value_2 = tmp_and_left_value_2;
    and_end_2:;
    tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
    if ( tmp_or_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_2 );

        exception_lineno = 1388;
        goto try_except_handler_7;
    }
    if ( tmp_or_left_truth_2 == 1 )
    {
        goto or_left_2;
    }
    else
    {
        goto or_right_2;
    }
    or_right_2:;
    Py_DECREF( tmp_or_left_value_2 );
    tmp_compexpr_left_4 = const_str_plain__check;
    tmp_compexpr_right_4 = var_r;

    tmp_or_right_value_2 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    if ( tmp_or_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1388;
        goto try_except_handler_7;
    }
    Py_INCREF( tmp_or_right_value_2 );
    tmp_cond_value_6 = tmp_or_right_value_2;
    goto or_end_2;
    or_left_2:;
    tmp_cond_value_6 = tmp_or_left_value_2;
    or_end_2:;
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 1388;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_called_name_16 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_name_16 == NULL ))
    {
        tmp_called_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_name_16 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "applyrules" );
        exception_tb = NULL;

        exception_lineno = 1389;
        goto try_except_handler_7;
    }

    tmp_args_element_name_21 = var_r;

    tmp_args_element_name_22 = var_vrd;

    tmp_subscribed_name_14 = var_var;

    tmp_subscript_name_14 = var_a;

    tmp_args_element_name_23 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_14, tmp_subscript_name_14 );
    if ( tmp_args_element_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1389;
        goto try_except_handler_7;
    }
    frame_function->f_lineno = 1389;
    {
        PyObject *call_args[] = { tmp_args_element_name_21, tmp_args_element_name_22, tmp_args_element_name_23 };
        tmp_assign_source_36 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_16, call_args );
    }

    Py_DECREF( tmp_args_element_name_23 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1389;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_ar;
        var_ar = tmp_assign_source_36;
        Py_XDECREF( old );
    }

    tmp_called_name_17 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_name_17 == NULL ))
    {
        tmp_called_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_name_17 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "dictappend" );
        exception_tb = NULL;

        exception_lineno = 1390;
        goto try_except_handler_7;
    }

    tmp_args_element_name_24 = var_rd;

    if ( tmp_args_element_name_24 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1390;
        goto try_except_handler_7;
    }

    tmp_args_element_name_25 = var_ar;

    frame_function->f_lineno = 1390;
    {
        PyObject *call_args[] = { tmp_args_element_name_24, tmp_args_element_name_25 };
        tmp_assign_source_37 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_17, call_args );
    }

    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1390;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rd;
        var_rd = tmp_assign_source_37;
        Py_XDECREF( old );
    }

    tmp_compare_left_2 = const_str_plain__break;
    tmp_compare_right_2 = var_r;

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    goto loop_end_3;
    branch_no_8:;
    branch_no_7:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1385;
        goto try_except_handler_7;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_6;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1369;
        goto try_except_handler_6;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_iter_arg_7 = var_depargs;

    tmp_assign_source_38 = MAKE_ITERATOR( tmp_iter_arg_7 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1393;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_38;

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_39 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_39 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1393;
            goto try_except_handler_8;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_39;
        Py_XDECREF( old );
    }

    tmp_assign_source_40 = tmp_for_loop_4__iter_value;

    {
        PyObject *old = var_a;
        var_a = tmp_assign_source_40;
        Py_INCREF( var_a );
        Py_XDECREF( old );
    }

    tmp_called_name_18 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_aux );

    if (unlikely( tmp_called_name_18 == NULL ))
    {
        tmp_called_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_aux );
    }

    if ( tmp_called_name_18 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "isintent_aux" );
        exception_tb = NULL;

        exception_lineno = 1394;
        goto try_except_handler_8;
    }

    tmp_subscribed_name_15 = var_var;

    tmp_subscript_name_15 = var_a;

    tmp_args_element_name_26 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_15, tmp_subscript_name_15 );
    if ( tmp_args_element_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1394;
        goto try_except_handler_8;
    }
    frame_function->f_lineno = 1394;
    {
        PyObject *call_args[] = { tmp_args_element_name_26 };
        tmp_cond_value_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, call_args );
    }

    Py_DECREF( tmp_args_element_name_26 );
    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1394;
        goto try_except_handler_8;
    }
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        exception_lineno = 1394;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_assign_source_41 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_aux_rules );

    if (unlikely( tmp_assign_source_41 == NULL ))
    {
        tmp_assign_source_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_aux_rules );
    }

    if ( tmp_assign_source_41 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "aux_rules" );
        exception_tb = NULL;

        exception_lineno = 1395;
        goto try_except_handler_8;
    }

    {
        PyObject *old = var__rules;
        var__rules = tmp_assign_source_41;
        Py_INCREF( var__rules );
        Py_XDECREF( old );
    }

    goto branch_end_9;
    branch_no_9:;
    tmp_assign_source_42 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_arg_rules );

    if (unlikely( tmp_assign_source_42 == NULL ))
    {
        tmp_assign_source_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_arg_rules );
    }

    if ( tmp_assign_source_42 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "arg_rules" );
        exception_tb = NULL;

        exception_lineno = 1397;
        goto try_except_handler_8;
    }

    {
        PyObject *old = var__rules;
        var__rules = tmp_assign_source_42;
        Py_INCREF( var__rules );
        Py_XDECREF( old );
    }

    branch_end_9:;
    tmp_dict_name_1 = var_savevrd;

    tmp_key_name_1 = var_a;

    tmp_assign_source_43 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1398;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_vrd;
        var_vrd = tmp_assign_source_43;
        Py_XDECREF( old );
    }

    tmp_iter_arg_8 = var__rules;

    tmp_assign_source_44 = MAKE_ITERATOR( tmp_iter_arg_8 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1399;
        goto try_except_handler_8;
    }
    {
        PyObject *old = tmp_for_loop_5__for_iterator;
        tmp_for_loop_5__for_iterator = tmp_assign_source_44;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    tmp_assign_source_45 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_45 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1399;
            goto try_except_handler_9;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_45;
        Py_XDECREF( old );
    }

    tmp_assign_source_46 = tmp_for_loop_5__iter_value;

    {
        PyObject *old = var_r;
        var_r = tmp_assign_source_46;
        Py_INCREF( var_r );
        Py_XDECREF( old );
    }

    tmp_compare_left_3 = const_str_plain__depend;
    tmp_compare_right_3 = var_r;

    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    goto loop_start_5;
    branch_no_10:;
    tmp_compexpr_left_5 = const_str_plain__check;
    tmp_compexpr_right_5 = var_r;

    tmp_and_left_value_3 = SEQUENCE_CONTAINS( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    if ( tmp_and_left_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1402;
        goto try_except_handler_9;
    }
    tmp_and_left_truth_3 = CHECK_IF_TRUE( tmp_and_left_value_3 );
    assert( !(tmp_and_left_truth_3 == -1) );
    if ( tmp_and_left_truth_3 == 1 )
    {
        goto and_right_3;
    }
    else
    {
        goto and_left_3;
    }
    and_right_3:;
    tmp_subscribed_name_16 = var_r;

    tmp_subscript_name_16 = const_str_plain__check;
    tmp_called_name_19 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_16, tmp_subscript_name_16 );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1402;
        goto try_except_handler_9;
    }
    tmp_subscribed_name_17 = var_var;

    tmp_subscript_name_17 = var_a;

    tmp_args_element_name_27 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_17, tmp_subscript_name_17 );
    if ( tmp_args_element_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_19 );

        exception_lineno = 1402;
        goto try_except_handler_9;
    }
    frame_function->f_lineno = 1402;
    {
        PyObject *call_args[] = { tmp_args_element_name_27 };
        tmp_and_right_value_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, call_args );
    }

    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_args_element_name_27 );
    if ( tmp_and_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1402;
        goto try_except_handler_9;
    }
    tmp_or_left_value_3 = tmp_and_right_value_3;
    goto and_end_3;
    and_left_3:;
    Py_INCREF( tmp_and_left_value_3 );
    tmp_or_left_value_3 = tmp_and_left_value_3;
    and_end_3:;
    tmp_or_left_truth_3 = CHECK_IF_TRUE( tmp_or_left_value_3 );
    if ( tmp_or_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_3 );

        exception_lineno = 1402;
        goto try_except_handler_9;
    }
    if ( tmp_or_left_truth_3 == 1 )
    {
        goto or_left_3;
    }
    else
    {
        goto or_right_3;
    }
    or_right_3:;
    Py_DECREF( tmp_or_left_value_3 );
    tmp_compexpr_left_6 = const_str_plain__check;
    tmp_compexpr_right_6 = var_r;

    tmp_or_right_value_3 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
    if ( tmp_or_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1402;
        goto try_except_handler_9;
    }
    Py_INCREF( tmp_or_right_value_3 );
    tmp_cond_value_8 = tmp_or_right_value_3;
    goto or_end_3;
    or_left_3:;
    tmp_cond_value_8 = tmp_or_left_value_3;
    or_end_3:;
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        exception_lineno = 1402;
        goto try_except_handler_9;
    }
    Py_DECREF( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_called_name_20 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_name_20 == NULL ))
    {
        tmp_called_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_name_20 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "applyrules" );
        exception_tb = NULL;

        exception_lineno = 1403;
        goto try_except_handler_9;
    }

    tmp_args_element_name_28 = var_r;

    tmp_args_element_name_29 = var_vrd;

    tmp_subscribed_name_18 = var_var;

    tmp_subscript_name_18 = var_a;

    tmp_args_element_name_30 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_18, tmp_subscript_name_18 );
    if ( tmp_args_element_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1403;
        goto try_except_handler_9;
    }
    frame_function->f_lineno = 1403;
    {
        PyObject *call_args[] = { tmp_args_element_name_28, tmp_args_element_name_29, tmp_args_element_name_30 };
        tmp_assign_source_47 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_20, call_args );
    }

    Py_DECREF( tmp_args_element_name_30 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1403;
        goto try_except_handler_9;
    }
    {
        PyObject *old = var_ar;
        var_ar = tmp_assign_source_47;
        Py_XDECREF( old );
    }

    tmp_called_name_21 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_name_21 == NULL ))
    {
        tmp_called_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_name_21 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "dictappend" );
        exception_tb = NULL;

        exception_lineno = 1404;
        goto try_except_handler_9;
    }

    tmp_args_element_name_31 = var_rd;

    if ( tmp_args_element_name_31 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1404;
        goto try_except_handler_9;
    }

    tmp_args_element_name_32 = var_ar;

    frame_function->f_lineno = 1404;
    {
        PyObject *call_args[] = { tmp_args_element_name_31, tmp_args_element_name_32 };
        tmp_assign_source_48 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_21, call_args );
    }

    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1404;
        goto try_except_handler_9;
    }
    {
        PyObject *old = var_rd;
        var_rd = tmp_assign_source_48;
        Py_XDECREF( old );
    }

    tmp_compare_left_4 = const_str_plain__break;
    tmp_compare_right_4 = var_r;

    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    goto loop_end_5;
    branch_no_12:;
    branch_no_11:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1399;
        goto try_except_handler_9;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto try_except_handler_8;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    tmp_compare_left_5 = const_str_plain_check;
    tmp_subscribed_name_19 = var_var;

    tmp_subscript_name_19 = var_a;

    tmp_compare_right_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_19, tmp_subscript_name_19 );
    if ( tmp_compare_right_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1407;
        goto try_except_handler_8;
    }
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_4 == -1) );
    Py_DECREF( tmp_compare_right_5 );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_subscribed_name_21 = var_var;

    tmp_subscript_name_20 = var_a;

    tmp_subscribed_name_20 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_21, tmp_subscript_name_20 );
    if ( tmp_subscribed_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1408;
        goto try_except_handler_8;
    }
    tmp_subscript_name_21 = const_str_plain_check;
    tmp_iter_arg_9 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_20, tmp_subscript_name_21 );
    Py_DECREF( tmp_subscribed_name_20 );
    if ( tmp_iter_arg_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1408;
        goto try_except_handler_8;
    }
    tmp_assign_source_49 = MAKE_ITERATOR( tmp_iter_arg_9 );
    Py_DECREF( tmp_iter_arg_9 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1408;
        goto try_except_handler_8;
    }
    {
        PyObject *old = tmp_for_loop_6__for_iterator;
        tmp_for_loop_6__for_iterator = tmp_assign_source_49;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_6:;
    tmp_next_source_6 = tmp_for_loop_6__for_iterator;

    tmp_assign_source_50 = ITERATOR_NEXT( tmp_next_source_6 );
    if ( tmp_assign_source_50 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_6;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1408;
            goto try_except_handler_10;
        }
    }

    {
        PyObject *old = tmp_for_loop_6__iter_value;
        tmp_for_loop_6__iter_value = tmp_assign_source_50;
        Py_XDECREF( old );
    }

    tmp_assign_source_51 = tmp_for_loop_6__iter_value;

    {
        PyObject *old = var_c;
        var_c = tmp_assign_source_51;
        Py_INCREF( var_c );
        Py_XDECREF( old );
    }

    tmp_ass_subvalue_4 = var_c;

    tmp_ass_subscribed_4 = var_vrd;

    tmp_ass_subscript_4 = const_str_plain_check;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1409;
        goto try_except_handler_10;
    }
    tmp_called_name_22 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_name_22 == NULL ))
    {
        tmp_called_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_name_22 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "applyrules" );
        exception_tb = NULL;

        exception_lineno = 1410;
        goto try_except_handler_10;
    }

    tmp_args_element_name_33 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_check_rules );

    if (unlikely( tmp_args_element_name_33 == NULL ))
    {
        tmp_args_element_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_check_rules );
    }

    if ( tmp_args_element_name_33 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "check_rules" );
        exception_tb = NULL;

        exception_lineno = 1410;
        goto try_except_handler_10;
    }

    tmp_args_element_name_34 = var_vrd;

    tmp_subscribed_name_22 = var_var;

    tmp_subscript_name_22 = var_a;

    tmp_args_element_name_35 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_22, tmp_subscript_name_22 );
    if ( tmp_args_element_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1410;
        goto try_except_handler_10;
    }
    frame_function->f_lineno = 1410;
    {
        PyObject *call_args[] = { tmp_args_element_name_33, tmp_args_element_name_34, tmp_args_element_name_35 };
        tmp_assign_source_52 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_22, call_args );
    }

    Py_DECREF( tmp_args_element_name_35 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1410;
        goto try_except_handler_10;
    }
    {
        PyObject *old = var_ar;
        var_ar = tmp_assign_source_52;
        Py_XDECREF( old );
    }

    tmp_called_name_23 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_name_23 == NULL ))
    {
        tmp_called_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_name_23 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "dictappend" );
        exception_tb = NULL;

        exception_lineno = 1411;
        goto try_except_handler_10;
    }

    tmp_args_element_name_36 = var_rd;

    if ( tmp_args_element_name_36 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1411;
        goto try_except_handler_10;
    }

    tmp_args_element_name_37 = var_ar;

    frame_function->f_lineno = 1411;
    {
        PyObject *call_args[] = { tmp_args_element_name_36, tmp_args_element_name_37 };
        tmp_assign_source_53 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_23, call_args );
    }

    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1411;
        goto try_except_handler_10;
    }
    {
        PyObject *old = var_rd;
        var_rd = tmp_assign_source_53;
        Py_XDECREF( old );
    }

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1408;
        goto try_except_handler_10;
    }
    goto loop_start_6;
    loop_end_6:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto try_except_handler_8;
    // End of try:
    try_end_8:;
    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    branch_no_13:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1393;
        goto try_except_handler_8;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_9;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_subscribed_name_23 = var_rd;

    if ( tmp_subscribed_name_23 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1412;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_23 = const_str_plain_cleanupfrompyobj;
    tmp_isinstance_inst_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_23, tmp_subscript_name_23 );
    if ( tmp_isinstance_inst_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1412;
        goto frame_exception_exit_1;
    }
    tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_list );
    assert( tmp_isinstance_cls_1 != NULL );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    Py_DECREF( tmp_isinstance_inst_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1412;
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_subscribed_name_24 = var_rd;

    if ( tmp_subscribed_name_24 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1413;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_24 = const_str_plain_cleanupfrompyobj;
    tmp_source_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_24, tmp_subscript_name_24 );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1413;
        goto frame_exception_exit_1;
    }
    tmp_called_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_reverse );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_called_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1413;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1413;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_24 );
    Py_DECREF( tmp_called_name_24 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1413;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_14:;
    tmp_subscribed_name_25 = var_rd;

    if ( tmp_subscribed_name_25 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1414;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_25 = const_str_plain_closepyobjfrom;
    tmp_isinstance_inst_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_25, tmp_subscript_name_25 );
    if ( tmp_isinstance_inst_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1414;
        goto frame_exception_exit_1;
    }
    tmp_isinstance_cls_2 = LOOKUP_BUILTIN( const_str_plain_list );
    assert( tmp_isinstance_cls_2 != NULL );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    Py_DECREF( tmp_isinstance_inst_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1414;
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_subscribed_name_26 = var_rd;

    if ( tmp_subscribed_name_26 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1415;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_26 = const_str_plain_closepyobjfrom;
    tmp_source_name_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_26, tmp_subscript_name_26 );
    if ( tmp_source_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1415;
        goto frame_exception_exit_1;
    }
    tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_reverse );
    Py_DECREF( tmp_source_name_5 );
    if ( tmp_called_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1415;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1415;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_25 );
    Py_DECREF( tmp_called_name_25 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1415;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_15:;
    tmp_called_name_26 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma );

    if (unlikely( tmp_called_name_26 == NULL ))
    {
        tmp_called_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stripcomma );
    }

    if ( tmp_called_name_26 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "stripcomma" );
        exception_tb = NULL;

        exception_lineno = 1416;
        goto frame_exception_exit_1;
    }

    tmp_called_name_27 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_name_27 == NULL ))
    {
        tmp_called_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_name_27 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "replace" );
        exception_tb = NULL;

        exception_lineno = 1416;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_39 = const_str_digest_e5f2c17bbfe3be0dd9ee7e1c43bce690;
    tmp_args_element_name_40 = _PyDict_NewPresized( 3 );
    tmp_subscribed_name_27 = var_rd;

    if ( tmp_subscribed_name_27 == NULL )
    {
        Py_DECREF( tmp_args_element_name_40 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1417;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_27 = const_str_plain_docsign;
    tmp_dict_value_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_27, tmp_subscript_name_27 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_40 );

        exception_lineno = 1417;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_docsign;
    PyDict_SetItem( tmp_args_element_name_40, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    tmp_subscribed_name_28 = var_rd;

    if ( tmp_subscribed_name_28 == NULL )
    {
        Py_DECREF( tmp_args_element_name_40 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1418;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_28 = const_str_plain_docsignopt;
    tmp_dict_value_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_28, tmp_subscript_name_28 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_40 );

        exception_lineno = 1418;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_docsignopt;
    PyDict_SetItem( tmp_args_element_name_40, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    tmp_subscribed_name_29 = var_rd;

    if ( tmp_subscribed_name_29 == NULL )
    {
        Py_DECREF( tmp_args_element_name_40 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1419;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_29 = const_str_plain_docsignxa;
    tmp_dict_value_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_29, tmp_subscript_name_29 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_40 );

        exception_lineno = 1419;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_docsignxa;
    PyDict_SetItem( tmp_args_element_name_40, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 1419;
    {
        PyObject *call_args[] = { tmp_args_element_name_39, tmp_args_element_name_40 };
        tmp_args_element_name_38 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_27, call_args );
    }

    Py_DECREF( tmp_args_element_name_40 );
    if ( tmp_args_element_name_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1419;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1419;
    {
        PyObject *call_args[] = { tmp_args_element_name_38 };
        tmp_ass_subvalue_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_26, call_args );
    }

    Py_DECREF( tmp_args_element_name_38 );
    if ( tmp_ass_subvalue_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1419;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_5 = var_rd;

    if ( tmp_ass_subscribed_5 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_5 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1416;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_5 = const_str_plain_docsignature;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_5, tmp_ass_subscript_5, tmp_ass_subvalue_5 );
    Py_DECREF( tmp_ass_subvalue_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1416;
        goto frame_exception_exit_1;
    }
    tmp_called_name_28 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma );

    if (unlikely( tmp_called_name_28 == NULL ))
    {
        tmp_called_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stripcomma );
    }

    if ( tmp_called_name_28 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "stripcomma" );
        exception_tb = NULL;

        exception_lineno = 1420;
        goto frame_exception_exit_1;
    }

    tmp_called_name_29 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_name_29 == NULL ))
    {
        tmp_called_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_name_29 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "replace" );
        exception_tb = NULL;

        exception_lineno = 1420;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_42 = const_str_digest_cae2ad5950e123dc09fe80b1437808b7;
    tmp_args_element_name_43 = _PyDict_NewPresized( 2 );
    tmp_subscribed_name_30 = var_rd;

    if ( tmp_subscribed_name_30 == NULL )
    {
        Py_DECREF( tmp_args_element_name_43 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1421;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_30 = const_str_plain_docsignxashort;
    tmp_dict_value_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_30, tmp_subscript_name_30 );
    if ( tmp_dict_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_43 );

        exception_lineno = 1421;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_4 = const_str_plain_docsignxa;
    PyDict_SetItem( tmp_args_element_name_43, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    tmp_subscribed_name_31 = var_rd;

    if ( tmp_subscribed_name_31 == NULL )
    {
        Py_DECREF( tmp_args_element_name_43 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1422;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_31 = const_str_plain_docsignoptshort;
    tmp_dict_value_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_31, tmp_subscript_name_31 );
    if ( tmp_dict_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_43 );

        exception_lineno = 1422;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_5 = const_str_plain_docsignopt;
    PyDict_SetItem( tmp_args_element_name_43, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    frame_function->f_lineno = 1422;
    {
        PyObject *call_args[] = { tmp_args_element_name_42, tmp_args_element_name_43 };
        tmp_args_element_name_41 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_29, call_args );
    }

    Py_DECREF( tmp_args_element_name_43 );
    if ( tmp_args_element_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1422;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1422;
    {
        PyObject *call_args[] = { tmp_args_element_name_41 };
        tmp_assign_source_54 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_28, call_args );
    }

    Py_DECREF( tmp_args_element_name_41 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1422;
        goto frame_exception_exit_1;
    }
    assert( var_optargs == NULL );
    var_optargs = tmp_assign_source_54;

    tmp_compare_left_6 = var_optargs;

    tmp_compare_right_6 = const_str_empty;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1424;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_called_name_30 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma );

    if (unlikely( tmp_called_name_30 == NULL ))
    {
        tmp_called_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stripcomma );
    }

    if ( tmp_called_name_30 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "stripcomma" );
        exception_tb = NULL;

        exception_lineno = 1425;
        goto frame_exception_exit_1;
    }

    tmp_called_name_31 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_name_31 == NULL ))
    {
        tmp_called_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_name_31 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "replace" );
        exception_tb = NULL;

        exception_lineno = 1426;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_45 = const_str_digest_878c81f111f20d075642d5b1f69e14c2;
    tmp_args_element_name_46 = _PyDict_NewPresized( 1 );
    tmp_subscribed_name_32 = var_rd;

    if ( tmp_subscribed_name_32 == NULL )
    {
        Py_DECREF( tmp_args_element_name_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1426;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_32 = const_str_plain_docsign;
    tmp_dict_value_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_32, tmp_subscript_name_32 );
    if ( tmp_dict_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_46 );

        exception_lineno = 1426;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_6 = const_str_plain_docsign;
    PyDict_SetItem( tmp_args_element_name_46, tmp_dict_key_6, tmp_dict_value_6 );
    Py_DECREF( tmp_dict_value_6 );
    frame_function->f_lineno = 1426;
    {
        PyObject *call_args[] = { tmp_args_element_name_45, tmp_args_element_name_46 };
        tmp_args_element_name_44 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_31, call_args );
    }

    Py_DECREF( tmp_args_element_name_46 );
    if ( tmp_args_element_name_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1426;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1426;
    {
        PyObject *call_args[] = { tmp_args_element_name_44 };
        tmp_ass_subvalue_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_30, call_args );
    }

    Py_DECREF( tmp_args_element_name_44 );
    if ( tmp_ass_subvalue_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1426;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_6 = var_rd;

    if ( tmp_ass_subscribed_6 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_6 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1425;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_6 = const_str_plain_docsignatureshort;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_6, tmp_ass_subscript_6, tmp_ass_subvalue_6 );
    Py_DECREF( tmp_ass_subvalue_6 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1425;
        goto frame_exception_exit_1;
    }
    goto branch_end_16;
    branch_no_16:;
    tmp_called_name_32 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_name_32 == NULL ))
    {
        tmp_called_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_name_32 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "replace" );
        exception_tb = NULL;

        exception_lineno = 1428;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_47 = const_str_digest_30ee26d21cfa520442e0b19dbfea94f6;
    tmp_args_element_name_48 = _PyDict_NewPresized( 2 );
    tmp_subscribed_name_33 = var_rd;

    if ( tmp_subscribed_name_33 == NULL )
    {
        Py_DECREF( tmp_args_element_name_48 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1429;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_33 = const_str_plain_docsign;
    tmp_dict_value_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_33, tmp_subscript_name_33 );
    if ( tmp_dict_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_48 );

        exception_lineno = 1429;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_7 = const_str_plain_docsign;
    PyDict_SetItem( tmp_args_element_name_48, tmp_dict_key_7, tmp_dict_value_7 );
    Py_DECREF( tmp_dict_value_7 );
    tmp_dict_value_8 = var_optargs;

    tmp_dict_key_8 = const_str_plain_docsignopt;
    PyDict_SetItem( tmp_args_element_name_48, tmp_dict_key_8, tmp_dict_value_8 );
    frame_function->f_lineno = 1430;
    {
        PyObject *call_args[] = { tmp_args_element_name_47, tmp_args_element_name_48 };
        tmp_ass_subvalue_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_32, call_args );
    }

    Py_DECREF( tmp_args_element_name_48 );
    if ( tmp_ass_subvalue_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1430;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_7 = var_rd;

    if ( tmp_ass_subscribed_7 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_7 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1428;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_7 = const_str_plain_docsignatureshort;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_7, tmp_ass_subscript_7, tmp_ass_subvalue_7 );
    Py_DECREF( tmp_ass_subvalue_7 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1428;
        goto frame_exception_exit_1;
    }
    branch_end_16:;
    tmp_subscribed_name_34 = var_rd;

    if ( tmp_subscribed_name_34 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1432;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_34 = const_str_plain_docsignatureshort;
    tmp_source_name_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_34, tmp_subscript_name_34 );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1432;
        goto frame_exception_exit_1;
    }
    tmp_called_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_replace );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_called_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1432;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1432;
    tmp_ass_subvalue_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_33, &PyTuple_GET_ITEM( const_tuple_str_plain___str_digest_3638426b43758747165faf274e9fd2c4_tuple, 0 ) );

    Py_DECREF( tmp_called_name_33 );
    if ( tmp_ass_subvalue_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1432;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_8 = var_rd;

    if ( tmp_ass_subscribed_8 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_8 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1432;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_8 = const_str_plain_latexdocsignatureshort;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_8, tmp_ass_subscript_8, tmp_ass_subvalue_8 );
    Py_DECREF( tmp_ass_subvalue_8 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1432;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_35 = var_rd;

    if ( tmp_subscribed_name_35 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1433;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_35 = const_str_plain_latexdocsignatureshort;
    tmp_source_name_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_35, tmp_subscript_name_35 );
    if ( tmp_source_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1433;
        goto frame_exception_exit_1;
    }
    tmp_called_name_34 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_replace );
    Py_DECREF( tmp_source_name_7 );
    if ( tmp_called_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1433;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1434;
    tmp_ass_subvalue_9 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_34, &PyTuple_GET_ITEM( const_tuple_str_chr_44_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77_tuple, 0 ) );

    Py_DECREF( tmp_called_name_34 );
    if ( tmp_ass_subvalue_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1434;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_9 = var_rd;

    if ( tmp_ass_subscribed_9 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_9 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1433;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_9 = const_str_plain_latexdocsignatureshort;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_9, tmp_ass_subscript_9, tmp_ass_subvalue_9 );
    Py_DECREF( tmp_ass_subvalue_9 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1433;
        goto frame_exception_exit_1;
    }
    tmp_called_name_35 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma );

    if (unlikely( tmp_called_name_35 == NULL ))
    {
        tmp_called_name_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stripcomma );
    }

    if ( tmp_called_name_35 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "stripcomma" );
        exception_tb = NULL;

        exception_lineno = 1435;
        goto frame_exception_exit_1;
    }

    tmp_called_name_36 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_name_36 == NULL ))
    {
        tmp_called_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_name_36 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "replace" );
        exception_tb = NULL;

        exception_lineno = 1435;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_50 = const_str_digest_fa64e08327e0a6e4fa4e283d195f2c2e;
    tmp_args_element_name_51 = _PyDict_NewPresized( 2 );
    tmp_subscribed_name_36 = var_rd;

    if ( tmp_subscribed_name_36 == NULL )
    {
        Py_DECREF( tmp_args_element_name_51 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1436;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_36 = const_str_plain_callfortran;
    tmp_dict_value_9 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_36, tmp_subscript_name_36 );
    if ( tmp_dict_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_51 );

        exception_lineno = 1436;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_9 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_args_element_name_51, tmp_dict_key_9, tmp_dict_value_9 );
    Py_DECREF( tmp_dict_value_9 );
    tmp_subscribed_name_37 = var_rd;

    if ( tmp_subscribed_name_37 == NULL )
    {
        Py_DECREF( tmp_args_element_name_51 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1436;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_37 = const_str_plain_callfortranappend;
    tmp_dict_value_10 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_37, tmp_subscript_name_37 );
    if ( tmp_dict_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_51 );

        exception_lineno = 1436;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_10 = const_str_plain_callfortranappend;
    PyDict_SetItem( tmp_args_element_name_51, tmp_dict_key_10, tmp_dict_value_10 );
    Py_DECREF( tmp_dict_value_10 );
    frame_function->f_lineno = 1436;
    {
        PyObject *call_args[] = { tmp_args_element_name_50, tmp_args_element_name_51 };
        tmp_args_element_name_49 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_36, call_args );
    }

    Py_DECREF( tmp_args_element_name_51 );
    if ( tmp_args_element_name_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1436;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1436;
    {
        PyObject *call_args[] = { tmp_args_element_name_49 };
        tmp_assign_source_55 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_35, call_args );
    }

    Py_DECREF( tmp_args_element_name_49 );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1436;
        goto frame_exception_exit_1;
    }
    assert( var_cfs == NULL );
    var_cfs = tmp_assign_source_55;

    tmp_subscribed_name_38 = var_rd;

    if ( tmp_subscribed_name_38 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1437;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_38 = const_str_plain_callfortranappend;
    tmp_len_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_38, tmp_subscript_name_38 );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1437;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_7 = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_compare_left_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1437;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_7 = const_int_pos_1;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_7 );

        exception_lineno = 1437;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_7 );
    if ( tmp_cmp_Gt_1 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_called_name_37 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma );

    if (unlikely( tmp_called_name_37 == NULL ))
    {
        tmp_called_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stripcomma );
    }

    if ( tmp_called_name_37 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "stripcomma" );
        exception_tb = NULL;

        exception_lineno = 1438;
        goto frame_exception_exit_1;
    }

    tmp_called_name_38 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_name_38 == NULL ))
    {
        tmp_called_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_name_38 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "replace" );
        exception_tb = NULL;

        exception_lineno = 1438;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_53 = const_str_digest_71dc88adbdb5784ff4dcaa433123b169;
    tmp_args_element_name_54 = _PyDict_NewPresized( 2 );
    tmp_subscribed_name_39 = var_rd;

    if ( tmp_subscribed_name_39 == NULL )
    {
        Py_DECREF( tmp_args_element_name_54 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1439;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_39 = const_str_plain_callfortran;
    tmp_dict_value_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_39, tmp_subscript_name_39 );
    if ( tmp_dict_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_54 );

        exception_lineno = 1439;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_11 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_args_element_name_54, tmp_dict_key_11, tmp_dict_value_11 );
    Py_DECREF( tmp_dict_value_11 );
    tmp_subscribed_name_40 = var_rd;

    if ( tmp_subscribed_name_40 == NULL )
    {
        Py_DECREF( tmp_args_element_name_54 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1439;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_40 = const_str_plain_callfortranappend;
    tmp_dict_value_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_40, tmp_subscript_name_40 );
    if ( tmp_dict_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_54 );

        exception_lineno = 1439;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_12 = const_str_plain_callfortranappend;
    PyDict_SetItem( tmp_args_element_name_54, tmp_dict_key_12, tmp_dict_value_12 );
    Py_DECREF( tmp_dict_value_12 );
    frame_function->f_lineno = 1439;
    {
        PyObject *call_args[] = { tmp_args_element_name_53, tmp_args_element_name_54 };
        tmp_args_element_name_52 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_38, call_args );
    }

    Py_DECREF( tmp_args_element_name_54 );
    if ( tmp_args_element_name_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1439;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1439;
    {
        PyObject *call_args[] = { tmp_args_element_name_52 };
        tmp_ass_subvalue_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_37, call_args );
    }

    Py_DECREF( tmp_args_element_name_52 );
    if ( tmp_ass_subvalue_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1439;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_10 = var_rd;

    if ( tmp_ass_subscribed_10 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_10 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1438;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_10 = const_str_plain_callcompaqfortran;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_10, tmp_ass_subscript_10, tmp_ass_subvalue_10 );
    Py_DECREF( tmp_ass_subvalue_10 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1438;
        goto frame_exception_exit_1;
    }
    goto branch_end_17;
    branch_no_17:;
    tmp_ass_subvalue_11 = var_cfs;

    tmp_ass_subscribed_11 = var_rd;

    if ( tmp_ass_subscribed_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1441;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_11 = const_str_plain_callcompaqfortran;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_11, tmp_ass_subscript_11, tmp_ass_subvalue_11 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1441;
        goto frame_exception_exit_1;
    }
    branch_end_17:;
    tmp_ass_subvalue_12 = var_cfs;

    tmp_ass_subscribed_12 = var_rd;

    if ( tmp_ass_subscribed_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1442;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_12 = const_str_plain_callfortran;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_12, tmp_ass_subscript_12, tmp_ass_subvalue_12 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1442;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_41 = var_rd;

    if ( tmp_subscribed_name_41 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1443;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_41 = const_str_plain_docreturn;
    tmp_isinstance_inst_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_41, tmp_subscript_name_41 );
    if ( tmp_isinstance_inst_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1443;
        goto frame_exception_exit_1;
    }
    tmp_isinstance_cls_3 = LOOKUP_BUILTIN( const_str_plain_list );
    assert( tmp_isinstance_cls_3 != NULL );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    Py_DECREF( tmp_isinstance_inst_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1443;
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_called_name_39 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma );

    if (unlikely( tmp_called_name_39 == NULL ))
    {
        tmp_called_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stripcomma );
    }

    if ( tmp_called_name_39 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "stripcomma" );
        exception_tb = NULL;

        exception_lineno = 1444;
        goto frame_exception_exit_1;
    }

    tmp_called_name_40 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_name_40 == NULL ))
    {
        tmp_called_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_name_40 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "replace" );
        exception_tb = NULL;

        exception_lineno = 1445;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_56 = const_str_digest_f7450f7f93b1e2a8a6f8d167f6c2ef9a;
    tmp_args_element_name_57 = _PyDict_NewPresized( 1 );
    tmp_subscribed_name_42 = var_rd;

    if ( tmp_subscribed_name_42 == NULL )
    {
        Py_DECREF( tmp_args_element_name_57 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1445;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_42 = const_str_plain_docreturn;
    tmp_dict_value_13 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_42, tmp_subscript_name_42 );
    if ( tmp_dict_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_57 );

        exception_lineno = 1445;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_13 = const_str_plain_docreturn;
    PyDict_SetItem( tmp_args_element_name_57, tmp_dict_key_13, tmp_dict_value_13 );
    Py_DECREF( tmp_dict_value_13 );
    frame_function->f_lineno = 1445;
    {
        PyObject *call_args[] = { tmp_args_element_name_56, tmp_args_element_name_57 };
        tmp_args_element_name_55 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_40, call_args );
    }

    Py_DECREF( tmp_args_element_name_57 );
    if ( tmp_args_element_name_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1445;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1445;
    {
        PyObject *call_args[] = { tmp_args_element_name_55 };
        tmp_left_name_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_39, call_args );
    }

    Py_DECREF( tmp_args_element_name_55 );
    if ( tmp_left_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1445;
        goto frame_exception_exit_1;
    }
    tmp_right_name_11 = const_str_digest_fad16014b804349bb65b09a2311b1ac7;
    tmp_ass_subvalue_13 = BINARY_OPERATION_ADD( tmp_left_name_11, tmp_right_name_11 );
    Py_DECREF( tmp_left_name_11 );
    if ( tmp_ass_subvalue_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1444;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_13 = var_rd;

    if ( tmp_ass_subscribed_13 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_13 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1444;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_13 = const_str_plain_docreturn;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_13, tmp_ass_subscript_13, tmp_ass_subvalue_13 );
    Py_DECREF( tmp_ass_subvalue_13 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1444;
        goto frame_exception_exit_1;
    }
    branch_no_18:;
    tmp_ass_subvalue_14 = PyList_New( 0 );
    tmp_ass_subscribed_14 = var_rd;

    if ( tmp_ass_subscribed_14 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_14 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1446;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_14 = const_str_plain_docstrsigns;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_14, tmp_ass_subscript_14, tmp_ass_subvalue_14 );
    Py_DECREF( tmp_ass_subvalue_14 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1446;
        goto frame_exception_exit_1;
    }
    tmp_ass_subvalue_15 = PyList_New( 0 );
    tmp_ass_subscribed_15 = var_rd;

    if ( tmp_ass_subscribed_15 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_15 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1447;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_15 = const_str_plain_latexdocstrsigns;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_15, tmp_ass_subscript_15, tmp_ass_subvalue_15 );
    Py_DECREF( tmp_ass_subvalue_15 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1447;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_10 = const_tuple_a66751b7c76123c024f448eec46707b1_tuple;
    tmp_assign_source_56 = MAKE_ITERATOR( tmp_iter_arg_10 );
    assert( tmp_assign_source_56 != NULL );
    assert( tmp_for_loop_7__for_iterator == NULL );
    tmp_for_loop_7__for_iterator = tmp_assign_source_56;

    // Tried code:
    loop_start_7:;
    tmp_next_source_7 = tmp_for_loop_7__for_iterator;

    tmp_assign_source_57 = ITERATOR_NEXT( tmp_next_source_7 );
    if ( tmp_assign_source_57 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_7;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1448;
            goto try_except_handler_11;
        }
    }

    {
        PyObject *old = tmp_for_loop_7__iter_value;
        tmp_for_loop_7__iter_value = tmp_assign_source_57;
        Py_XDECREF( old );
    }

    tmp_assign_source_58 = tmp_for_loop_7__iter_value;

    {
        PyObject *old = var_k;
        var_k = tmp_assign_source_58;
        Py_INCREF( var_k );
        Py_XDECREF( old );
    }

    tmp_compexpr_left_7 = var_k;

    tmp_compexpr_right_7 = var_rd;

    if ( tmp_compexpr_right_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1449;
        goto try_except_handler_11;
    }

    tmp_and_left_value_4 = SEQUENCE_CONTAINS( tmp_compexpr_left_7, tmp_compexpr_right_7 );
    if ( tmp_and_left_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1449;
        goto try_except_handler_11;
    }
    tmp_and_left_truth_4 = CHECK_IF_TRUE( tmp_and_left_value_4 );
    assert( !(tmp_and_left_truth_4 == -1) );
    if ( tmp_and_left_truth_4 == 1 )
    {
        goto and_right_4;
    }
    else
    {
        goto and_left_4;
    }
    and_right_4:;
    tmp_subscribed_name_43 = var_rd;

    if ( tmp_subscribed_name_43 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1449;
        goto try_except_handler_11;
    }

    tmp_subscript_name_43 = var_k;

    tmp_isinstance_inst_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_43, tmp_subscript_name_43 );
    if ( tmp_isinstance_inst_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1449;
        goto try_except_handler_11;
    }
    tmp_isinstance_cls_4 = LOOKUP_BUILTIN( const_str_plain_list );
    assert( tmp_isinstance_cls_4 != NULL );
    tmp_and_right_value_4 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
    Py_DECREF( tmp_isinstance_inst_4 );
    if ( tmp_and_right_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1449;
        goto try_except_handler_11;
    }
    tmp_cond_value_9 = tmp_and_right_value_4;
    goto and_end_4;
    and_left_4:;
    tmp_cond_value_9 = tmp_and_left_value_4;
    and_end_4:;
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1449;
        goto try_except_handler_11;
    }
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_subscribed_name_44 = var_rd;

    if ( tmp_subscribed_name_44 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1450;
        goto try_except_handler_11;
    }

    tmp_subscript_name_44 = const_str_plain_docstrsigns;
    tmp_left_name_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_44, tmp_subscript_name_44 );
    if ( tmp_left_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1450;
        goto try_except_handler_11;
    }
    tmp_subscribed_name_45 = var_rd;

    if ( tmp_subscribed_name_45 == NULL )
    {
        Py_DECREF( tmp_left_name_12 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1450;
        goto try_except_handler_11;
    }

    tmp_subscript_name_45 = var_k;

    tmp_right_name_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_45, tmp_subscript_name_45 );
    if ( tmp_right_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_12 );

        exception_lineno = 1450;
        goto try_except_handler_11;
    }
    tmp_ass_subvalue_16 = BINARY_OPERATION_ADD( tmp_left_name_12, tmp_right_name_12 );
    Py_DECREF( tmp_left_name_12 );
    Py_DECREF( tmp_right_name_12 );
    if ( tmp_ass_subvalue_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1450;
        goto try_except_handler_11;
    }
    tmp_ass_subscribed_16 = var_rd;

    if ( tmp_ass_subscribed_16 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_16 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1450;
        goto try_except_handler_11;
    }

    tmp_ass_subscript_16 = const_str_plain_docstrsigns;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_16, tmp_ass_subscript_16, tmp_ass_subvalue_16 );
    Py_DECREF( tmp_ass_subvalue_16 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1450;
        goto try_except_handler_11;
    }
    branch_no_19:;
    tmp_left_name_13 = const_str_plain_latex;
    tmp_right_name_13 = var_k;

    tmp_assign_source_59 = BINARY_OPERATION_ADD( tmp_left_name_13, tmp_right_name_13 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1451;
        goto try_except_handler_11;
    }
    {
        PyObject *old = var_k;
        assert( old != NULL );
        var_k = tmp_assign_source_59;
        Py_DECREF( old );
    }

    tmp_compexpr_left_8 = var_k;

    tmp_compexpr_right_8 = var_rd;

    if ( tmp_compexpr_right_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1452;
        goto try_except_handler_11;
    }

    tmp_and_left_value_5 = SEQUENCE_CONTAINS( tmp_compexpr_left_8, tmp_compexpr_right_8 );
    if ( tmp_and_left_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1452;
        goto try_except_handler_11;
    }
    tmp_and_left_truth_5 = CHECK_IF_TRUE( tmp_and_left_value_5 );
    assert( !(tmp_and_left_truth_5 == -1) );
    if ( tmp_and_left_truth_5 == 1 )
    {
        goto and_right_5;
    }
    else
    {
        goto and_left_5;
    }
    and_right_5:;
    tmp_subscribed_name_46 = var_rd;

    if ( tmp_subscribed_name_46 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1452;
        goto try_except_handler_11;
    }

    tmp_subscript_name_46 = var_k;

    tmp_isinstance_inst_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_46, tmp_subscript_name_46 );
    if ( tmp_isinstance_inst_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1452;
        goto try_except_handler_11;
    }
    tmp_isinstance_cls_5 = LOOKUP_BUILTIN( const_str_plain_list );
    assert( tmp_isinstance_cls_5 != NULL );
    tmp_and_right_value_5 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
    Py_DECREF( tmp_isinstance_inst_5 );
    if ( tmp_and_right_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1452;
        goto try_except_handler_11;
    }
    tmp_cond_value_10 = tmp_and_right_value_5;
    goto and_end_5;
    and_left_5:;
    tmp_cond_value_10 = tmp_and_left_value_5;
    and_end_5:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1452;
        goto try_except_handler_11;
    }
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_subscribed_name_47 = var_rd;

    if ( tmp_subscribed_name_47 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1453;
        goto try_except_handler_11;
    }

    tmp_subscript_name_47 = const_str_plain_latexdocstrsigns;
    tmp_left_name_17 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_47, tmp_subscript_name_47 );
    if ( tmp_left_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1453;
        goto try_except_handler_11;
    }
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = 1;
    tmp_subscribed_name_48 = var_rd;

    if ( tmp_subscribed_name_48 == NULL )
    {
        Py_DECREF( tmp_left_name_17 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1453;
        goto try_except_handler_11;
    }

    tmp_subscript_name_48 = var_k;

    tmp_slice_source_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_48, tmp_subscript_name_48 );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_17 );

        exception_lineno = 1453;
        goto try_except_handler_11;
    }
    tmp_right_name_14 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_right_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_17 );

        exception_lineno = 1453;
        goto try_except_handler_11;
    }
    tmp_left_name_16 = BINARY_OPERATION_ADD( tmp_left_name_17, tmp_right_name_14 );
    Py_DECREF( tmp_left_name_17 );
    Py_DECREF( tmp_right_name_14 );
    if ( tmp_left_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1453;
        goto try_except_handler_11;
    }
    tmp_right_name_15 = LIST_COPY( const_list_str_digest_3d5ba40ebd32fc4950e50da9cea3a5ad_list );
    tmp_left_name_15 = BINARY_OPERATION_ADD( tmp_left_name_16, tmp_right_name_15 );
    Py_DECREF( tmp_left_name_16 );
    Py_DECREF( tmp_right_name_15 );
    if ( tmp_left_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1453;
        goto try_except_handler_11;
    }
    tmp_sliceslicedel_index_lower_2 = 1;
    tmp_slice_index_upper_2 = PY_SSIZE_T_MAX;
    tmp_subscribed_name_49 = var_rd;

    if ( tmp_subscribed_name_49 == NULL )
    {
        Py_DECREF( tmp_left_name_15 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1454;
        goto try_except_handler_11;
    }

    tmp_subscript_name_49 = var_k;

    tmp_slice_source_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_49, tmp_subscript_name_49 );
    if ( tmp_slice_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_15 );

        exception_lineno = 1454;
        goto try_except_handler_11;
    }
    tmp_right_name_16 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    Py_DECREF( tmp_slice_source_2 );
    if ( tmp_right_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_15 );

        exception_lineno = 1454;
        goto try_except_handler_11;
    }
    tmp_left_name_14 = BINARY_OPERATION_ADD( tmp_left_name_15, tmp_right_name_16 );
    Py_DECREF( tmp_left_name_15 );
    Py_DECREF( tmp_right_name_16 );
    if ( tmp_left_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1454;
        goto try_except_handler_11;
    }
    tmp_right_name_17 = LIST_COPY( const_list_str_digest_208bb9b9de0c9678f31d3d5b4fa77779_list );
    tmp_ass_subvalue_17 = BINARY_OPERATION_ADD( tmp_left_name_14, tmp_right_name_17 );
    Py_DECREF( tmp_left_name_14 );
    Py_DECREF( tmp_right_name_17 );
    if ( tmp_ass_subvalue_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1454;
        goto try_except_handler_11;
    }
    tmp_ass_subscribed_17 = var_rd;

    if ( tmp_ass_subscribed_17 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_17 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1453;
        goto try_except_handler_11;
    }

    tmp_ass_subscript_17 = const_str_plain_latexdocstrsigns;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_17, tmp_ass_subscript_17, tmp_ass_subvalue_17 );
    Py_DECREF( tmp_ass_subvalue_17 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1454;
        goto try_except_handler_11;
    }
    branch_no_20:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1448;
        goto try_except_handler_11;
    }
    goto loop_start_7;
    loop_end_7:;
    goto try_end_10;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    tmp_subscribed_name_50 = var_rd;

    if ( tmp_subscribed_name_50 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1458;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_50 = const_str_plain_keyformat;
    tmp_or_left_value_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_50, tmp_subscript_name_50 );
    if ( tmp_or_left_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1458;
        goto frame_exception_exit_1;
    }
    tmp_or_left_truth_4 = CHECK_IF_TRUE( tmp_or_left_value_4 );
    if ( tmp_or_left_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_4 );

        exception_lineno = 1458;
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_4 == 1 )
    {
        goto or_left_4;
    }
    else
    {
        goto or_right_4;
    }
    or_right_4:;
    Py_DECREF( tmp_or_left_value_4 );
    tmp_subscribed_name_51 = var_rd;

    if ( tmp_subscribed_name_51 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1458;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_51 = const_str_plain_xaformat;
    tmp_or_right_value_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_51, tmp_subscript_name_51 );
    if ( tmp_or_right_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1458;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_11 = tmp_or_right_value_4;
    goto or_end_4;
    or_left_4:;
    tmp_cond_value_11 = tmp_or_left_value_4;
    or_end_4:;
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_11 );

        exception_lineno = 1458;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_subscribed_name_52 = var_rd;

    if ( tmp_subscribed_name_52 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1459;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_52 = const_str_plain_argformat;
    tmp_assign_source_60 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_52, tmp_subscript_name_52 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1459;
        goto frame_exception_exit_1;
    }
    assert( var_argformat == NULL );
    var_argformat = tmp_assign_source_60;

    tmp_isinstance_inst_6 = var_argformat;

    tmp_isinstance_cls_6 = LOOKUP_BUILTIN( const_str_plain_list );
    assert( tmp_isinstance_cls_6 != NULL );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_6, tmp_isinstance_cls_6 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1460;
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_source_name_8 = var_argformat;

    tmp_called_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_append );
    if ( tmp_called_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1461;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1461;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_41, &PyTuple_GET_ITEM( const_tuple_str_chr_124_tuple, 0 ) );

    Py_DECREF( tmp_called_name_41 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1461;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_22;
    branch_no_22:;
    tmp_isinstance_inst_7 = var_argformat;

    tmp_isinstance_cls_7 = LOOKUP_BUILTIN( const_str_plain_str );
    assert( tmp_isinstance_cls_7 != NULL );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_7, tmp_isinstance_cls_7 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1463;
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_23;
    }
    else
    {
        goto branch_yes_23;
    }
    branch_yes_23:;
    tmp_raise_type_1 = PyExc_AssertionError;
    tmp_raise_value_1 = PyTuple_New( 1 );
    tmp_operand_name_3 = PyTuple_New( 2 );
    tmp_tuple_element_3 = var_argformat;

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_operand_name_3, 0, tmp_tuple_element_3 );
    tmp_type_arg_1 = var_argformat;

    tmp_tuple_element_3 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_tuple_element_3 != NULL );
    PyTuple_SET_ITEM( tmp_operand_name_3, 1, tmp_tuple_element_3 );
    tmp_tuple_element_2 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_raise_value_1 );

        exception_lineno = 1463;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_raise_value_1, 0, tmp_tuple_element_2 );
    exception_type = tmp_raise_type_1;
    Py_INCREF( tmp_raise_type_1 );
    exception_value = tmp_raise_value_1;
    exception_lineno = 1463;
    RAISE_EXCEPTION_WITH_VALUE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_23:;
    tmp_assign_source_61 = var_rd;

    if ( tmp_assign_source_61 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1465;
        goto frame_exception_exit_1;
    }

    assert( tmp_inplace_assign_subscr_1__target == NULL );
    Py_INCREF( tmp_assign_source_61 );
    tmp_inplace_assign_subscr_1__target = tmp_assign_source_61;

    // Tried code:
    tmp_subscribed_name_53 = tmp_inplace_assign_subscr_1__target;

    tmp_subscript_name_53 = const_str_plain_argformat;
    tmp_left_name_18 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_53, tmp_subscript_name_53 );
    if ( tmp_left_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1465;
        goto try_except_handler_12;
    }
    tmp_right_name_18 = const_str_chr_124;
    tmp_ass_subvalue_18 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_18, tmp_right_name_18 );
    Py_DECREF( tmp_left_name_18 );
    if ( tmp_ass_subvalue_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1465;
        goto try_except_handler_12;
    }
    tmp_ass_subscribed_18 = tmp_inplace_assign_subscr_1__target;

    tmp_ass_subscript_18 = const_str_plain_argformat;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_18, tmp_ass_subscript_18, tmp_ass_subvalue_18 );
    Py_DECREF( tmp_ass_subvalue_18 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1465;
        goto try_except_handler_12;
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_subscr_1__target );
    Py_DECREF( tmp_inplace_assign_subscr_1__target );
    tmp_inplace_assign_subscr_1__target = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_subscr_1__target );
    Py_DECREF( tmp_inplace_assign_subscr_1__target );
    tmp_inplace_assign_subscr_1__target = NULL;

    branch_end_22:;
    branch_no_21:;
    tmp_called_name_42 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_name_42 == NULL ))
    {
        tmp_called_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_name_42 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "applyrules" );
        exception_tb = NULL;

        exception_lineno = 1467;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_58 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_routine_rules );

    if (unlikely( tmp_args_element_name_58 == NULL ))
    {
        tmp_args_element_name_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_routine_rules );
    }

    if ( tmp_args_element_name_58 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "routine_rules" );
        exception_tb = NULL;

        exception_lineno = 1467;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_59 = var_rd;

    if ( tmp_args_element_name_59 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rd" );
        exception_tb = NULL;

        exception_lineno = 1467;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1467;
    {
        PyObject *call_args[] = { tmp_args_element_name_58, tmp_args_element_name_59 };
        tmp_assign_source_62 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_42, call_args );
    }

    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1467;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_ar;
        var_ar = tmp_assign_source_62;
        Py_XDECREF( old );
    }

    tmp_called_name_43 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_called_name_43 == NULL ))
    {
        tmp_called_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_called_name_43 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 1468;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_60 = par_rout;

    frame_function->f_lineno = 1468;
    {
        PyObject *call_args[] = { tmp_args_element_name_60 };
        tmp_cond_value_12 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_43, call_args );
    }

    if ( tmp_cond_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1468;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_12 );

        exception_lineno = 1468;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == 1 )
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_called_name_44 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_name_44 == NULL ))
    {
        tmp_called_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_name_44 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "outmess" );
        exception_tb = NULL;

        exception_lineno = 1469;
        goto frame_exception_exit_1;
    }

    tmp_left_name_19 = const_str_digest_7fe249f2ea6a3ed66c02d89e1213fce8;
    tmp_subscribed_name_54 = var_ar;

    tmp_subscript_name_54 = const_str_plain_docshort;
    tmp_right_name_19 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_54, tmp_subscript_name_54 );
    if ( tmp_right_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1469;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_61 = BINARY_OPERATION_REMAINDER( tmp_left_name_19, tmp_right_name_19 );
    Py_DECREF( tmp_right_name_19 );
    if ( tmp_args_element_name_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1469;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1469;
    {
        PyObject *call_args[] = { tmp_args_element_name_61 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_44, call_args );
    }

    Py_DECREF( tmp_args_element_name_61 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1469;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_24;
    branch_no_24:;
    tmp_called_name_45 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_name_45 == NULL ))
    {
        tmp_called_name_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_name_45 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "outmess" );
        exception_tb = NULL;

        exception_lineno = 1471;
        goto frame_exception_exit_1;
    }

    tmp_left_name_20 = const_str_digest_1f47f215e683f1fb509e08c58ac83359;
    tmp_subscribed_name_55 = var_ar;

    tmp_subscript_name_55 = const_str_plain_docshort;
    tmp_right_name_20 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_55, tmp_subscript_name_55 );
    if ( tmp_right_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1471;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_62 = BINARY_OPERATION_REMAINDER( tmp_left_name_20, tmp_right_name_20 );
    Py_DECREF( tmp_right_name_20 );
    if ( tmp_args_element_name_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1471;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1471;
    {
        PyObject *call_args[] = { tmp_args_element_name_62 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_45, call_args );
    }

    Py_DECREF( tmp_args_element_name_62 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1471;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_24:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_rout )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rout,
                    par_rout
                );

                assert( res == 0 );
            }

            if ( var_wrap )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_wrap,
                    var_wrap
                );

                assert( res == 0 );
            }

            if ( var_args )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_args,
                    var_args
                );

                assert( res == 0 );
            }

            if ( var_depargs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_depargs,
                    var_depargs
                );

                assert( res == 0 );
            }

            if ( var_var )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_var,
                    var_var
                );

                assert( res == 0 );
            }

            if ( var_vrd )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_vrd,
                    var_vrd
                );

                assert( res == 0 );
            }

            if ( var_rd )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rd,
                    var_rd
                );

                assert( res == 0 );
            }

            if ( var_r )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r,
                    var_r
                );

                assert( res == 0 );
            }

            if ( var_ar )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_ar,
                    var_ar
                );

                assert( res == 0 );
            }

            if ( var_nth )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_nth,
                    var_nth
                );

                assert( res == 0 );
            }

            if ( var_nthk )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_nthk,
                    var_nthk
                );

                assert( res == 0 );
            }

            if ( var_savevrd )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_savevrd,
                    var_savevrd
                );

                assert( res == 0 );
            }

            if ( var_a )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_a,
                    var_a
                );

                assert( res == 0 );
            }

            if ( var__rules )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain__rules,
                    var__rules
                );

                assert( res == 0 );
            }

            if ( var_c )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_c,
                    var_c
                );

                assert( res == 0 );
            }

            if ( var_optargs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_optargs,
                    var_optargs
                );

                assert( res == 0 );
            }

            if ( var_cfs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_cfs,
                    var_cfs
                );

                assert( res == 0 );
            }

            if ( var_k )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_k,
                    var_k
                );

                assert( res == 0 );
            }

            if ( var_argformat )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_argformat,
                    var_argformat
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = PyTuple_New( 2 );
    tmp_tuple_element_4 = var_ar;

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = var_wrap;

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_4 );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_2_buildapi_of_numpy$f2py$rules );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_rout );
    Py_DECREF( par_rout );
    par_rout = NULL;

    CHECK_OBJECT( (PyObject *)var_wrap );
    Py_DECREF( var_wrap );
    var_wrap = NULL;

    CHECK_OBJECT( (PyObject *)var_args );
    Py_DECREF( var_args );
    var_args = NULL;

    CHECK_OBJECT( (PyObject *)var_depargs );
    Py_DECREF( var_depargs );
    var_depargs = NULL;

    CHECK_OBJECT( (PyObject *)var_var );
    Py_DECREF( var_var );
    var_var = NULL;

    Py_XDECREF( var_vrd );
    var_vrd = NULL;

    Py_XDECREF( var_rd );
    var_rd = NULL;

    Py_XDECREF( var_r );
    var_r = NULL;

    CHECK_OBJECT( (PyObject *)var_ar );
    Py_DECREF( var_ar );
    var_ar = NULL;

    Py_XDECREF( var_nth );
    var_nth = NULL;

    Py_XDECREF( var_nthk );
    var_nthk = NULL;

    CHECK_OBJECT( (PyObject *)var_savevrd );
    Py_DECREF( var_savevrd );
    var_savevrd = NULL;

    Py_XDECREF( var_a );
    var_a = NULL;

    Py_XDECREF( var__rules );
    var__rules = NULL;

    Py_XDECREF( var_c );
    var_c = NULL;

    CHECK_OBJECT( (PyObject *)var_optargs );
    Py_DECREF( var_optargs );
    var_optargs = NULL;

    CHECK_OBJECT( (PyObject *)var_cfs );
    Py_DECREF( var_cfs );
    var_cfs = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_argformat );
    var_argformat = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_rout );
    Py_DECREF( par_rout );
    par_rout = NULL;

    Py_XDECREF( var_wrap );
    var_wrap = NULL;

    Py_XDECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_depargs );
    var_depargs = NULL;

    Py_XDECREF( var_var );
    var_var = NULL;

    Py_XDECREF( var_vrd );
    var_vrd = NULL;

    Py_XDECREF( var_rd );
    var_rd = NULL;

    Py_XDECREF( var_r );
    var_r = NULL;

    Py_XDECREF( var_ar );
    var_ar = NULL;

    Py_XDECREF( var_nth );
    var_nth = NULL;

    Py_XDECREF( var_nthk );
    var_nthk = NULL;

    Py_XDECREF( var_savevrd );
    var_savevrd = NULL;

    Py_XDECREF( var_a );
    var_a = NULL;

    Py_XDECREF( var__rules );
    var__rules = NULL;

    Py_XDECREF( var_c );
    var_c = NULL;

    Py_XDECREF( var_optargs );
    var_optargs = NULL;

    Py_XDECREF( var_cfs );
    var_cfs = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_argformat );
    var_argformat = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_2_buildapi_of_numpy$f2py$rules );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



static PyObject *MAKE_FUNCTION_function_1_buildmodule_of_numpy$f2py$rules(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_1_buildmodule_of_numpy$f2py$rules,
        const_str_plain_buildmodule,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1d0fcfabd30db8cfbc82a5833c9c24d9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$f2py$rules,
        const_str_digest_74d76a791efaafa48494f438f04e3207
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_buildapi_of_numpy$f2py$rules(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_2_buildapi_of_numpy$f2py$rules,
        const_str_plain_buildapi,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ef916f58685472fc8f7752eb8173bddc,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$f2py$rules,
        Py_None
    );

    return result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_numpy$f2py$rules =
{
    PyModuleDef_HEAD_INIT,
    "numpy.f2py.rules",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( numpy$f2py$rules )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_numpy$f2py$rules );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );
#if PYTHON_VERSION >= 350
    PyType_Ready( &Nuitka_Coroutine_Type );
    PyType_Ready( &Nuitka_CoroutineWrapper_Type );
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

#endif

#if _NUITKA_MODULE
    // Enable meta path based loader if not already done.
    setupMetaPathBasedLoader();
#endif

    createModuleConstants();
    createModuleCodeObjects();

    // puts( "in initnumpy$f2py$rules" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_numpy$f2py$rules = Py_InitModule4(
        "numpy.f2py.rules",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_numpy$f2py$rules = PyModule_Create( &mdef_numpy$f2py$rules );
#endif

    moduledict_numpy$f2py$rules = (PyDictObject *)((PyModuleObject *)module_numpy$f2py$rules)->md_dict;

    CHECK_OBJECT( module_numpy$f2py$rules );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_digest_96414f4f92639a7353121cae2e473e26, module_numpy$f2py$rules );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( module_numpy$f2py$rules );

    if ( PyDict_GetItem( module_dict, const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, const_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_LOADER
    PyDict_SetItem( module_dict, const_str_plain___loader__, metapath_based_loader );
#else
    PyDict_SetItem( module_dict, const_str_plain___loader__, Py_None );
#endif
#endif

    // Temp variables if any
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_args_element_name_47;
    PyObject *tmp_args_element_name_48;
    PyObject *tmp_args_element_name_49;
    PyObject *tmp_args_element_name_50;
    PyObject *tmp_args_element_name_51;
    PyObject *tmp_args_element_name_52;
    PyObject *tmp_args_element_name_53;
    PyObject *tmp_args_element_name_54;
    PyObject *tmp_args_element_name_55;
    PyObject *tmp_args_element_name_56;
    PyObject *tmp_args_element_name_57;
    PyObject *tmp_args_element_name_58;
    PyObject *tmp_args_element_name_59;
    PyObject *tmp_args_element_name_60;
    PyObject *tmp_args_element_name_61;
    PyObject *tmp_args_element_name_62;
    PyObject *tmp_args_element_name_63;
    PyObject *tmp_args_element_name_64;
    PyObject *tmp_args_element_name_65;
    PyObject *tmp_args_element_name_66;
    PyObject *tmp_args_element_name_67;
    PyObject *tmp_args_element_name_68;
    PyObject *tmp_args_element_name_69;
    PyObject *tmp_args_element_name_70;
    PyObject *tmp_args_element_name_71;
    PyObject *tmp_args_element_name_72;
    PyObject *tmp_args_element_name_73;
    PyObject *tmp_args_element_name_74;
    PyObject *tmp_args_element_name_75;
    PyObject *tmp_args_element_name_76;
    PyObject *tmp_args_element_name_77;
    PyObject *tmp_args_element_name_78;
    PyObject *tmp_args_element_name_79;
    PyObject *tmp_args_element_name_80;
    PyObject *tmp_args_element_name_81;
    PyObject *tmp_args_element_name_82;
    PyObject *tmp_args_element_name_83;
    PyObject *tmp_args_element_name_84;
    PyObject *tmp_args_element_name_85;
    PyObject *tmp_args_element_name_86;
    PyObject *tmp_args_element_name_87;
    PyObject *tmp_args_element_name_88;
    PyObject *tmp_args_element_name_89;
    PyObject *tmp_args_element_name_90;
    PyObject *tmp_args_element_name_91;
    PyObject *tmp_args_element_name_92;
    PyObject *tmp_args_element_name_93;
    PyObject *tmp_args_element_name_94;
    PyObject *tmp_args_element_name_95;
    PyObject *tmp_args_element_name_96;
    PyObject *tmp_args_element_name_97;
    PyObject *tmp_args_element_name_98;
    PyObject *tmp_args_element_name_99;
    PyObject *tmp_args_element_name_100;
    PyObject *tmp_args_element_name_101;
    PyObject *tmp_args_element_name_102;
    PyObject *tmp_args_element_name_103;
    PyObject *tmp_args_element_name_104;
    PyObject *tmp_args_element_name_105;
    PyObject *tmp_args_element_name_106;
    PyObject *tmp_args_element_name_107;
    PyObject *tmp_args_element_name_108;
    PyObject *tmp_args_element_name_109;
    PyObject *tmp_args_element_name_110;
    PyObject *tmp_args_element_name_111;
    PyObject *tmp_args_element_name_112;
    PyObject *tmp_args_element_name_113;
    PyObject *tmp_args_element_name_114;
    PyObject *tmp_args_element_name_115;
    PyObject *tmp_args_element_name_116;
    PyObject *tmp_args_element_name_117;
    PyObject *tmp_args_element_name_118;
    PyObject *tmp_args_element_name_119;
    PyObject *tmp_args_element_name_120;
    PyObject *tmp_args_element_name_121;
    PyObject *tmp_args_element_name_122;
    PyObject *tmp_args_element_name_123;
    PyObject *tmp_args_element_name_124;
    PyObject *tmp_args_element_name_125;
    PyObject *tmp_args_element_name_126;
    PyObject *tmp_args_element_name_127;
    PyObject *tmp_args_element_name_128;
    PyObject *tmp_args_element_name_129;
    PyObject *tmp_args_element_name_130;
    PyObject *tmp_args_element_name_131;
    PyObject *tmp_args_element_name_132;
    PyObject *tmp_args_element_name_133;
    PyObject *tmp_args_element_name_134;
    PyObject *tmp_args_element_name_135;
    PyObject *tmp_args_element_name_136;
    PyObject *tmp_args_element_name_137;
    PyObject *tmp_args_element_name_138;
    PyObject *tmp_args_element_name_139;
    PyObject *tmp_args_element_name_140;
    PyObject *tmp_args_element_name_141;
    PyObject *tmp_args_element_name_142;
    PyObject *tmp_args_element_name_143;
    PyObject *tmp_args_element_name_144;
    PyObject *tmp_args_element_name_145;
    PyObject *tmp_args_element_name_146;
    PyObject *tmp_args_element_name_147;
    PyObject *tmp_args_element_name_148;
    PyObject *tmp_args_element_name_149;
    PyObject *tmp_args_element_name_150;
    PyObject *tmp_args_element_name_151;
    PyObject *tmp_args_element_name_152;
    PyObject *tmp_args_element_name_153;
    PyObject *tmp_args_element_name_154;
    PyObject *tmp_args_element_name_155;
    PyObject *tmp_args_element_name_156;
    PyObject *tmp_args_element_name_157;
    PyObject *tmp_args_element_name_158;
    PyObject *tmp_args_element_name_159;
    PyObject *tmp_args_element_name_160;
    PyObject *tmp_args_element_name_161;
    PyObject *tmp_args_element_name_162;
    PyObject *tmp_args_element_name_163;
    PyObject *tmp_args_element_name_164;
    PyObject *tmp_args_element_name_165;
    PyObject *tmp_args_element_name_166;
    PyObject *tmp_args_element_name_167;
    PyObject *tmp_args_element_name_168;
    PyObject *tmp_args_element_name_169;
    PyObject *tmp_args_element_name_170;
    PyObject *tmp_args_element_name_171;
    PyObject *tmp_args_element_name_172;
    PyObject *tmp_args_element_name_173;
    PyObject *tmp_args_element_name_174;
    PyObject *tmp_args_element_name_175;
    PyObject *tmp_args_element_name_176;
    PyObject *tmp_args_element_name_177;
    PyObject *tmp_args_element_name_178;
    PyObject *tmp_args_element_name_179;
    PyObject *tmp_args_element_name_180;
    PyObject *tmp_args_element_name_181;
    PyObject *tmp_args_element_name_182;
    PyObject *tmp_args_element_name_183;
    PyObject *tmp_args_element_name_184;
    PyObject *tmp_args_element_name_185;
    PyObject *tmp_args_element_name_186;
    PyObject *tmp_args_element_name_187;
    PyObject *tmp_args_element_name_188;
    PyObject *tmp_args_element_name_189;
    PyObject *tmp_args_element_name_190;
    PyObject *tmp_args_element_name_191;
    PyObject *tmp_args_element_name_192;
    PyObject *tmp_args_element_name_193;
    PyObject *tmp_args_element_name_194;
    PyObject *tmp_args_element_name_195;
    PyObject *tmp_args_element_name_196;
    PyObject *tmp_args_element_name_197;
    PyObject *tmp_args_element_name_198;
    PyObject *tmp_args_element_name_199;
    PyObject *tmp_args_element_name_200;
    PyObject *tmp_args_element_name_201;
    PyObject *tmp_args_element_name_202;
    PyObject *tmp_args_element_name_203;
    PyObject *tmp_args_element_name_204;
    PyObject *tmp_args_element_name_205;
    PyObject *tmp_args_element_name_206;
    PyObject *tmp_args_element_name_207;
    PyObject *tmp_args_element_name_208;
    PyObject *tmp_args_element_name_209;
    PyObject *tmp_args_element_name_210;
    PyObject *tmp_args_element_name_211;
    PyObject *tmp_args_element_name_212;
    PyObject *tmp_args_element_name_213;
    PyObject *tmp_args_element_name_214;
    PyObject *tmp_args_element_name_215;
    PyObject *tmp_args_element_name_216;
    PyObject *tmp_args_element_name_217;
    PyObject *tmp_args_element_name_218;
    PyObject *tmp_args_element_name_219;
    PyObject *tmp_args_element_name_220;
    PyObject *tmp_args_element_name_221;
    PyObject *tmp_args_element_name_222;
    PyObject *tmp_args_element_name_223;
    PyObject *tmp_args_element_name_224;
    PyObject *tmp_args_element_name_225;
    PyObject *tmp_args_element_name_226;
    PyObject *tmp_args_element_name_227;
    PyObject *tmp_args_element_name_228;
    PyObject *tmp_args_element_name_229;
    PyObject *tmp_args_element_name_230;
    PyObject *tmp_args_element_name_231;
    PyObject *tmp_args_element_name_232;
    PyObject *tmp_args_element_name_233;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_called_name_45;
    PyObject *tmp_called_name_46;
    PyObject *tmp_called_name_47;
    PyObject *tmp_called_name_48;
    PyObject *tmp_called_name_49;
    PyObject *tmp_called_name_50;
    PyObject *tmp_called_name_51;
    PyObject *tmp_called_name_52;
    PyObject *tmp_called_name_53;
    PyObject *tmp_called_name_54;
    PyObject *tmp_called_name_55;
    PyObject *tmp_called_name_56;
    PyObject *tmp_called_name_57;
    PyObject *tmp_called_name_58;
    PyObject *tmp_called_name_59;
    PyObject *tmp_called_name_60;
    PyObject *tmp_called_name_61;
    PyObject *tmp_called_name_62;
    PyObject *tmp_called_name_63;
    PyObject *tmp_called_name_64;
    PyObject *tmp_called_name_65;
    PyObject *tmp_called_name_66;
    PyObject *tmp_called_name_67;
    PyObject *tmp_called_name_68;
    PyObject *tmp_called_name_69;
    PyObject *tmp_called_name_70;
    PyObject *tmp_called_name_71;
    PyObject *tmp_called_name_72;
    PyObject *tmp_called_name_73;
    PyObject *tmp_called_name_74;
    PyObject *tmp_called_name_75;
    PyObject *tmp_called_name_76;
    PyObject *tmp_called_name_77;
    PyObject *tmp_called_name_78;
    PyObject *tmp_called_name_79;
    PyObject *tmp_called_name_80;
    PyObject *tmp_called_name_81;
    PyObject *tmp_called_name_82;
    PyObject *tmp_called_name_83;
    PyObject *tmp_called_name_84;
    PyObject *tmp_called_name_85;
    PyObject *tmp_called_name_86;
    PyObject *tmp_called_name_87;
    PyObject *tmp_called_name_88;
    PyObject *tmp_called_name_89;
    PyObject *tmp_called_name_90;
    PyObject *tmp_called_name_91;
    PyObject *tmp_called_name_92;
    PyObject *tmp_called_name_93;
    PyObject *tmp_called_name_94;
    PyObject *tmp_called_name_95;
    PyObject *tmp_called_name_96;
    PyObject *tmp_called_name_97;
    PyObject *tmp_called_name_98;
    PyObject *tmp_called_name_99;
    PyObject *tmp_called_name_100;
    PyObject *tmp_called_name_101;
    PyObject *tmp_called_name_102;
    PyObject *tmp_called_name_103;
    PyObject *tmp_called_name_104;
    PyObject *tmp_called_name_105;
    PyObject *tmp_called_name_106;
    PyObject *tmp_called_name_107;
    PyObject *tmp_called_name_108;
    PyObject *tmp_called_name_109;
    PyObject *tmp_called_name_110;
    PyObject *tmp_called_name_111;
    PyObject *tmp_called_name_112;
    PyObject *tmp_called_name_113;
    PyObject *tmp_called_name_114;
    PyObject *tmp_called_name_115;
    PyObject *tmp_called_name_116;
    PyObject *tmp_called_name_117;
    PyObject *tmp_called_name_118;
    PyObject *tmp_called_name_119;
    PyObject *tmp_called_name_120;
    PyObject *tmp_called_name_121;
    PyObject *tmp_called_name_122;
    PyObject *tmp_called_name_123;
    PyObject *tmp_called_name_124;
    PyObject *tmp_called_name_125;
    PyObject *tmp_called_name_126;
    PyObject *tmp_called_name_127;
    PyObject *tmp_called_name_128;
    PyObject *tmp_called_name_129;
    PyObject *tmp_called_name_130;
    PyObject *tmp_called_name_131;
    PyObject *tmp_called_name_132;
    PyObject *tmp_called_name_133;
    PyObject *tmp_called_name_134;
    PyObject *tmp_called_name_135;
    PyObject *tmp_called_name_136;
    PyObject *tmp_called_name_137;
    PyObject *tmp_called_name_138;
    PyObject *tmp_called_name_139;
    PyObject *tmp_called_name_140;
    PyObject *tmp_called_name_141;
    PyObject *tmp_called_name_142;
    PyObject *tmp_called_name_143;
    PyObject *tmp_called_name_144;
    PyObject *tmp_called_name_145;
    PyObject *tmp_called_name_146;
    PyObject *tmp_called_name_147;
    PyObject *tmp_called_name_148;
    PyObject *tmp_called_name_149;
    PyObject *tmp_called_name_150;
    PyObject *tmp_called_name_151;
    PyObject *tmp_called_name_152;
    PyObject *tmp_called_name_153;
    PyObject *tmp_called_name_154;
    PyObject *tmp_called_name_155;
    PyObject *tmp_called_name_156;
    PyObject *tmp_called_name_157;
    PyObject *tmp_called_name_158;
    PyObject *tmp_called_name_159;
    PyObject *tmp_called_name_160;
    PyObject *tmp_called_name_161;
    PyObject *tmp_called_name_162;
    PyObject *tmp_called_name_163;
    PyObject *tmp_called_name_164;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_key_12;
    PyObject *tmp_dict_key_13;
    PyObject *tmp_dict_key_14;
    PyObject *tmp_dict_key_15;
    PyObject *tmp_dict_key_16;
    PyObject *tmp_dict_key_17;
    PyObject *tmp_dict_key_18;
    PyObject *tmp_dict_key_19;
    PyObject *tmp_dict_key_20;
    PyObject *tmp_dict_key_21;
    PyObject *tmp_dict_key_22;
    PyObject *tmp_dict_key_23;
    PyObject *tmp_dict_key_24;
    PyObject *tmp_dict_key_25;
    PyObject *tmp_dict_key_26;
    PyObject *tmp_dict_key_27;
    PyObject *tmp_dict_key_28;
    PyObject *tmp_dict_key_29;
    PyObject *tmp_dict_key_30;
    PyObject *tmp_dict_key_31;
    PyObject *tmp_dict_key_32;
    PyObject *tmp_dict_key_33;
    PyObject *tmp_dict_key_34;
    PyObject *tmp_dict_key_35;
    PyObject *tmp_dict_key_36;
    PyObject *tmp_dict_key_37;
    PyObject *tmp_dict_key_38;
    PyObject *tmp_dict_key_39;
    PyObject *tmp_dict_key_40;
    PyObject *tmp_dict_key_41;
    PyObject *tmp_dict_key_42;
    PyObject *tmp_dict_key_43;
    PyObject *tmp_dict_key_44;
    PyObject *tmp_dict_key_45;
    PyObject *tmp_dict_key_46;
    PyObject *tmp_dict_key_47;
    PyObject *tmp_dict_key_48;
    PyObject *tmp_dict_key_49;
    PyObject *tmp_dict_key_50;
    PyObject *tmp_dict_key_51;
    PyObject *tmp_dict_key_52;
    PyObject *tmp_dict_key_53;
    PyObject *tmp_dict_key_54;
    PyObject *tmp_dict_key_55;
    PyObject *tmp_dict_key_56;
    PyObject *tmp_dict_key_57;
    PyObject *tmp_dict_key_58;
    PyObject *tmp_dict_key_59;
    PyObject *tmp_dict_key_60;
    PyObject *tmp_dict_key_61;
    PyObject *tmp_dict_key_62;
    PyObject *tmp_dict_key_63;
    PyObject *tmp_dict_key_64;
    PyObject *tmp_dict_key_65;
    PyObject *tmp_dict_key_66;
    PyObject *tmp_dict_key_67;
    PyObject *tmp_dict_key_68;
    PyObject *tmp_dict_key_69;
    PyObject *tmp_dict_key_70;
    PyObject *tmp_dict_key_71;
    PyObject *tmp_dict_key_72;
    PyObject *tmp_dict_key_73;
    PyObject *tmp_dict_key_74;
    PyObject *tmp_dict_key_75;
    PyObject *tmp_dict_key_76;
    PyObject *tmp_dict_key_77;
    PyObject *tmp_dict_key_78;
    PyObject *tmp_dict_key_79;
    PyObject *tmp_dict_key_80;
    PyObject *tmp_dict_key_81;
    PyObject *tmp_dict_key_82;
    PyObject *tmp_dict_key_83;
    PyObject *tmp_dict_key_84;
    PyObject *tmp_dict_key_85;
    PyObject *tmp_dict_key_86;
    PyObject *tmp_dict_key_87;
    PyObject *tmp_dict_key_88;
    PyObject *tmp_dict_key_89;
    PyObject *tmp_dict_key_90;
    PyObject *tmp_dict_key_91;
    PyObject *tmp_dict_key_92;
    PyObject *tmp_dict_key_93;
    PyObject *tmp_dict_key_94;
    PyObject *tmp_dict_key_95;
    PyObject *tmp_dict_key_96;
    PyObject *tmp_dict_key_97;
    PyObject *tmp_dict_key_98;
    PyObject *tmp_dict_key_99;
    PyObject *tmp_dict_key_100;
    PyObject *tmp_dict_key_101;
    PyObject *tmp_dict_key_102;
    PyObject *tmp_dict_key_103;
    PyObject *tmp_dict_key_104;
    PyObject *tmp_dict_key_105;
    PyObject *tmp_dict_key_106;
    PyObject *tmp_dict_key_107;
    PyObject *tmp_dict_key_108;
    PyObject *tmp_dict_key_109;
    PyObject *tmp_dict_key_110;
    PyObject *tmp_dict_key_111;
    PyObject *tmp_dict_key_112;
    PyObject *tmp_dict_key_113;
    PyObject *tmp_dict_key_114;
    PyObject *tmp_dict_key_115;
    PyObject *tmp_dict_key_116;
    PyObject *tmp_dict_key_117;
    PyObject *tmp_dict_key_118;
    PyObject *tmp_dict_key_119;
    PyObject *tmp_dict_key_120;
    PyObject *tmp_dict_key_121;
    PyObject *tmp_dict_key_122;
    PyObject *tmp_dict_key_123;
    PyObject *tmp_dict_key_124;
    PyObject *tmp_dict_key_125;
    PyObject *tmp_dict_key_126;
    PyObject *tmp_dict_key_127;
    PyObject *tmp_dict_key_128;
    PyObject *tmp_dict_key_129;
    PyObject *tmp_dict_key_130;
    PyObject *tmp_dict_key_131;
    PyObject *tmp_dict_key_132;
    PyObject *tmp_dict_key_133;
    PyObject *tmp_dict_key_134;
    PyObject *tmp_dict_key_135;
    PyObject *tmp_dict_key_136;
    PyObject *tmp_dict_key_137;
    PyObject *tmp_dict_key_138;
    PyObject *tmp_dict_key_139;
    PyObject *tmp_dict_key_140;
    PyObject *tmp_dict_key_141;
    PyObject *tmp_dict_key_142;
    PyObject *tmp_dict_key_143;
    PyObject *tmp_dict_key_144;
    PyObject *tmp_dict_key_145;
    PyObject *tmp_dict_key_146;
    PyObject *tmp_dict_key_147;
    PyObject *tmp_dict_key_148;
    PyObject *tmp_dict_key_149;
    PyObject *tmp_dict_key_150;
    PyObject *tmp_dict_key_151;
    PyObject *tmp_dict_key_152;
    PyObject *tmp_dict_key_153;
    PyObject *tmp_dict_key_154;
    PyObject *tmp_dict_key_155;
    PyObject *tmp_dict_key_156;
    PyObject *tmp_dict_key_157;
    PyObject *tmp_dict_key_158;
    PyObject *tmp_dict_key_159;
    PyObject *tmp_dict_key_160;
    PyObject *tmp_dict_key_161;
    PyObject *tmp_dict_key_162;
    PyObject *tmp_dict_key_163;
    PyObject *tmp_dict_key_164;
    PyObject *tmp_dict_key_165;
    PyObject *tmp_dict_key_166;
    PyObject *tmp_dict_key_167;
    PyObject *tmp_dict_key_168;
    PyObject *tmp_dict_key_169;
    PyObject *tmp_dict_key_170;
    PyObject *tmp_dict_key_171;
    PyObject *tmp_dict_key_172;
    PyObject *tmp_dict_key_173;
    PyObject *tmp_dict_key_174;
    PyObject *tmp_dict_key_175;
    PyObject *tmp_dict_key_176;
    PyObject *tmp_dict_key_177;
    PyObject *tmp_dict_key_178;
    PyObject *tmp_dict_key_179;
    PyObject *tmp_dict_key_180;
    PyObject *tmp_dict_key_181;
    PyObject *tmp_dict_key_182;
    PyObject *tmp_dict_key_183;
    PyObject *tmp_dict_key_184;
    PyObject *tmp_dict_key_185;
    PyObject *tmp_dict_key_186;
    PyObject *tmp_dict_key_187;
    PyObject *tmp_dict_key_188;
    PyObject *tmp_dict_key_189;
    PyObject *tmp_dict_key_190;
    PyObject *tmp_dict_key_191;
    PyObject *tmp_dict_key_192;
    PyObject *tmp_dict_key_193;
    PyObject *tmp_dict_key_194;
    PyObject *tmp_dict_key_195;
    PyObject *tmp_dict_key_196;
    PyObject *tmp_dict_key_197;
    PyObject *tmp_dict_key_198;
    PyObject *tmp_dict_key_199;
    PyObject *tmp_dict_key_200;
    PyObject *tmp_dict_key_201;
    PyObject *tmp_dict_key_202;
    PyObject *tmp_dict_key_203;
    PyObject *tmp_dict_key_204;
    PyObject *tmp_dict_key_205;
    PyObject *tmp_dict_key_206;
    PyObject *tmp_dict_key_207;
    PyObject *tmp_dict_key_208;
    PyObject *tmp_dict_key_209;
    PyObject *tmp_dict_key_210;
    PyObject *tmp_dict_key_211;
    PyObject *tmp_dict_key_212;
    PyObject *tmp_dict_key_213;
    PyObject *tmp_dict_key_214;
    PyObject *tmp_dict_key_215;
    PyObject *tmp_dict_key_216;
    PyObject *tmp_dict_key_217;
    PyObject *tmp_dict_key_218;
    PyObject *tmp_dict_key_219;
    PyObject *tmp_dict_key_220;
    PyObject *tmp_dict_key_221;
    PyObject *tmp_dict_key_222;
    PyObject *tmp_dict_key_223;
    PyObject *tmp_dict_key_224;
    PyObject *tmp_dict_key_225;
    PyObject *tmp_dict_key_226;
    PyObject *tmp_dict_key_227;
    PyObject *tmp_dict_key_228;
    PyObject *tmp_dict_key_229;
    PyObject *tmp_dict_key_230;
    PyObject *tmp_dict_key_231;
    PyObject *tmp_dict_key_232;
    PyObject *tmp_dict_key_233;
    PyObject *tmp_dict_key_234;
    PyObject *tmp_dict_key_235;
    PyObject *tmp_dict_key_236;
    PyObject *tmp_dict_key_237;
    PyObject *tmp_dict_key_238;
    PyObject *tmp_dict_key_239;
    PyObject *tmp_dict_key_240;
    PyObject *tmp_dict_key_241;
    PyObject *tmp_dict_key_242;
    PyObject *tmp_dict_key_243;
    PyObject *tmp_dict_key_244;
    PyObject *tmp_dict_key_245;
    PyObject *tmp_dict_key_246;
    PyObject *tmp_dict_key_247;
    PyObject *tmp_dict_key_248;
    PyObject *tmp_dict_key_249;
    PyObject *tmp_dict_key_250;
    PyObject *tmp_dict_key_251;
    PyObject *tmp_dict_key_252;
    PyObject *tmp_dict_key_253;
    PyObject *tmp_dict_key_254;
    PyObject *tmp_dict_key_255;
    PyObject *tmp_dict_key_256;
    PyObject *tmp_dict_key_257;
    PyObject *tmp_dict_key_258;
    PyObject *tmp_dict_key_259;
    PyObject *tmp_dict_key_260;
    PyObject *tmp_dict_key_261;
    PyObject *tmp_dict_key_262;
    PyObject *tmp_dict_key_263;
    PyObject *tmp_dict_key_264;
    PyObject *tmp_dict_key_265;
    PyObject *tmp_dict_key_266;
    PyObject *tmp_dict_key_267;
    PyObject *tmp_dict_key_268;
    PyObject *tmp_dict_key_269;
    PyObject *tmp_dict_key_270;
    PyObject *tmp_dict_key_271;
    PyObject *tmp_dict_key_272;
    PyObject *tmp_dict_key_273;
    PyObject *tmp_dict_key_274;
    PyObject *tmp_dict_key_275;
    PyObject *tmp_dict_key_276;
    PyObject *tmp_dict_key_277;
    PyObject *tmp_dict_key_278;
    PyObject *tmp_dict_key_279;
    PyObject *tmp_dict_key_280;
    PyObject *tmp_dict_key_281;
    PyObject *tmp_dict_key_282;
    PyObject *tmp_dict_key_283;
    PyObject *tmp_dict_key_284;
    PyObject *tmp_dict_key_285;
    PyObject *tmp_dict_key_286;
    PyObject *tmp_dict_key_287;
    PyObject *tmp_dict_key_288;
    PyObject *tmp_dict_key_289;
    PyObject *tmp_dict_key_290;
    PyObject *tmp_dict_key_291;
    PyObject *tmp_dict_key_292;
    PyObject *tmp_dict_key_293;
    PyObject *tmp_dict_key_294;
    PyObject *tmp_dict_key_295;
    PyObject *tmp_dict_key_296;
    PyObject *tmp_dict_key_297;
    PyObject *tmp_dict_key_298;
    PyObject *tmp_dict_key_299;
    PyObject *tmp_dict_key_300;
    PyObject *tmp_dict_key_301;
    PyObject *tmp_dict_key_302;
    PyObject *tmp_dict_key_303;
    PyObject *tmp_dict_key_304;
    PyObject *tmp_dict_key_305;
    PyObject *tmp_dict_key_306;
    PyObject *tmp_dict_key_307;
    PyObject *tmp_dict_key_308;
    PyObject *tmp_dict_key_309;
    PyObject *tmp_dict_key_310;
    PyObject *tmp_dict_key_311;
    PyObject *tmp_dict_key_312;
    PyObject *tmp_dict_key_313;
    PyObject *tmp_dict_key_314;
    PyObject *tmp_dict_key_315;
    PyObject *tmp_dict_key_316;
    PyObject *tmp_dict_key_317;
    PyObject *tmp_dict_key_318;
    PyObject *tmp_dict_key_319;
    PyObject *tmp_dict_key_320;
    PyObject *tmp_dict_key_321;
    PyObject *tmp_dict_key_322;
    PyObject *tmp_dict_key_323;
    PyObject *tmp_dict_key_324;
    PyObject *tmp_dict_key_325;
    PyObject *tmp_dict_key_326;
    PyObject *tmp_dict_key_327;
    PyObject *tmp_dict_key_328;
    PyObject *tmp_dict_key_329;
    PyObject *tmp_dict_key_330;
    PyObject *tmp_dict_key_331;
    PyObject *tmp_dict_key_332;
    PyObject *tmp_dict_key_333;
    PyObject *tmp_dict_key_334;
    PyObject *tmp_dict_key_335;
    PyObject *tmp_dict_key_336;
    PyObject *tmp_dict_key_337;
    PyObject *tmp_dict_key_338;
    PyObject *tmp_dict_key_339;
    PyObject *tmp_dict_key_340;
    PyObject *tmp_dict_key_341;
    PyObject *tmp_dict_key_342;
    PyObject *tmp_dict_key_343;
    PyObject *tmp_dict_key_344;
    PyObject *tmp_dict_key_345;
    PyObject *tmp_dict_key_346;
    PyObject *tmp_dict_key_347;
    PyObject *tmp_dict_key_348;
    PyObject *tmp_dict_key_349;
    PyObject *tmp_dict_key_350;
    PyObject *tmp_dict_key_351;
    PyObject *tmp_dict_key_352;
    PyObject *tmp_dict_key_353;
    PyObject *tmp_dict_key_354;
    PyObject *tmp_dict_key_355;
    PyObject *tmp_dict_key_356;
    PyObject *tmp_dict_key_357;
    PyObject *tmp_dict_key_358;
    PyObject *tmp_dict_key_359;
    PyObject *tmp_dict_key_360;
    PyObject *tmp_dict_key_361;
    PyObject *tmp_dict_key_362;
    PyObject *tmp_dict_key_363;
    PyObject *tmp_dict_key_364;
    PyObject *tmp_dict_key_365;
    PyObject *tmp_dict_key_366;
    PyObject *tmp_dict_key_367;
    PyObject *tmp_dict_key_368;
    PyObject *tmp_dict_key_369;
    PyObject *tmp_dict_key_370;
    PyObject *tmp_dict_key_371;
    PyObject *tmp_dict_key_372;
    PyObject *tmp_dict_key_373;
    PyObject *tmp_dict_key_374;
    PyObject *tmp_dict_key_375;
    PyObject *tmp_dict_key_376;
    PyObject *tmp_dict_key_377;
    PyObject *tmp_dict_key_378;
    PyObject *tmp_dict_key_379;
    PyObject *tmp_dict_key_380;
    PyObject *tmp_dict_key_381;
    PyObject *tmp_dict_key_382;
    PyObject *tmp_dict_key_383;
    PyObject *tmp_dict_key_384;
    PyObject *tmp_dict_key_385;
    PyObject *tmp_dict_key_386;
    PyObject *tmp_dict_key_387;
    PyObject *tmp_dict_key_388;
    PyObject *tmp_dict_key_389;
    PyObject *tmp_dict_key_390;
    PyObject *tmp_dict_key_391;
    PyObject *tmp_dict_key_392;
    PyObject *tmp_dict_key_393;
    PyObject *tmp_dict_key_394;
    PyObject *tmp_dict_key_395;
    PyObject *tmp_dict_key_396;
    PyObject *tmp_dict_key_397;
    PyObject *tmp_dict_key_398;
    PyObject *tmp_dict_key_399;
    PyObject *tmp_dict_key_400;
    PyObject *tmp_dict_key_401;
    PyObject *tmp_dict_key_402;
    PyObject *tmp_dict_key_403;
    PyObject *tmp_dict_key_404;
    PyObject *tmp_dict_key_405;
    PyObject *tmp_dict_key_406;
    PyObject *tmp_dict_key_407;
    PyObject *tmp_dict_key_408;
    PyObject *tmp_dict_key_409;
    PyObject *tmp_dict_key_410;
    PyObject *tmp_dict_key_411;
    PyObject *tmp_dict_key_412;
    PyObject *tmp_dict_key_413;
    PyObject *tmp_dict_key_414;
    PyObject *tmp_dict_key_415;
    PyObject *tmp_dict_key_416;
    PyObject *tmp_dict_key_417;
    PyObject *tmp_dict_key_418;
    PyObject *tmp_dict_key_419;
    PyObject *tmp_dict_key_420;
    PyObject *tmp_dict_key_421;
    PyObject *tmp_dict_key_422;
    PyObject *tmp_dict_key_423;
    PyObject *tmp_dict_key_424;
    PyObject *tmp_dict_key_425;
    PyObject *tmp_dict_key_426;
    PyObject *tmp_dict_key_427;
    PyObject *tmp_dict_key_428;
    PyObject *tmp_dict_key_429;
    PyObject *tmp_dict_key_430;
    PyObject *tmp_dict_key_431;
    PyObject *tmp_dict_key_432;
    PyObject *tmp_dict_key_433;
    PyObject *tmp_dict_key_434;
    PyObject *tmp_dict_key_435;
    PyObject *tmp_dict_key_436;
    PyObject *tmp_dict_key_437;
    PyObject *tmp_dict_key_438;
    PyObject *tmp_dict_key_439;
    PyObject *tmp_dict_key_440;
    PyObject *tmp_dict_key_441;
    PyObject *tmp_dict_key_442;
    PyObject *tmp_dict_key_443;
    PyObject *tmp_dict_key_444;
    PyObject *tmp_dict_key_445;
    PyObject *tmp_dict_key_446;
    PyObject *tmp_dict_key_447;
    PyObject *tmp_dict_key_448;
    PyObject *tmp_dict_key_449;
    PyObject *tmp_dict_key_450;
    PyObject *tmp_dict_key_451;
    PyObject *tmp_dict_key_452;
    PyObject *tmp_dict_key_453;
    PyObject *tmp_dict_key_454;
    PyObject *tmp_dict_key_455;
    PyObject *tmp_dict_key_456;
    PyObject *tmp_dict_key_457;
    PyObject *tmp_dict_key_458;
    PyObject *tmp_dict_key_459;
    PyObject *tmp_dict_key_460;
    PyObject *tmp_dict_key_461;
    PyObject *tmp_dict_key_462;
    PyObject *tmp_dict_key_463;
    PyObject *tmp_dict_key_464;
    PyObject *tmp_dict_key_465;
    PyObject *tmp_dict_key_466;
    PyObject *tmp_dict_key_467;
    PyObject *tmp_dict_key_468;
    PyObject *tmp_dict_key_469;
    PyObject *tmp_dict_key_470;
    PyObject *tmp_dict_key_471;
    PyObject *tmp_dict_key_472;
    PyObject *tmp_dict_key_473;
    PyObject *tmp_dict_key_474;
    PyObject *tmp_dict_key_475;
    PyObject *tmp_dict_key_476;
    PyObject *tmp_dict_key_477;
    PyObject *tmp_dict_key_478;
    PyObject *tmp_dict_key_479;
    PyObject *tmp_dict_key_480;
    PyObject *tmp_dict_key_481;
    PyObject *tmp_dict_key_482;
    PyObject *tmp_dict_key_483;
    PyObject *tmp_dict_key_484;
    PyObject *tmp_dict_key_485;
    PyObject *tmp_dict_key_486;
    PyObject *tmp_dict_key_487;
    PyObject *tmp_dict_key_488;
    PyObject *tmp_dict_key_489;
    PyObject *tmp_dict_key_490;
    PyObject *tmp_dict_key_491;
    PyObject *tmp_dict_key_492;
    PyObject *tmp_dict_key_493;
    PyObject *tmp_dict_key_494;
    PyObject *tmp_dict_key_495;
    PyObject *tmp_dict_key_496;
    PyObject *tmp_dict_key_497;
    PyObject *tmp_dict_key_498;
    PyObject *tmp_dict_key_499;
    PyObject *tmp_dict_key_500;
    PyObject *tmp_dict_key_501;
    PyObject *tmp_dict_key_502;
    PyObject *tmp_dict_key_503;
    PyObject *tmp_dict_key_504;
    PyObject *tmp_dict_key_505;
    PyObject *tmp_dict_key_506;
    PyObject *tmp_dict_key_507;
    PyObject *tmp_dict_key_508;
    PyObject *tmp_dict_key_509;
    PyObject *tmp_dict_key_510;
    PyObject *tmp_dict_key_511;
    PyObject *tmp_dict_key_512;
    PyObject *tmp_dict_key_513;
    PyObject *tmp_dict_key_514;
    PyObject *tmp_dict_key_515;
    PyObject *tmp_dict_key_516;
    PyObject *tmp_dict_key_517;
    PyObject *tmp_dict_key_518;
    PyObject *tmp_dict_key_519;
    PyObject *tmp_dict_key_520;
    PyObject *tmp_dict_key_521;
    PyObject *tmp_dict_key_522;
    PyObject *tmp_dict_key_523;
    PyObject *tmp_dict_key_524;
    PyObject *tmp_dict_key_525;
    PyObject *tmp_dict_key_526;
    PyObject *tmp_dict_key_527;
    PyObject *tmp_dict_key_528;
    PyObject *tmp_dict_key_529;
    PyObject *tmp_dict_key_530;
    PyObject *tmp_dict_key_531;
    PyObject *tmp_dict_key_532;
    PyObject *tmp_dict_key_533;
    PyObject *tmp_dict_key_534;
    PyObject *tmp_dict_key_535;
    PyObject *tmp_dict_key_536;
    PyObject *tmp_dict_key_537;
    PyObject *tmp_dict_key_538;
    PyObject *tmp_dict_key_539;
    PyObject *tmp_dict_key_540;
    PyObject *tmp_dict_key_541;
    PyObject *tmp_dict_key_542;
    PyObject *tmp_dict_key_543;
    PyObject *tmp_dict_key_544;
    PyObject *tmp_dict_key_545;
    PyObject *tmp_dict_key_546;
    PyObject *tmp_dict_key_547;
    PyObject *tmp_dict_key_548;
    PyObject *tmp_dict_key_549;
    PyObject *tmp_dict_key_550;
    PyObject *tmp_dict_key_551;
    PyObject *tmp_dict_key_552;
    PyObject *tmp_dict_key_553;
    PyObject *tmp_dict_key_554;
    PyObject *tmp_dict_key_555;
    PyObject *tmp_dict_key_556;
    PyObject *tmp_dict_key_557;
    PyObject *tmp_dict_key_558;
    PyObject *tmp_dict_key_559;
    PyObject *tmp_dict_key_560;
    PyObject *tmp_dict_key_561;
    PyObject *tmp_dict_key_562;
    PyObject *tmp_dict_key_563;
    PyObject *tmp_dict_key_564;
    PyObject *tmp_dict_key_565;
    PyObject *tmp_dict_key_566;
    PyObject *tmp_dict_key_567;
    PyObject *tmp_dict_key_568;
    PyObject *tmp_dict_key_569;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dict_value_12;
    PyObject *tmp_dict_value_13;
    PyObject *tmp_dict_value_14;
    PyObject *tmp_dict_value_15;
    PyObject *tmp_dict_value_16;
    PyObject *tmp_dict_value_17;
    PyObject *tmp_dict_value_18;
    PyObject *tmp_dict_value_19;
    PyObject *tmp_dict_value_20;
    PyObject *tmp_dict_value_21;
    PyObject *tmp_dict_value_22;
    PyObject *tmp_dict_value_23;
    PyObject *tmp_dict_value_24;
    PyObject *tmp_dict_value_25;
    PyObject *tmp_dict_value_26;
    PyObject *tmp_dict_value_27;
    PyObject *tmp_dict_value_28;
    PyObject *tmp_dict_value_29;
    PyObject *tmp_dict_value_30;
    PyObject *tmp_dict_value_31;
    PyObject *tmp_dict_value_32;
    PyObject *tmp_dict_value_33;
    PyObject *tmp_dict_value_34;
    PyObject *tmp_dict_value_35;
    PyObject *tmp_dict_value_36;
    PyObject *tmp_dict_value_37;
    PyObject *tmp_dict_value_38;
    PyObject *tmp_dict_value_39;
    PyObject *tmp_dict_value_40;
    PyObject *tmp_dict_value_41;
    PyObject *tmp_dict_value_42;
    PyObject *tmp_dict_value_43;
    PyObject *tmp_dict_value_44;
    PyObject *tmp_dict_value_45;
    PyObject *tmp_dict_value_46;
    PyObject *tmp_dict_value_47;
    PyObject *tmp_dict_value_48;
    PyObject *tmp_dict_value_49;
    PyObject *tmp_dict_value_50;
    PyObject *tmp_dict_value_51;
    PyObject *tmp_dict_value_52;
    PyObject *tmp_dict_value_53;
    PyObject *tmp_dict_value_54;
    PyObject *tmp_dict_value_55;
    PyObject *tmp_dict_value_56;
    PyObject *tmp_dict_value_57;
    PyObject *tmp_dict_value_58;
    PyObject *tmp_dict_value_59;
    PyObject *tmp_dict_value_60;
    PyObject *tmp_dict_value_61;
    PyObject *tmp_dict_value_62;
    PyObject *tmp_dict_value_63;
    PyObject *tmp_dict_value_64;
    PyObject *tmp_dict_value_65;
    PyObject *tmp_dict_value_66;
    PyObject *tmp_dict_value_67;
    PyObject *tmp_dict_value_68;
    PyObject *tmp_dict_value_69;
    PyObject *tmp_dict_value_70;
    PyObject *tmp_dict_value_71;
    PyObject *tmp_dict_value_72;
    PyObject *tmp_dict_value_73;
    PyObject *tmp_dict_value_74;
    PyObject *tmp_dict_value_75;
    PyObject *tmp_dict_value_76;
    PyObject *tmp_dict_value_77;
    PyObject *tmp_dict_value_78;
    PyObject *tmp_dict_value_79;
    PyObject *tmp_dict_value_80;
    PyObject *tmp_dict_value_81;
    PyObject *tmp_dict_value_82;
    PyObject *tmp_dict_value_83;
    PyObject *tmp_dict_value_84;
    PyObject *tmp_dict_value_85;
    PyObject *tmp_dict_value_86;
    PyObject *tmp_dict_value_87;
    PyObject *tmp_dict_value_88;
    PyObject *tmp_dict_value_89;
    PyObject *tmp_dict_value_90;
    PyObject *tmp_dict_value_91;
    PyObject *tmp_dict_value_92;
    PyObject *tmp_dict_value_93;
    PyObject *tmp_dict_value_94;
    PyObject *tmp_dict_value_95;
    PyObject *tmp_dict_value_96;
    PyObject *tmp_dict_value_97;
    PyObject *tmp_dict_value_98;
    PyObject *tmp_dict_value_99;
    PyObject *tmp_dict_value_100;
    PyObject *tmp_dict_value_101;
    PyObject *tmp_dict_value_102;
    PyObject *tmp_dict_value_103;
    PyObject *tmp_dict_value_104;
    PyObject *tmp_dict_value_105;
    PyObject *tmp_dict_value_106;
    PyObject *tmp_dict_value_107;
    PyObject *tmp_dict_value_108;
    PyObject *tmp_dict_value_109;
    PyObject *tmp_dict_value_110;
    PyObject *tmp_dict_value_111;
    PyObject *tmp_dict_value_112;
    PyObject *tmp_dict_value_113;
    PyObject *tmp_dict_value_114;
    PyObject *tmp_dict_value_115;
    PyObject *tmp_dict_value_116;
    PyObject *tmp_dict_value_117;
    PyObject *tmp_dict_value_118;
    PyObject *tmp_dict_value_119;
    PyObject *tmp_dict_value_120;
    PyObject *tmp_dict_value_121;
    PyObject *tmp_dict_value_122;
    PyObject *tmp_dict_value_123;
    PyObject *tmp_dict_value_124;
    PyObject *tmp_dict_value_125;
    PyObject *tmp_dict_value_126;
    PyObject *tmp_dict_value_127;
    PyObject *tmp_dict_value_128;
    PyObject *tmp_dict_value_129;
    PyObject *tmp_dict_value_130;
    PyObject *tmp_dict_value_131;
    PyObject *tmp_dict_value_132;
    PyObject *tmp_dict_value_133;
    PyObject *tmp_dict_value_134;
    PyObject *tmp_dict_value_135;
    PyObject *tmp_dict_value_136;
    PyObject *tmp_dict_value_137;
    PyObject *tmp_dict_value_138;
    PyObject *tmp_dict_value_139;
    PyObject *tmp_dict_value_140;
    PyObject *tmp_dict_value_141;
    PyObject *tmp_dict_value_142;
    PyObject *tmp_dict_value_143;
    PyObject *tmp_dict_value_144;
    PyObject *tmp_dict_value_145;
    PyObject *tmp_dict_value_146;
    PyObject *tmp_dict_value_147;
    PyObject *tmp_dict_value_148;
    PyObject *tmp_dict_value_149;
    PyObject *tmp_dict_value_150;
    PyObject *tmp_dict_value_151;
    PyObject *tmp_dict_value_152;
    PyObject *tmp_dict_value_153;
    PyObject *tmp_dict_value_154;
    PyObject *tmp_dict_value_155;
    PyObject *tmp_dict_value_156;
    PyObject *tmp_dict_value_157;
    PyObject *tmp_dict_value_158;
    PyObject *tmp_dict_value_159;
    PyObject *tmp_dict_value_160;
    PyObject *tmp_dict_value_161;
    PyObject *tmp_dict_value_162;
    PyObject *tmp_dict_value_163;
    PyObject *tmp_dict_value_164;
    PyObject *tmp_dict_value_165;
    PyObject *tmp_dict_value_166;
    PyObject *tmp_dict_value_167;
    PyObject *tmp_dict_value_168;
    PyObject *tmp_dict_value_169;
    PyObject *tmp_dict_value_170;
    PyObject *tmp_dict_value_171;
    PyObject *tmp_dict_value_172;
    PyObject *tmp_dict_value_173;
    PyObject *tmp_dict_value_174;
    PyObject *tmp_dict_value_175;
    PyObject *tmp_dict_value_176;
    PyObject *tmp_dict_value_177;
    PyObject *tmp_dict_value_178;
    PyObject *tmp_dict_value_179;
    PyObject *tmp_dict_value_180;
    PyObject *tmp_dict_value_181;
    PyObject *tmp_dict_value_182;
    PyObject *tmp_dict_value_183;
    PyObject *tmp_dict_value_184;
    PyObject *tmp_dict_value_185;
    PyObject *tmp_dict_value_186;
    PyObject *tmp_dict_value_187;
    PyObject *tmp_dict_value_188;
    PyObject *tmp_dict_value_189;
    PyObject *tmp_dict_value_190;
    PyObject *tmp_dict_value_191;
    PyObject *tmp_dict_value_192;
    PyObject *tmp_dict_value_193;
    PyObject *tmp_dict_value_194;
    PyObject *tmp_dict_value_195;
    PyObject *tmp_dict_value_196;
    PyObject *tmp_dict_value_197;
    PyObject *tmp_dict_value_198;
    PyObject *tmp_dict_value_199;
    PyObject *tmp_dict_value_200;
    PyObject *tmp_dict_value_201;
    PyObject *tmp_dict_value_202;
    PyObject *tmp_dict_value_203;
    PyObject *tmp_dict_value_204;
    PyObject *tmp_dict_value_205;
    PyObject *tmp_dict_value_206;
    PyObject *tmp_dict_value_207;
    PyObject *tmp_dict_value_208;
    PyObject *tmp_dict_value_209;
    PyObject *tmp_dict_value_210;
    PyObject *tmp_dict_value_211;
    PyObject *tmp_dict_value_212;
    PyObject *tmp_dict_value_213;
    PyObject *tmp_dict_value_214;
    PyObject *tmp_dict_value_215;
    PyObject *tmp_dict_value_216;
    PyObject *tmp_dict_value_217;
    PyObject *tmp_dict_value_218;
    PyObject *tmp_dict_value_219;
    PyObject *tmp_dict_value_220;
    PyObject *tmp_dict_value_221;
    PyObject *tmp_dict_value_222;
    PyObject *tmp_dict_value_223;
    PyObject *tmp_dict_value_224;
    PyObject *tmp_dict_value_225;
    PyObject *tmp_dict_value_226;
    PyObject *tmp_dict_value_227;
    PyObject *tmp_dict_value_228;
    PyObject *tmp_dict_value_229;
    PyObject *tmp_dict_value_230;
    PyObject *tmp_dict_value_231;
    PyObject *tmp_dict_value_232;
    PyObject *tmp_dict_value_233;
    PyObject *tmp_dict_value_234;
    PyObject *tmp_dict_value_235;
    PyObject *tmp_dict_value_236;
    PyObject *tmp_dict_value_237;
    PyObject *tmp_dict_value_238;
    PyObject *tmp_dict_value_239;
    PyObject *tmp_dict_value_240;
    PyObject *tmp_dict_value_241;
    PyObject *tmp_dict_value_242;
    PyObject *tmp_dict_value_243;
    PyObject *tmp_dict_value_244;
    PyObject *tmp_dict_value_245;
    PyObject *tmp_dict_value_246;
    PyObject *tmp_dict_value_247;
    PyObject *tmp_dict_value_248;
    PyObject *tmp_dict_value_249;
    PyObject *tmp_dict_value_250;
    PyObject *tmp_dict_value_251;
    PyObject *tmp_dict_value_252;
    PyObject *tmp_dict_value_253;
    PyObject *tmp_dict_value_254;
    PyObject *tmp_dict_value_255;
    PyObject *tmp_dict_value_256;
    PyObject *tmp_dict_value_257;
    PyObject *tmp_dict_value_258;
    PyObject *tmp_dict_value_259;
    PyObject *tmp_dict_value_260;
    PyObject *tmp_dict_value_261;
    PyObject *tmp_dict_value_262;
    PyObject *tmp_dict_value_263;
    PyObject *tmp_dict_value_264;
    PyObject *tmp_dict_value_265;
    PyObject *tmp_dict_value_266;
    PyObject *tmp_dict_value_267;
    PyObject *tmp_dict_value_268;
    PyObject *tmp_dict_value_269;
    PyObject *tmp_dict_value_270;
    PyObject *tmp_dict_value_271;
    PyObject *tmp_dict_value_272;
    PyObject *tmp_dict_value_273;
    PyObject *tmp_dict_value_274;
    PyObject *tmp_dict_value_275;
    PyObject *tmp_dict_value_276;
    PyObject *tmp_dict_value_277;
    PyObject *tmp_dict_value_278;
    PyObject *tmp_dict_value_279;
    PyObject *tmp_dict_value_280;
    PyObject *tmp_dict_value_281;
    PyObject *tmp_dict_value_282;
    PyObject *tmp_dict_value_283;
    PyObject *tmp_dict_value_284;
    PyObject *tmp_dict_value_285;
    PyObject *tmp_dict_value_286;
    PyObject *tmp_dict_value_287;
    PyObject *tmp_dict_value_288;
    PyObject *tmp_dict_value_289;
    PyObject *tmp_dict_value_290;
    PyObject *tmp_dict_value_291;
    PyObject *tmp_dict_value_292;
    PyObject *tmp_dict_value_293;
    PyObject *tmp_dict_value_294;
    PyObject *tmp_dict_value_295;
    PyObject *tmp_dict_value_296;
    PyObject *tmp_dict_value_297;
    PyObject *tmp_dict_value_298;
    PyObject *tmp_dict_value_299;
    PyObject *tmp_dict_value_300;
    PyObject *tmp_dict_value_301;
    PyObject *tmp_dict_value_302;
    PyObject *tmp_dict_value_303;
    PyObject *tmp_dict_value_304;
    PyObject *tmp_dict_value_305;
    PyObject *tmp_dict_value_306;
    PyObject *tmp_dict_value_307;
    PyObject *tmp_dict_value_308;
    PyObject *tmp_dict_value_309;
    PyObject *tmp_dict_value_310;
    PyObject *tmp_dict_value_311;
    PyObject *tmp_dict_value_312;
    PyObject *tmp_dict_value_313;
    PyObject *tmp_dict_value_314;
    PyObject *tmp_dict_value_315;
    PyObject *tmp_dict_value_316;
    PyObject *tmp_dict_value_317;
    PyObject *tmp_dict_value_318;
    PyObject *tmp_dict_value_319;
    PyObject *tmp_dict_value_320;
    PyObject *tmp_dict_value_321;
    PyObject *tmp_dict_value_322;
    PyObject *tmp_dict_value_323;
    PyObject *tmp_dict_value_324;
    PyObject *tmp_dict_value_325;
    PyObject *tmp_dict_value_326;
    PyObject *tmp_dict_value_327;
    PyObject *tmp_dict_value_328;
    PyObject *tmp_dict_value_329;
    PyObject *tmp_dict_value_330;
    PyObject *tmp_dict_value_331;
    PyObject *tmp_dict_value_332;
    PyObject *tmp_dict_value_333;
    PyObject *tmp_dict_value_334;
    PyObject *tmp_dict_value_335;
    PyObject *tmp_dict_value_336;
    PyObject *tmp_dict_value_337;
    PyObject *tmp_dict_value_338;
    PyObject *tmp_dict_value_339;
    PyObject *tmp_dict_value_340;
    PyObject *tmp_dict_value_341;
    PyObject *tmp_dict_value_342;
    PyObject *tmp_dict_value_343;
    PyObject *tmp_dict_value_344;
    PyObject *tmp_dict_value_345;
    PyObject *tmp_dict_value_346;
    PyObject *tmp_dict_value_347;
    PyObject *tmp_dict_value_348;
    PyObject *tmp_dict_value_349;
    PyObject *tmp_dict_value_350;
    PyObject *tmp_dict_value_351;
    PyObject *tmp_dict_value_352;
    PyObject *tmp_dict_value_353;
    PyObject *tmp_dict_value_354;
    PyObject *tmp_dict_value_355;
    PyObject *tmp_dict_value_356;
    PyObject *tmp_dict_value_357;
    PyObject *tmp_dict_value_358;
    PyObject *tmp_dict_value_359;
    PyObject *tmp_dict_value_360;
    PyObject *tmp_dict_value_361;
    PyObject *tmp_dict_value_362;
    PyObject *tmp_dict_value_363;
    PyObject *tmp_dict_value_364;
    PyObject *tmp_dict_value_365;
    PyObject *tmp_dict_value_366;
    PyObject *tmp_dict_value_367;
    PyObject *tmp_dict_value_368;
    PyObject *tmp_dict_value_369;
    PyObject *tmp_dict_value_370;
    PyObject *tmp_dict_value_371;
    PyObject *tmp_dict_value_372;
    PyObject *tmp_dict_value_373;
    PyObject *tmp_dict_value_374;
    PyObject *tmp_dict_value_375;
    PyObject *tmp_dict_value_376;
    PyObject *tmp_dict_value_377;
    PyObject *tmp_dict_value_378;
    PyObject *tmp_dict_value_379;
    PyObject *tmp_dict_value_380;
    PyObject *tmp_dict_value_381;
    PyObject *tmp_dict_value_382;
    PyObject *tmp_dict_value_383;
    PyObject *tmp_dict_value_384;
    PyObject *tmp_dict_value_385;
    PyObject *tmp_dict_value_386;
    PyObject *tmp_dict_value_387;
    PyObject *tmp_dict_value_388;
    PyObject *tmp_dict_value_389;
    PyObject *tmp_dict_value_390;
    PyObject *tmp_dict_value_391;
    PyObject *tmp_dict_value_392;
    PyObject *tmp_dict_value_393;
    PyObject *tmp_dict_value_394;
    PyObject *tmp_dict_value_395;
    PyObject *tmp_dict_value_396;
    PyObject *tmp_dict_value_397;
    PyObject *tmp_dict_value_398;
    PyObject *tmp_dict_value_399;
    PyObject *tmp_dict_value_400;
    PyObject *tmp_dict_value_401;
    PyObject *tmp_dict_value_402;
    PyObject *tmp_dict_value_403;
    PyObject *tmp_dict_value_404;
    PyObject *tmp_dict_value_405;
    PyObject *tmp_dict_value_406;
    PyObject *tmp_dict_value_407;
    PyObject *tmp_dict_value_408;
    PyObject *tmp_dict_value_409;
    PyObject *tmp_dict_value_410;
    PyObject *tmp_dict_value_411;
    PyObject *tmp_dict_value_412;
    PyObject *tmp_dict_value_413;
    PyObject *tmp_dict_value_414;
    PyObject *tmp_dict_value_415;
    PyObject *tmp_dict_value_416;
    PyObject *tmp_dict_value_417;
    PyObject *tmp_dict_value_418;
    PyObject *tmp_dict_value_419;
    PyObject *tmp_dict_value_420;
    PyObject *tmp_dict_value_421;
    PyObject *tmp_dict_value_422;
    PyObject *tmp_dict_value_423;
    PyObject *tmp_dict_value_424;
    PyObject *tmp_dict_value_425;
    PyObject *tmp_dict_value_426;
    PyObject *tmp_dict_value_427;
    PyObject *tmp_dict_value_428;
    PyObject *tmp_dict_value_429;
    PyObject *tmp_dict_value_430;
    PyObject *tmp_dict_value_431;
    PyObject *tmp_dict_value_432;
    PyObject *tmp_dict_value_433;
    PyObject *tmp_dict_value_434;
    PyObject *tmp_dict_value_435;
    PyObject *tmp_dict_value_436;
    PyObject *tmp_dict_value_437;
    PyObject *tmp_dict_value_438;
    PyObject *tmp_dict_value_439;
    PyObject *tmp_dict_value_440;
    PyObject *tmp_dict_value_441;
    PyObject *tmp_dict_value_442;
    PyObject *tmp_dict_value_443;
    PyObject *tmp_dict_value_444;
    PyObject *tmp_dict_value_445;
    PyObject *tmp_dict_value_446;
    PyObject *tmp_dict_value_447;
    PyObject *tmp_dict_value_448;
    PyObject *tmp_dict_value_449;
    PyObject *tmp_dict_value_450;
    PyObject *tmp_dict_value_451;
    PyObject *tmp_dict_value_452;
    PyObject *tmp_dict_value_453;
    PyObject *tmp_dict_value_454;
    PyObject *tmp_dict_value_455;
    PyObject *tmp_dict_value_456;
    PyObject *tmp_dict_value_457;
    PyObject *tmp_dict_value_458;
    PyObject *tmp_dict_value_459;
    PyObject *tmp_dict_value_460;
    PyObject *tmp_dict_value_461;
    PyObject *tmp_dict_value_462;
    PyObject *tmp_dict_value_463;
    PyObject *tmp_dict_value_464;
    PyObject *tmp_dict_value_465;
    PyObject *tmp_dict_value_466;
    PyObject *tmp_dict_value_467;
    PyObject *tmp_dict_value_468;
    PyObject *tmp_dict_value_469;
    PyObject *tmp_dict_value_470;
    PyObject *tmp_dict_value_471;
    PyObject *tmp_dict_value_472;
    PyObject *tmp_dict_value_473;
    PyObject *tmp_dict_value_474;
    PyObject *tmp_dict_value_475;
    PyObject *tmp_dict_value_476;
    PyObject *tmp_dict_value_477;
    PyObject *tmp_dict_value_478;
    PyObject *tmp_dict_value_479;
    PyObject *tmp_dict_value_480;
    PyObject *tmp_dict_value_481;
    PyObject *tmp_dict_value_482;
    PyObject *tmp_dict_value_483;
    PyObject *tmp_dict_value_484;
    PyObject *tmp_dict_value_485;
    PyObject *tmp_dict_value_486;
    PyObject *tmp_dict_value_487;
    PyObject *tmp_dict_value_488;
    PyObject *tmp_dict_value_489;
    PyObject *tmp_dict_value_490;
    PyObject *tmp_dict_value_491;
    PyObject *tmp_dict_value_492;
    PyObject *tmp_dict_value_493;
    PyObject *tmp_dict_value_494;
    PyObject *tmp_dict_value_495;
    PyObject *tmp_dict_value_496;
    PyObject *tmp_dict_value_497;
    PyObject *tmp_dict_value_498;
    PyObject *tmp_dict_value_499;
    PyObject *tmp_dict_value_500;
    PyObject *tmp_dict_value_501;
    PyObject *tmp_dict_value_502;
    PyObject *tmp_dict_value_503;
    PyObject *tmp_dict_value_504;
    PyObject *tmp_dict_value_505;
    PyObject *tmp_dict_value_506;
    PyObject *tmp_dict_value_507;
    PyObject *tmp_dict_value_508;
    PyObject *tmp_dict_value_509;
    PyObject *tmp_dict_value_510;
    PyObject *tmp_dict_value_511;
    PyObject *tmp_dict_value_512;
    PyObject *tmp_dict_value_513;
    PyObject *tmp_dict_value_514;
    PyObject *tmp_dict_value_515;
    PyObject *tmp_dict_value_516;
    PyObject *tmp_dict_value_517;
    PyObject *tmp_dict_value_518;
    PyObject *tmp_dict_value_519;
    PyObject *tmp_dict_value_520;
    PyObject *tmp_dict_value_521;
    PyObject *tmp_dict_value_522;
    PyObject *tmp_dict_value_523;
    PyObject *tmp_dict_value_524;
    PyObject *tmp_dict_value_525;
    PyObject *tmp_dict_value_526;
    PyObject *tmp_dict_value_527;
    PyObject *tmp_dict_value_528;
    PyObject *tmp_dict_value_529;
    PyObject *tmp_dict_value_530;
    PyObject *tmp_dict_value_531;
    PyObject *tmp_dict_value_532;
    PyObject *tmp_dict_value_533;
    PyObject *tmp_dict_value_534;
    PyObject *tmp_dict_value_535;
    PyObject *tmp_dict_value_536;
    PyObject *tmp_dict_value_537;
    PyObject *tmp_dict_value_538;
    PyObject *tmp_dict_value_539;
    PyObject *tmp_dict_value_540;
    PyObject *tmp_dict_value_541;
    PyObject *tmp_dict_value_542;
    PyObject *tmp_dict_value_543;
    PyObject *tmp_dict_value_544;
    PyObject *tmp_dict_value_545;
    PyObject *tmp_dict_value_546;
    PyObject *tmp_dict_value_547;
    PyObject *tmp_dict_value_548;
    PyObject *tmp_dict_value_549;
    PyObject *tmp_dict_value_550;
    PyObject *tmp_dict_value_551;
    PyObject *tmp_dict_value_552;
    PyObject *tmp_dict_value_553;
    PyObject *tmp_dict_value_554;
    PyObject *tmp_dict_value_555;
    PyObject *tmp_dict_value_556;
    PyObject *tmp_dict_value_557;
    PyObject *tmp_dict_value_558;
    PyObject *tmp_dict_value_559;
    PyObject *tmp_dict_value_560;
    PyObject *tmp_dict_value_561;
    PyObject *tmp_dict_value_562;
    PyObject *tmp_dict_value_563;
    PyObject *tmp_dict_value_564;
    PyObject *tmp_dict_value_565;
    PyObject *tmp_dict_value_566;
    PyObject *tmp_dict_value_567;
    PyObject *tmp_dict_value_568;
    PyObject *tmp_dict_value_569;
    PyObject *tmp_dictset_dict;
    PyObject *tmp_dictset_key;
    PyObject *tmp_dictset_value;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    PyObject *tmp_import_globals_7;
    PyObject *tmp_import_globals_8;
    PyObject *tmp_import_globals_9;
    PyObject *tmp_import_globals_10;
    PyObject *tmp_import_globals_11;
    PyObject *tmp_import_globals_12;
    PyObject *tmp_import_globals_13;
    PyObject *tmp_import_globals_14;
    PyObject *tmp_import_globals_15;
    PyObject *tmp_import_globals_16;
    PyObject *tmp_import_globals_17;
    PyObject *tmp_import_globals_18;
    PyObject *tmp_import_globals_19;
    PyObject *tmp_import_globals_20;
    PyObject *tmp_import_globals_21;
    PyObject *tmp_import_globals_22;
    PyObject *tmp_import_globals_23;
    PyObject *tmp_import_globals_24;
    PyObject *tmp_import_globals_25;
    PyObject *tmp_import_globals_26;
    PyObject *tmp_import_globals_27;
    PyObject *tmp_import_globals_28;
    PyObject *tmp_import_globals_29;
    PyObject *tmp_import_globals_30;
    PyObject *tmp_import_globals_31;
    PyObject *tmp_import_globals_32;
    PyObject *tmp_import_globals_33;
    PyObject *tmp_import_globals_34;
    PyObject *tmp_import_globals_35;
    PyObject *tmp_import_globals_36;
    PyObject *tmp_import_globals_37;
    PyObject *tmp_import_globals_38;
    PyObject *tmp_import_globals_39;
    PyObject *tmp_import_globals_40;
    PyObject *tmp_import_globals_41;
    PyObject *tmp_import_globals_42;
    PyObject *tmp_import_globals_43;
    PyObject *tmp_import_globals_44;
    PyObject *tmp_import_globals_45;
    PyObject *tmp_import_globals_46;
    PyObject *tmp_import_globals_47;
    PyObject *tmp_import_globals_48;
    PyObject *tmp_import_globals_49;
    PyObject *tmp_import_globals_50;
    PyObject *tmp_import_globals_51;
    PyObject *tmp_import_globals_52;
    PyObject *tmp_import_globals_53;
    PyObject *tmp_import_globals_54;
    PyObject *tmp_import_globals_55;
    PyObject *tmp_import_globals_56;
    PyObject *tmp_import_globals_57;
    PyObject *tmp_import_globals_58;
    PyObject *tmp_import_globals_59;
    PyObject *tmp_import_globals_60;
    PyObject *tmp_import_globals_61;
    PyObject *tmp_import_globals_62;
    PyObject *tmp_import_globals_63;
    PyObject *tmp_import_globals_64;
    PyObject *tmp_import_globals_65;
    PyObject *tmp_import_globals_66;
    PyObject *tmp_import_globals_67;
    PyObject *tmp_import_globals_68;
    PyObject *tmp_import_globals_69;
    PyObject *tmp_import_globals_70;
    PyObject *tmp_import_globals_71;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_import_name_from_7;
    PyObject *tmp_import_name_from_8;
    PyObject *tmp_import_name_from_9;
    PyObject *tmp_import_name_from_10;
    PyObject *tmp_import_name_from_11;
    PyObject *tmp_import_name_from_12;
    PyObject *tmp_import_name_from_13;
    PyObject *tmp_import_name_from_14;
    PyObject *tmp_import_name_from_15;
    PyObject *tmp_import_name_from_16;
    PyObject *tmp_import_name_from_17;
    PyObject *tmp_import_name_from_18;
    PyObject *tmp_import_name_from_19;
    PyObject *tmp_import_name_from_20;
    PyObject *tmp_import_name_from_21;
    PyObject *tmp_import_name_from_22;
    PyObject *tmp_import_name_from_23;
    PyObject *tmp_import_name_from_24;
    PyObject *tmp_import_name_from_25;
    PyObject *tmp_import_name_from_26;
    PyObject *tmp_import_name_from_27;
    PyObject *tmp_import_name_from_28;
    PyObject *tmp_import_name_from_29;
    PyObject *tmp_import_name_from_30;
    PyObject *tmp_import_name_from_31;
    PyObject *tmp_import_name_from_32;
    PyObject *tmp_import_name_from_33;
    PyObject *tmp_import_name_from_34;
    PyObject *tmp_import_name_from_35;
    PyObject *tmp_import_name_from_36;
    PyObject *tmp_import_name_from_37;
    PyObject *tmp_import_name_from_38;
    PyObject *tmp_import_name_from_39;
    PyObject *tmp_import_name_from_40;
    PyObject *tmp_import_name_from_41;
    PyObject *tmp_import_name_from_42;
    PyObject *tmp_import_name_from_43;
    PyObject *tmp_import_name_from_44;
    PyObject *tmp_import_name_from_45;
    PyObject *tmp_import_name_from_46;
    PyObject *tmp_import_name_from_47;
    PyObject *tmp_import_name_from_48;
    PyObject *tmp_import_name_from_49;
    PyObject *tmp_import_name_from_50;
    PyObject *tmp_import_name_from_51;
    PyObject *tmp_import_name_from_52;
    PyObject *tmp_import_name_from_53;
    PyObject *tmp_import_name_from_54;
    PyObject *tmp_import_name_from_55;
    PyObject *tmp_import_name_from_56;
    PyObject *tmp_import_name_from_57;
    PyObject *tmp_import_name_from_58;
    PyObject *tmp_import_name_from_59;
    PyObject *tmp_import_name_from_60;
    PyObject *tmp_import_name_from_61;
    PyObject *tmp_import_name_from_62;
    PyObject *tmp_import_name_from_63;
    PyObject *tmp_import_name_from_64;
    PyObject *tmp_import_name_from_65;
    PyObject *tmp_import_name_from_66;
    PyObject *tmp_import_name_from_67;
    PyObject *tmp_import_name_from_68;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_left_name_6;
    PyObject *tmp_left_name_7;
    PyObject *tmp_left_name_8;
    PyObject *tmp_left_name_9;
    PyObject *tmp_left_name_10;
    PyObject *tmp_left_name_11;
    PyObject *tmp_left_name_12;
    PyObject *tmp_left_name_13;
    PyObject *tmp_left_name_14;
    PyObject *tmp_left_name_15;
    PyObject *tmp_left_name_16;
    PyObject *tmp_left_name_17;
    PyObject *tmp_left_name_18;
    PyObject *tmp_left_name_19;
    PyObject *tmp_left_name_20;
    PyObject *tmp_left_name_21;
    PyObject *tmp_left_name_22;
    PyObject *tmp_left_name_23;
    PyObject *tmp_left_name_24;
    PyObject *tmp_left_name_25;
    PyObject *tmp_left_name_26;
    PyObject *tmp_left_name_27;
    PyObject *tmp_left_name_28;
    PyObject *tmp_left_name_29;
    PyObject *tmp_left_name_30;
    PyObject *tmp_left_name_31;
    PyObject *tmp_left_name_32;
    PyObject *tmp_left_name_33;
    PyObject *tmp_left_name_34;
    PyObject *tmp_left_name_35;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_list_element_3;
    PyObject *tmp_list_element_4;
    PyObject *tmp_list_element_5;
    PyObject *tmp_list_element_6;
    PyObject *tmp_list_element_7;
    PyObject *tmp_list_element_8;
    PyObject *tmp_list_element_9;
    PyObject *tmp_list_element_10;
    PyObject *tmp_list_element_11;
    PyObject *tmp_list_element_12;
    PyObject *tmp_list_element_13;
    PyObject *tmp_list_element_14;
    PyObject *tmp_list_element_15;
    PyObject *tmp_list_element_16;
    PyObject *tmp_list_element_17;
    PyObject *tmp_list_element_18;
    PyObject *tmp_list_element_19;
    PyObject *tmp_list_element_20;
    PyObject *tmp_list_element_21;
    PyObject *tmp_list_element_22;
    PyObject *tmp_list_element_23;
    PyObject *tmp_list_element_24;
    PyObject *tmp_list_element_25;
    PyObject *tmp_list_element_26;
    PyObject *tmp_list_element_27;
    PyObject *tmp_list_element_28;
    PyObject *tmp_list_element_29;
    PyObject *tmp_next_source_1;
    int tmp_res;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_right_name_6;
    PyObject *tmp_right_name_7;
    PyObject *tmp_right_name_8;
    PyObject *tmp_right_name_9;
    PyObject *tmp_right_name_10;
    PyObject *tmp_right_name_11;
    PyObject *tmp_right_name_12;
    PyObject *tmp_right_name_13;
    PyObject *tmp_right_name_14;
    PyObject *tmp_right_name_15;
    PyObject *tmp_right_name_16;
    PyObject *tmp_right_name_17;
    PyObject *tmp_right_name_18;
    PyObject *tmp_right_name_19;
    PyObject *tmp_right_name_20;
    PyObject *tmp_right_name_21;
    PyObject *tmp_right_name_22;
    PyObject *tmp_right_name_23;
    PyObject *tmp_right_name_24;
    PyObject *tmp_right_name_25;
    PyObject *tmp_right_name_26;
    PyObject *tmp_right_name_27;
    PyObject *tmp_right_name_28;
    PyObject *tmp_right_name_29;
    PyObject *tmp_right_name_30;
    PyObject *tmp_right_name_31;
    PyObject *tmp_right_name_32;
    PyObject *tmp_right_name_33;
    PyObject *tmp_right_name_34;
    PyObject *tmp_right_name_35;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyFrameObject *frame_module;


    // Module code.
    tmp_assign_source_1 = const_str_digest_7e5a52158bc4715036d44a08d9a59588;
    UPDATE_STRING_DICT0( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_f5e74abb58d16359f25a81ce2dbfb679;
    UPDATE_STRING_DICT0( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    tmp_assign_source_3 = PyObject_GetAttrString(PyImport_ImportModule("__future__"), "division");
    UPDATE_STRING_DICT0( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_division, tmp_assign_source_3 );
    tmp_assign_source_4 = PyObject_GetAttrString(PyImport_ImportModule("__future__"), "absolute_import");
    UPDATE_STRING_DICT0( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_absolute_import, tmp_assign_source_4 );
    tmp_assign_source_5 = PyObject_GetAttrString(PyImport_ImportModule("__future__"), "print_function");
    UPDATE_STRING_DICT0( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_print_function, tmp_assign_source_5 );
    tmp_assign_source_6 = const_str_digest_b4363c0f10eeed06a28d0eea0c3aeb40;
    UPDATE_STRING_DICT0( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain___version__, tmp_assign_source_6 );
    // Frame without reuse.
    frame_module = MAKE_MODULE_FRAME( codeobj_b792aaee40e363fc965f523c7097f76d, module_numpy$f2py$rules );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_module );
    assert( Py_REFCNT( frame_module ) == 1 );

#if PYTHON_VERSION >= 340
    frame_module->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 57;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_empty, tmp_import_globals_1, tmp_import_globals_1, const_tuple_str_plain___version___tuple, const_int_pos_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 57;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain___version__ );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 57;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain___version__, tmp_assign_source_7 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain___version__ );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___version__ );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "__version__" );
        exception_tb = NULL;

        exception_lineno = 58;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_8 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_version );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 58;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f2py_version, tmp_assign_source_8 );
    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 60;
    tmp_assign_source_9 = IMPORT_MODULE( const_str_plain_os, tmp_import_globals_2, tmp_import_globals_2, Py_None, const_int_0 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_os, tmp_assign_source_9 );
    tmp_import_globals_3 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 61;
    tmp_assign_source_10 = IMPORT_MODULE( const_str_plain_time, tmp_import_globals_3, tmp_import_globals_3, Py_None, const_int_0 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 61;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_time, tmp_assign_source_10 );
    tmp_import_globals_4 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 62;
    tmp_assign_source_11 = IMPORT_MODULE( const_str_plain_copy, tmp_import_globals_4, tmp_import_globals_4, Py_None, const_int_0 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 62;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_copy, tmp_assign_source_11 );
    tmp_import_globals_5 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_5, tmp_import_globals_5, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_12 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_applyrules );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules, tmp_assign_source_12 );
    tmp_import_globals_6 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_6, tmp_import_globals_6, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_debugcapi );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi, tmp_assign_source_13 );
    tmp_import_globals_7 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_4 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_7, tmp_import_globals_7, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_14 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_dictappend );
    Py_DECREF( tmp_import_name_from_4 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend, tmp_assign_source_14 );
    tmp_import_globals_8 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_5 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_8, tmp_import_globals_8, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_errmess );
    Py_DECREF( tmp_import_name_from_5 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_errmess, tmp_assign_source_15 );
    tmp_import_globals_9 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_6 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_9, tmp_import_globals_9, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_16 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_gentitle );
    Py_DECREF( tmp_import_name_from_6 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle, tmp_assign_source_16 );
    tmp_import_globals_10 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_7 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_10, tmp_import_globals_10, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_getargs2 );
    Py_DECREF( tmp_import_name_from_7 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_getargs2, tmp_assign_source_17 );
    tmp_import_globals_11 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_8 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_11, tmp_import_globals_11, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_18 = IMPORT_NAME( tmp_import_name_from_8, const_str_plain_hascallstatement );
    Py_DECREF( tmp_import_name_from_8 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement, tmp_assign_source_18 );
    tmp_import_globals_12 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_9 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_12, tmp_import_globals_12, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_19 = IMPORT_NAME( tmp_import_name_from_9, const_str_plain_hasexternals );
    Py_DECREF( tmp_import_name_from_9 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals, tmp_assign_source_19 );
    tmp_import_globals_13 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_10 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_13, tmp_import_globals_13, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_20 = IMPORT_NAME( tmp_import_name_from_10, const_str_plain_hasinitvalue );
    Py_DECREF( tmp_import_name_from_10 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue, tmp_assign_source_20 );
    tmp_import_globals_14 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_11 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_14, tmp_import_globals_14, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_21 = IMPORT_NAME( tmp_import_name_from_11, const_str_plain_hasnote );
    Py_DECREF( tmp_import_name_from_11 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote, tmp_assign_source_21 );
    tmp_import_globals_15 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_12 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_15, tmp_import_globals_15, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_22 = IMPORT_NAME( tmp_import_name_from_12, const_str_plain_hasresultnote );
    Py_DECREF( tmp_import_name_from_12 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasresultnote, tmp_assign_source_22 );
    tmp_import_globals_16 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_13 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_16, tmp_import_globals_16, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_23 = IMPORT_NAME( tmp_import_name_from_13, const_str_plain_isarray );
    Py_DECREF( tmp_import_name_from_13 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray, tmp_assign_source_23 );
    tmp_import_globals_17 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_14 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_17, tmp_import_globals_17, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_24 = IMPORT_NAME( tmp_import_name_from_14, const_str_plain_isarrayofstrings );
    Py_DECREF( tmp_import_name_from_14 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarrayofstrings, tmp_assign_source_24 );
    tmp_import_globals_18 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_15 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_18, tmp_import_globals_18, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_25 = IMPORT_NAME( tmp_import_name_from_15, const_str_plain_iscomplex );
    Py_DECREF( tmp_import_name_from_15 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex, tmp_assign_source_25 );
    tmp_import_globals_19 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_16 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_19, tmp_import_globals_19, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_26 = IMPORT_NAME( tmp_import_name_from_16, const_str_plain_iscomplexarray );
    Py_DECREF( tmp_import_name_from_16 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray, tmp_assign_source_26 );
    tmp_import_globals_20 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_17 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_20, tmp_import_globals_20, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_27 = IMPORT_NAME( tmp_import_name_from_17, const_str_plain_iscomplexfunction );
    Py_DECREF( tmp_import_name_from_17 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction, tmp_assign_source_27 );
    tmp_import_globals_21 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_18 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_21, tmp_import_globals_21, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_28 = IMPORT_NAME( tmp_import_name_from_18, const_str_plain_iscomplexfunction_warn );
    Py_DECREF( tmp_import_name_from_18 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction_warn, tmp_assign_source_28 );
    tmp_import_globals_22 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_19 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_22, tmp_import_globals_22, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_29 = IMPORT_NAME( tmp_import_name_from_19, const_str_plain_isdummyroutine );
    Py_DECREF( tmp_import_name_from_19 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine, tmp_assign_source_29 );
    tmp_import_globals_23 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_20 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_23, tmp_import_globals_23, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_30 = IMPORT_NAME( tmp_import_name_from_20, const_str_plain_isexternal );
    Py_DECREF( tmp_import_name_from_20 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isexternal, tmp_assign_source_30 );
    tmp_import_globals_24 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_21 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_24, tmp_import_globals_24, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_31 = IMPORT_NAME( tmp_import_name_from_21, const_str_plain_isfunction );
    Py_DECREF( tmp_import_name_from_21 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction, tmp_assign_source_31 );
    tmp_import_globals_25 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_22 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_25, tmp_import_globals_25, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_32 = IMPORT_NAME( tmp_import_name_from_22, const_str_plain_isfunction_wrap );
    Py_DECREF( tmp_import_name_from_22 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction_wrap, tmp_assign_source_32 );
    tmp_import_globals_26 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_23 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_26, tmp_import_globals_26, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_33 = IMPORT_NAME( tmp_import_name_from_23, const_str_plain_isint1array );
    Py_DECREF( tmp_import_name_from_23 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isint1array, tmp_assign_source_33 );
    tmp_import_globals_27 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_24 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_27, tmp_import_globals_27, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_34 = IMPORT_NAME( tmp_import_name_from_24, const_str_plain_isintent_aux );
    Py_DECREF( tmp_import_name_from_24 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_aux, tmp_assign_source_34 );
    tmp_import_globals_28 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_25 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_28, tmp_import_globals_28, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_35 = IMPORT_NAME( tmp_import_name_from_25, const_str_plain_isintent_c );
    Py_DECREF( tmp_import_name_from_25 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c, tmp_assign_source_35 );
    tmp_import_globals_29 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_26 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_29, tmp_import_globals_29, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_36 = IMPORT_NAME( tmp_import_name_from_26, const_str_plain_isintent_callback );
    Py_DECREF( tmp_import_name_from_26 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_callback, tmp_assign_source_36 );
    tmp_import_globals_30 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_27 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_30, tmp_import_globals_30, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_37 = IMPORT_NAME( tmp_import_name_from_27, const_str_plain_isintent_copy );
    Py_DECREF( tmp_import_name_from_27 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_copy, tmp_assign_source_37 );
    tmp_import_globals_31 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_28 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_31, tmp_import_globals_31, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_38 = IMPORT_NAME( tmp_import_name_from_28, const_str_plain_isintent_hide );
    Py_DECREF( tmp_import_name_from_28 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide, tmp_assign_source_38 );
    tmp_import_globals_32 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_29 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_32, tmp_import_globals_32, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_39 = IMPORT_NAME( tmp_import_name_from_29, const_str_plain_isintent_inout );
    Py_DECREF( tmp_import_name_from_29 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout, tmp_assign_source_39 );
    tmp_import_globals_33 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_30 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_33, tmp_import_globals_33, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_40 = IMPORT_NAME( tmp_import_name_from_30, const_str_plain_isintent_nothide );
    Py_DECREF( tmp_import_name_from_30 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide, tmp_assign_source_40 );
    tmp_import_globals_34 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_31 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_34, tmp_import_globals_34, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_41 = IMPORT_NAME( tmp_import_name_from_31, const_str_plain_isintent_out );
    Py_DECREF( tmp_import_name_from_31 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out, tmp_assign_source_41 );
    tmp_import_globals_35 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_32 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_35, tmp_import_globals_35, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_42 = IMPORT_NAME( tmp_import_name_from_32, const_str_plain_isintent_overwrite );
    Py_DECREF( tmp_import_name_from_32 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_overwrite, tmp_assign_source_42 );
    tmp_import_globals_36 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_33 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_36, tmp_import_globals_36, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_43 = IMPORT_NAME( tmp_import_name_from_33, const_str_plain_islogical );
    Py_DECREF( tmp_import_name_from_33 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islogical, tmp_assign_source_43 );
    tmp_import_globals_37 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_34 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_37, tmp_import_globals_37, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_44 = IMPORT_NAME( tmp_import_name_from_34, const_str_plain_islong_complex );
    Py_DECREF( tmp_import_name_from_34 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_complex, tmp_assign_source_44 );
    tmp_import_globals_38 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_35 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_38, tmp_import_globals_38, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_45 = IMPORT_NAME( tmp_import_name_from_35, const_str_plain_islong_double );
    Py_DECREF( tmp_import_name_from_35 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_double, tmp_assign_source_45 );
    tmp_import_globals_39 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_36 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_39, tmp_import_globals_39, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_46 = IMPORT_NAME( tmp_import_name_from_36, const_str_plain_islong_doublefunction );
    Py_DECREF( tmp_import_name_from_36 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_doublefunction, tmp_assign_source_46 );
    tmp_import_globals_40 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_37 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_40, tmp_import_globals_40, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_47 = IMPORT_NAME( tmp_import_name_from_37, const_str_plain_islong_long );
    Py_DECREF( tmp_import_name_from_37 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_long, tmp_assign_source_47 );
    tmp_import_globals_41 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_38 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_41, tmp_import_globals_41, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_48 = IMPORT_NAME( tmp_import_name_from_38, const_str_plain_islong_longfunction );
    Py_DECREF( tmp_import_name_from_38 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_longfunction, tmp_assign_source_48 );
    tmp_import_globals_42 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_39 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_42, tmp_import_globals_42, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_49 = IMPORT_NAME( tmp_import_name_from_39, const_str_plain_ismoduleroutine );
    Py_DECREF( tmp_import_name_from_39 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine, tmp_assign_source_49 );
    tmp_import_globals_43 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_40 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_43, tmp_import_globals_43, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_50 = IMPORT_NAME( tmp_import_name_from_40, const_str_plain_isoptional );
    Py_DECREF( tmp_import_name_from_40 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional, tmp_assign_source_50 );
    tmp_import_globals_44 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_41 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_44, tmp_import_globals_44, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_51 = IMPORT_NAME( tmp_import_name_from_41, const_str_plain_isrequired );
    Py_DECREF( tmp_import_name_from_41 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired, tmp_assign_source_51 );
    tmp_import_globals_45 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_42 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_45, tmp_import_globals_45, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_52 = IMPORT_NAME( tmp_import_name_from_42, const_str_plain_isscalar );
    Py_DECREF( tmp_import_name_from_42 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar, tmp_assign_source_52 );
    tmp_import_globals_46 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_43 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_46, tmp_import_globals_46, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_53 = IMPORT_NAME( tmp_import_name_from_43, const_str_plain_issigned_long_longarray );
    Py_DECREF( tmp_import_name_from_43 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_issigned_long_longarray, tmp_assign_source_53 );
    tmp_import_globals_47 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_44 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_47, tmp_import_globals_47, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_54 = IMPORT_NAME( tmp_import_name_from_44, const_str_plain_isstring );
    Py_DECREF( tmp_import_name_from_44 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring, tmp_assign_source_54 );
    tmp_import_globals_48 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_45 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_48, tmp_import_globals_48, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_55 = IMPORT_NAME( tmp_import_name_from_45, const_str_plain_isstringarray );
    Py_DECREF( tmp_import_name_from_45 );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringarray, tmp_assign_source_55 );
    tmp_import_globals_49 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_46 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_49, tmp_import_globals_49, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_56 = IMPORT_NAME( tmp_import_name_from_46, const_str_plain_isstringfunction );
    Py_DECREF( tmp_import_name_from_46 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringfunction, tmp_assign_source_56 );
    tmp_import_globals_50 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_47 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_50, tmp_import_globals_50, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_57 = IMPORT_NAME( tmp_import_name_from_47, const_str_plain_issubroutine );
    Py_DECREF( tmp_import_name_from_47 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_issubroutine, tmp_assign_source_57 );
    tmp_import_globals_51 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_48 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_51, tmp_import_globals_51, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_58 = IMPORT_NAME( tmp_import_name_from_48, const_str_plain_issubroutine_wrap );
    Py_DECREF( tmp_import_name_from_48 );
    if ( tmp_assign_source_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_issubroutine_wrap, tmp_assign_source_58 );
    tmp_import_globals_52 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_49 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_52, tmp_import_globals_52, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_59 = IMPORT_NAME( tmp_import_name_from_49, const_str_plain_isthreadsafe );
    Py_DECREF( tmp_import_name_from_49 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe, tmp_assign_source_59 );
    tmp_import_globals_53 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_50 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_53, tmp_import_globals_53, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_60 = IMPORT_NAME( tmp_import_name_from_50, const_str_plain_isunsigned );
    Py_DECREF( tmp_import_name_from_50 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned, tmp_assign_source_60 );
    tmp_import_globals_54 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_51 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_54, tmp_import_globals_54, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_61 = IMPORT_NAME( tmp_import_name_from_51, const_str_plain_isunsigned_char );
    Py_DECREF( tmp_import_name_from_51 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_char, tmp_assign_source_61 );
    tmp_import_globals_55 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_52 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_55, tmp_import_globals_55, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_62 = IMPORT_NAME( tmp_import_name_from_52, const_str_plain_isunsigned_chararray );
    Py_DECREF( tmp_import_name_from_52 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray, tmp_assign_source_62 );
    tmp_import_globals_56 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_53 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_56, tmp_import_globals_56, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_63 = IMPORT_NAME( tmp_import_name_from_53, const_str_plain_isunsigned_long_long );
    Py_DECREF( tmp_import_name_from_53 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_long_long, tmp_assign_source_63 );
    tmp_import_globals_57 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_54 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_57, tmp_import_globals_57, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_64 = IMPORT_NAME( tmp_import_name_from_54, const_str_plain_isunsigned_long_longarray );
    Py_DECREF( tmp_import_name_from_54 );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray, tmp_assign_source_64 );
    tmp_import_globals_58 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_55 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_58, tmp_import_globals_58, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_65 = IMPORT_NAME( tmp_import_name_from_55, const_str_plain_isunsigned_short );
    Py_DECREF( tmp_import_name_from_55 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_short, tmp_assign_source_65 );
    tmp_import_globals_59 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_56 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_59, tmp_import_globals_59, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_66 = IMPORT_NAME( tmp_import_name_from_56, const_str_plain_isunsigned_shortarray );
    Py_DECREF( tmp_import_name_from_56 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray, tmp_assign_source_66 );
    tmp_import_globals_60 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_57 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_60, tmp_import_globals_60, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_67 = IMPORT_NAME( tmp_import_name_from_57, const_str_plain_l_and );
    Py_DECREF( tmp_import_name_from_57 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and, tmp_assign_source_67 );
    tmp_import_globals_61 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_58 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_61, tmp_import_globals_61, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_68 = IMPORT_NAME( tmp_import_name_from_58, const_str_plain_l_not );
    Py_DECREF( tmp_import_name_from_58 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not, tmp_assign_source_68 );
    tmp_import_globals_62 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_59 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_62, tmp_import_globals_62, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_69 = IMPORT_NAME( tmp_import_name_from_59, const_str_plain_l_or );
    Py_DECREF( tmp_import_name_from_59 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or, tmp_assign_source_69 );
    tmp_import_globals_63 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_60 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_63, tmp_import_globals_63, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_70 = IMPORT_NAME( tmp_import_name_from_60, const_str_plain_outmess );
    Py_DECREF( tmp_import_name_from_60 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess, tmp_assign_source_70 );
    tmp_import_globals_64 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_61 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_64, tmp_import_globals_64, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_71 = IMPORT_NAME( tmp_import_name_from_61, const_str_plain_replace );
    Py_DECREF( tmp_import_name_from_61 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace, tmp_assign_source_71 );
    tmp_import_globals_65 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 64;
    tmp_import_name_from_62 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_65, tmp_import_globals_65, const_tuple_b59a67d08cb381a692f2539841be435c_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_72 = IMPORT_NAME( tmp_import_name_from_62, const_str_plain_stripcomma );
    Py_DECREF( tmp_import_name_from_62 );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma, tmp_assign_source_72 );
    tmp_import_globals_66 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 81;
    tmp_import_name_from_63 = IMPORT_MODULE( const_str_empty, tmp_import_globals_66, tmp_import_globals_66, const_tuple_str_plain_capi_maps_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 81;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_73 = IMPORT_NAME( tmp_import_name_from_63, const_str_plain_capi_maps );
    Py_DECREF( tmp_import_name_from_63 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 81;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_capi_maps, tmp_assign_source_73 );
    tmp_import_globals_67 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 82;
    tmp_import_name_from_64 = IMPORT_MODULE( const_str_empty, tmp_import_globals_67, tmp_import_globals_67, const_tuple_str_plain_cfuncs_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 82;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_74 = IMPORT_NAME( tmp_import_name_from_64, const_str_plain_cfuncs );
    Py_DECREF( tmp_import_name_from_64 );
    if ( tmp_assign_source_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 82;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs, tmp_assign_source_74 );
    tmp_import_globals_68 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 83;
    tmp_import_name_from_65 = IMPORT_MODULE( const_str_empty, tmp_import_globals_68, tmp_import_globals_68, const_tuple_str_plain_common_rules_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_75 = IMPORT_NAME( tmp_import_name_from_65, const_str_plain_common_rules );
    Py_DECREF( tmp_import_name_from_65 );
    if ( tmp_assign_source_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_common_rules, tmp_assign_source_75 );
    tmp_import_globals_69 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 84;
    tmp_import_name_from_66 = IMPORT_MODULE( const_str_empty, tmp_import_globals_69, tmp_import_globals_69, const_tuple_str_plain_use_rules_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_76 = IMPORT_NAME( tmp_import_name_from_66, const_str_plain_use_rules );
    Py_DECREF( tmp_import_name_from_66 );
    if ( tmp_assign_source_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_use_rules, tmp_assign_source_76 );
    tmp_import_globals_70 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 85;
    tmp_import_name_from_67 = IMPORT_MODULE( const_str_empty, tmp_import_globals_70, tmp_import_globals_70, const_tuple_str_plain_f90mod_rules_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 85;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_77 = IMPORT_NAME( tmp_import_name_from_67, const_str_plain_f90mod_rules );
    Py_DECREF( tmp_import_name_from_67 );
    if ( tmp_assign_source_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 85;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f90mod_rules, tmp_assign_source_77 );
    tmp_import_globals_71 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 86;
    tmp_import_name_from_68 = IMPORT_MODULE( const_str_empty, tmp_import_globals_71, tmp_import_globals_71, const_tuple_str_plain_func2subr_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_78 = IMPORT_NAME( tmp_import_name_from_68, const_str_plain_func2subr );
    Py_DECREF( tmp_import_name_from_68 );
    if ( tmp_assign_source_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_func2subr, tmp_assign_source_78 );
    tmp_assign_source_79 = PyDict_New();
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options, tmp_assign_source_79 );
    tmp_assign_source_80 = PyDict_New();
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sepdict, tmp_assign_source_80 );
    tmp_iter_arg_1 = const_tuple_cde206c752dab3a50d1c0e1f18afb419_tuple;
    tmp_assign_source_81 = MAKE_ITERATOR( tmp_iter_arg_1 );
    assert( tmp_assign_source_81 != NULL );
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_81;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_82 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_82 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_module->f_lineno = 91;
            goto try_except_handler_1;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_82;
        Py_XDECREF( old );
    }

    tmp_assign_source_83 = tmp_for_loop_1__iter_value;

    UPDATE_STRING_DICT0( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_k, tmp_assign_source_83 );
    tmp_dictset_value = const_str_newline;
    tmp_dictset_dict = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sepdict );

    if (unlikely( tmp_dictset_dict == NULL ))
    {
        tmp_dictset_dict = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sepdict );
    }

    if ( tmp_dictset_dict == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sepdict" );
        exception_tb = NULL;

        exception_lineno = 106;
        goto try_except_handler_1;
    }

    tmp_dictset_key = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_k );

    if (unlikely( tmp_dictset_key == NULL ))
    {
        tmp_dictset_key = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_k );
    }

    if ( tmp_dictset_key == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "k" );
        exception_tb = NULL;

        exception_lineno = 106;
        goto try_except_handler_1;
    }

    tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 106;
        goto try_except_handler_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 91;
        goto try_except_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_assign_source_84 = _PyDict_NewPresized( 4 );
    tmp_left_name_35 = const_str_digest_135952e4416c93a7303e3f7aaf5a0da5;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_time );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
    }

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "time" );
        exception_tb = NULL;

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_asctime );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_time );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
    }

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "time" );
        exception_tb = NULL;

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_localtime );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_time );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
    }

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "time" );
        exception_tb = NULL;

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_time );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 117;
    tmp_args_element_name_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    Py_DECREF( tmp_called_name_3 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 117;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 117;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_left_name_34 = BINARY_OPERATION_ADD( tmp_left_name_35, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_left_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_right_name_2 = const_str_digest_2f9db3be7f6d42c0b8554ae45751ef40;
    tmp_left_name_33 = BINARY_OPERATION_ADD( tmp_left_name_34, tmp_right_name_2 );
    Py_DECREF( tmp_left_name_34 );
    if ( tmp_left_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_right_name_3 = const_str_digest_4222d792060d303be1cfc07d37890d79;
    tmp_left_name_32 = BINARY_OPERATION_ADD( tmp_left_name_33, tmp_right_name_3 );
    Py_DECREF( tmp_left_name_33 );
    if ( tmp_left_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    tmp_right_name_4 = const_str_digest_a505672d4ff6f54888f9e90c60cf9b67;
    tmp_left_name_31 = BINARY_OPERATION_ADD( tmp_left_name_32, tmp_right_name_4 );
    Py_DECREF( tmp_left_name_32 );
    if ( tmp_left_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_31 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 127;
    tmp_right_name_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, &PyTuple_GET_ITEM( const_tuple_str_digest_345c26e0f9bcfb91e65723d2b555931c_tuple, 0 ) );

    if ( tmp_right_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_31 );

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_left_name_30 = BINARY_OPERATION_ADD( tmp_left_name_31, tmp_right_name_5 );
    Py_DECREF( tmp_left_name_31 );
    Py_DECREF( tmp_right_name_5 );
    if ( tmp_left_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_right_name_6 = const_str_digest_cd4607fc44852b68f6faa04a473c87c2;
    tmp_left_name_29 = BINARY_OPERATION_ADD( tmp_left_name_30, tmp_right_name_6 );
    Py_DECREF( tmp_left_name_30 );
    if ( tmp_left_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 131;
    tmp_right_name_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, &PyTuple_GET_ITEM( const_tuple_str_digest_eee6c61da125ddd4aae5b138d99219fb_tuple, 0 ) );

    if ( tmp_right_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_29 );

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_left_name_28 = BINARY_OPERATION_ADD( tmp_left_name_29, tmp_right_name_7 );
    Py_DECREF( tmp_left_name_29 );
    Py_DECREF( tmp_right_name_7 );
    if ( tmp_left_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_right_name_8 = const_str_digest_11c30c96a295326f303a00456c46c11c;
    tmp_left_name_27 = BINARY_OPERATION_ADD( tmp_left_name_28, tmp_right_name_8 );
    Py_DECREF( tmp_left_name_28 );
    if ( tmp_left_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_6 == NULL ))
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_6 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_27 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 135;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 135;
    tmp_right_name_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_str_digest_8eac57ad299a2b6e5510775f127c79ae_tuple, 0 ) );

    if ( tmp_right_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_27 );

        exception_lineno = 135;
        goto frame_exception_exit_1;
    }
    tmp_left_name_26 = BINARY_OPERATION_ADD( tmp_left_name_27, tmp_right_name_9 );
    Py_DECREF( tmp_left_name_27 );
    Py_DECREF( tmp_right_name_9 );
    if ( tmp_left_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 135;
        goto frame_exception_exit_1;
    }
    tmp_right_name_10 = const_str_digest_946f7eab661e75156757fc78e18fae8a;
    tmp_left_name_25 = BINARY_OPERATION_ADD( tmp_left_name_26, tmp_right_name_10 );
    Py_DECREF( tmp_left_name_26 );
    if ( tmp_left_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 135;
        goto frame_exception_exit_1;
    }
    tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_7 == NULL ))
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_7 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_25 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 138;
    tmp_right_name_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_str_digest_f71cea4c61eb6b8fcaae04bdb38a08bc_tuple, 0 ) );

    if ( tmp_right_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_25 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_left_name_24 = BINARY_OPERATION_ADD( tmp_left_name_25, tmp_right_name_11 );
    Py_DECREF( tmp_left_name_25 );
    Py_DECREF( tmp_right_name_11 );
    if ( tmp_left_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_right_name_12 = const_str_digest_b2ad6e17ea6c37fb40ca65618064396b;
    tmp_left_name_23 = BINARY_OPERATION_ADD( tmp_left_name_24, tmp_right_name_12 );
    Py_DECREF( tmp_left_name_24 );
    if ( tmp_left_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_called_name_8 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_8 == NULL ))
    {
        tmp_called_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 141;
    tmp_right_name_13 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, &PyTuple_GET_ITEM( const_tuple_str_digest_dbbf0270f90bfcbfa51c1e227e53f0e4_tuple, 0 ) );

    if ( tmp_right_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_23 );

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    tmp_left_name_22 = BINARY_OPERATION_ADD( tmp_left_name_23, tmp_right_name_13 );
    Py_DECREF( tmp_left_name_23 );
    Py_DECREF( tmp_right_name_13 );
    if ( tmp_left_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    tmp_right_name_14 = const_str_digest_32ac217bdff7c6caf99bb8a973372a81;
    tmp_left_name_21 = BINARY_OPERATION_ADD( tmp_left_name_22, tmp_right_name_14 );
    Py_DECREF( tmp_left_name_22 );
    if ( tmp_left_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    tmp_called_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_9 == NULL ))
    {
        tmp_called_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 144;
    tmp_right_name_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, &PyTuple_GET_ITEM( const_tuple_str_digest_963286ad3178c103324b9b07b66b91cf_tuple, 0 ) );

    if ( tmp_right_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_21 );

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_left_name_20 = BINARY_OPERATION_ADD( tmp_left_name_21, tmp_right_name_15 );
    Py_DECREF( tmp_left_name_21 );
    Py_DECREF( tmp_right_name_15 );
    if ( tmp_left_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_right_name_16 = const_str_digest_d9dd8713a53b56ea3a5074599b9e3487;
    tmp_left_name_19 = BINARY_OPERATION_ADD( tmp_left_name_20, tmp_right_name_16 );
    Py_DECREF( tmp_left_name_20 );
    if ( tmp_left_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_10 == NULL ))
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_10 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 147;
    tmp_right_name_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, &PyTuple_GET_ITEM( const_tuple_str_digest_c5e6a55b6801b244758895426e3542d9_tuple, 0 ) );

    if ( tmp_right_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_19 );

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_left_name_18 = BINARY_OPERATION_ADD( tmp_left_name_19, tmp_right_name_17 );
    Py_DECREF( tmp_left_name_19 );
    Py_DECREF( tmp_right_name_17 );
    if ( tmp_left_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_right_name_18 = const_str_digest_283b24e30d1fa10525d4197b5a273d15;
    tmp_left_name_17 = BINARY_OPERATION_ADD( tmp_left_name_18, tmp_right_name_18 );
    Py_DECREF( tmp_left_name_18 );
    if ( tmp_left_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_called_name_11 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_11 == NULL ))
    {
        tmp_called_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_17 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 150;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 150;
    tmp_right_name_19 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, &PyTuple_GET_ITEM( const_tuple_str_digest_af0fa9a92532c606e0e65de481890051_tuple, 0 ) );

    if ( tmp_right_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_17 );

        exception_lineno = 150;
        goto frame_exception_exit_1;
    }
    tmp_left_name_16 = BINARY_OPERATION_ADD( tmp_left_name_17, tmp_right_name_19 );
    Py_DECREF( tmp_left_name_17 );
    Py_DECREF( tmp_right_name_19 );
    if ( tmp_left_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 150;
        goto frame_exception_exit_1;
    }
    tmp_right_name_20 = const_str_digest_84f027da8d9989afd7d384e03c83d525;
    tmp_left_name_15 = BINARY_OPERATION_ADD( tmp_left_name_16, tmp_right_name_20 );
    Py_DECREF( tmp_left_name_16 );
    if ( tmp_left_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 150;
        goto frame_exception_exit_1;
    }
    tmp_called_name_12 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_12 == NULL ))
    {
        tmp_called_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_12 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 156;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 156;
    tmp_right_name_21 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, &PyTuple_GET_ITEM( const_tuple_str_digest_bf2b4eeb2bb20a21421d678738b5a75e_tuple, 0 ) );

    if ( tmp_right_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_15 );

        exception_lineno = 156;
        goto frame_exception_exit_1;
    }
    tmp_left_name_14 = BINARY_OPERATION_ADD( tmp_left_name_15, tmp_right_name_21 );
    Py_DECREF( tmp_left_name_15 );
    Py_DECREF( tmp_right_name_21 );
    if ( tmp_left_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 156;
        goto frame_exception_exit_1;
    }
    tmp_right_name_22 = const_str_digest_f1e75c0c1497ab800c297f4461543ec2;
    tmp_left_name_13 = BINARY_OPERATION_ADD( tmp_left_name_14, tmp_right_name_22 );
    Py_DECREF( tmp_left_name_14 );
    if ( tmp_left_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 156;
        goto frame_exception_exit_1;
    }
    tmp_called_name_13 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_13 == NULL ))
    {
        tmp_called_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_13 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 159;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 159;
    tmp_right_name_23 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, &PyTuple_GET_ITEM( const_tuple_str_digest_b479b99c7dbd197f077384bde03834c4_tuple, 0 ) );

    if ( tmp_right_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_13 );

        exception_lineno = 159;
        goto frame_exception_exit_1;
    }
    tmp_left_name_12 = BINARY_OPERATION_ADD( tmp_left_name_13, tmp_right_name_23 );
    Py_DECREF( tmp_left_name_13 );
    Py_DECREF( tmp_right_name_23 );
    if ( tmp_left_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 159;
        goto frame_exception_exit_1;
    }
    tmp_right_name_24 = const_str_digest_032e97d119935691197bd6f75c386436;
    tmp_left_name_11 = BINARY_OPERATION_ADD( tmp_left_name_12, tmp_right_name_24 );
    Py_DECREF( tmp_left_name_12 );
    if ( tmp_left_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 159;
        goto frame_exception_exit_1;
    }
    tmp_called_name_14 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_14 == NULL ))
    {
        tmp_called_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_11 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 162;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 162;
    tmp_right_name_25 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, &PyTuple_GET_ITEM( const_tuple_str_digest_787bc58289c516f4da3da43b0da58897_tuple, 0 ) );

    if ( tmp_right_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_11 );

        exception_lineno = 162;
        goto frame_exception_exit_1;
    }
    tmp_left_name_10 = BINARY_OPERATION_ADD( tmp_left_name_11, tmp_right_name_25 );
    Py_DECREF( tmp_left_name_11 );
    Py_DECREF( tmp_right_name_25 );
    if ( tmp_left_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 162;
        goto frame_exception_exit_1;
    }
    tmp_right_name_26 = const_str_digest_1f723c756343a499dbe333f14ab5d732;
    tmp_left_name_9 = BINARY_OPERATION_ADD( tmp_left_name_10, tmp_right_name_26 );
    Py_DECREF( tmp_left_name_10 );
    if ( tmp_left_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 162;
        goto frame_exception_exit_1;
    }
    tmp_called_name_15 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_15 == NULL ))
    {
        tmp_called_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 165;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 165;
    tmp_right_name_27 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, &PyTuple_GET_ITEM( const_tuple_str_digest_66fffa7382fc579f724e49265556b744_tuple, 0 ) );

    if ( tmp_right_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_9 );

        exception_lineno = 165;
        goto frame_exception_exit_1;
    }
    tmp_left_name_8 = BINARY_OPERATION_ADD( tmp_left_name_9, tmp_right_name_27 );
    Py_DECREF( tmp_left_name_9 );
    Py_DECREF( tmp_right_name_27 );
    if ( tmp_left_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 165;
        goto frame_exception_exit_1;
    }
    tmp_right_name_28 = const_str_digest_b84e338a3141ef4405d32063e11ea533;
    tmp_left_name_7 = BINARY_OPERATION_ADD( tmp_left_name_8, tmp_right_name_28 );
    Py_DECREF( tmp_left_name_8 );
    if ( tmp_left_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 165;
        goto frame_exception_exit_1;
    }
    tmp_called_name_16 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_16 == NULL ))
    {
        tmp_called_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 168;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 168;
    tmp_right_name_29 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, &PyTuple_GET_ITEM( const_tuple_str_digest_c657b0be22471abcb9376de73f2ad796_tuple, 0 ) );

    if ( tmp_right_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_7 );

        exception_lineno = 168;
        goto frame_exception_exit_1;
    }
    tmp_left_name_6 = BINARY_OPERATION_ADD( tmp_left_name_7, tmp_right_name_29 );
    Py_DECREF( tmp_left_name_7 );
    Py_DECREF( tmp_right_name_29 );
    if ( tmp_left_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 168;
        goto frame_exception_exit_1;
    }
    tmp_right_name_30 = const_str_digest_09bc009ffd858aaf58df7e98266d9b89;
    tmp_left_name_5 = BINARY_OPERATION_ADD( tmp_left_name_6, tmp_right_name_30 );
    Py_DECREF( tmp_left_name_6 );
    if ( tmp_left_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 168;
        goto frame_exception_exit_1;
    }
    tmp_called_name_17 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_17 == NULL ))
    {
        tmp_called_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_17 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 170;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 170;
    tmp_right_name_31 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_17, &PyTuple_GET_ITEM( const_tuple_str_digest_0337eaf78063cb96bf4678b105943104_tuple, 0 ) );

    if ( tmp_right_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_5 );

        exception_lineno = 170;
        goto frame_exception_exit_1;
    }
    tmp_left_name_4 = BINARY_OPERATION_ADD( tmp_left_name_5, tmp_right_name_31 );
    Py_DECREF( tmp_left_name_5 );
    Py_DECREF( tmp_right_name_31 );
    if ( tmp_left_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 170;
        goto frame_exception_exit_1;
    }
    tmp_right_name_32 = const_str_digest_0bb657bab49ef543e096eeb93b12d22e;
    tmp_left_name_3 = BINARY_OPERATION_ADD( tmp_left_name_4, tmp_right_name_32 );
    Py_DECREF( tmp_left_name_4 );
    if ( tmp_left_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 170;
        goto frame_exception_exit_1;
    }
    tmp_called_name_18 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_name_18 == NULL ))
    {
        tmp_called_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_name_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "gentitle" );
        exception_tb = NULL;

        exception_lineno = 173;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 173;
    tmp_right_name_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, &PyTuple_GET_ITEM( const_tuple_str_digest_933e858953f6fd1fbfea644539c65768_tuple, 0 ) );

    if ( tmp_right_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );
        Py_DECREF( tmp_left_name_3 );

        exception_lineno = 173;
        goto frame_exception_exit_1;
    }
    tmp_left_name_2 = BINARY_OPERATION_ADD( tmp_left_name_3, tmp_right_name_33 );
    Py_DECREF( tmp_left_name_3 );
    Py_DECREF( tmp_right_name_33 );
    if ( tmp_left_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 173;
        goto frame_exception_exit_1;
    }
    tmp_right_name_34 = const_str_digest_840172d388b493b7b1f460e6e40cfae7;
    tmp_left_name_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_34 );
    Py_DECREF( tmp_left_name_2 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 173;
        goto frame_exception_exit_1;
    }
    tmp_right_name_35 = const_str_digest_170fbc35e0bd1f7f0940a832e84e8905;
    tmp_dict_value_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_35 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        exception_lineno = 218;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_modulebody;
    PyDict_SetItem( tmp_assign_source_84, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    tmp_dict_value_2 = PyDict_Copy( const_dict_f901ef362e29b410a7de5c49b0849102 );
    tmp_dict_key_2 = const_str_plain_separatorsfor;
    PyDict_SetItem( tmp_assign_source_84, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    tmp_dict_value_3 = LIST_COPY( const_list_63cf9afba8d0564dfc4c1155a17b0c8c_list );
    tmp_dict_key_3 = const_str_plain_latexdoc;
    PyDict_SetItem( tmp_assign_source_84, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    tmp_dict_value_4 = LIST_COPY( const_list_32f32ffbbd5d0469a259f67cd7bedf23_list );
    tmp_dict_key_4 = const_str_plain_restdoc;
    PyDict_SetItem( tmp_assign_source_84, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_module_rules, tmp_assign_source_84 );
    tmp_assign_source_85 = PyList_New( 1 );
    tmp_list_element_1 = _PyDict_NewPresized( 10 );
    tmp_dict_value_5 = const_str_digest_4565e1342e713e5280b35b0d095f4f74;
    tmp_dict_key_5 = const_str_plain_body;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_5, tmp_dict_value_5 );
    tmp_dict_value_6 = const_str_digest_c199754672a1a8212e0029f4201d48dd;
    tmp_dict_key_6 = const_str_plain_method;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_6, tmp_dict_value_6 );
    tmp_dict_value_7 = const_str_digest_c634e279bc3759c83195e9f177b3e4ee;
    tmp_dict_key_7 = const_str_plain_externroutines;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_7, tmp_dict_value_7 );
    tmp_dict_value_8 = const_str_digest_fc43de2b25b47bcb22ddc2ca412903c1;
    tmp_dict_key_8 = const_str_plain_routine_defs;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_8, tmp_dict_value_8 );
    tmp_dict_value_9 = const_str_digest_74ecdf96ef9d47fce851c9d30f38711e;
    tmp_dict_key_9 = const_str_plain_initf90modhooks;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_9, tmp_dict_value_9 );
    tmp_dict_value_10 = const_str_digest_b749d4e775149fbefd6170208d066d79;
    tmp_dict_key_10 = const_str_plain_initf2pywraphooks;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_10, tmp_dict_value_10 );
    tmp_dict_value_11 = const_str_digest_7c229b69f728161f89793a537f326cd6;
    tmp_dict_key_11 = const_str_plain_initcommonhooks;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_11, tmp_dict_value_11 );
    tmp_dict_value_12 = const_str_empty;
    tmp_dict_key_12 = const_str_plain_latexdoc;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_12, tmp_dict_value_12 );
    tmp_dict_value_13 = const_str_empty;
    tmp_dict_key_13 = const_str_plain_restdoc;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_13, tmp_dict_value_13 );
    tmp_dict_value_14 = _PyDict_NewPresized( 2 );
    tmp_dict_value_15 = const_str_digest_9aa41ddc81f67fdd23a634f026352f66;
    tmp_dict_key_15 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_dict_key_15 == NULL ))
    {
        tmp_dict_key_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_dict_key_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_85 );
        Py_DECREF( tmp_list_element_1 );
        Py_DECREF( tmp_dict_value_14 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasnote" );
        exception_tb = NULL;

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_14, tmp_dict_key_15, tmp_dict_value_15 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_85 );
        Py_DECREF( tmp_list_element_1 );
        Py_DECREF( tmp_dict_value_14 );

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_16 = const_str_empty;
    tmp_called_name_19 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_19 == NULL ))
    {
        tmp_called_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_19 == NULL )
    {
        Py_DECREF( tmp_assign_source_85 );
        Py_DECREF( tmp_list_element_1 );
        Py_DECREF( tmp_dict_value_14 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_85 );
        Py_DECREF( tmp_list_element_1 );
        Py_DECREF( tmp_dict_value_14 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasnote" );
        exception_tb = NULL;

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 266;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_dict_key_16 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, call_args );
    }

    if ( tmp_dict_key_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_85 );
        Py_DECREF( tmp_list_element_1 );
        Py_DECREF( tmp_dict_value_14 );

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_14, tmp_dict_key_16, tmp_dict_value_16 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_85 );
        Py_DECREF( tmp_list_element_1 );
        Py_DECREF( tmp_dict_value_14 );
        Py_DECREF( tmp_dict_key_16 );

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_16 );
    tmp_dict_key_14 = const_str_plain_modnote;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_14, tmp_dict_value_14 );
    Py_DECREF( tmp_dict_value_14 );
    PyList_SET_ITEM( tmp_assign_source_85, 0, tmp_list_element_1 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_defmod_rules, tmp_assign_source_85 );
    tmp_assign_source_86 = _PyDict_NewPresized( 12 );
    tmp_dict_value_17 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sepdict );

    if (unlikely( tmp_dict_value_17 == NULL ))
    {
        tmp_dict_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sepdict );
    }

    if ( tmp_dict_value_17 == NULL )
    {
        Py_DECREF( tmp_assign_source_86 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sepdict" );
        exception_tb = NULL;

        exception_lineno = 271;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_17 = const_str_plain_separatorsfor;
    PyDict_SetItem( tmp_assign_source_86, tmp_dict_key_17, tmp_dict_value_17 );
    tmp_dict_value_18 = const_str_digest_d48a67d4b786a3513360c9431084eaad;
    tmp_dict_key_18 = const_str_plain_body;
    PyDict_SetItem( tmp_assign_source_86, tmp_dict_key_18, tmp_dict_value_18 );
    tmp_dict_value_19 = const_str_digest_b5fc975e73c53e47c4a1ef14fc1f67e1;
    tmp_dict_key_19 = const_str_plain_routine_defs;
    PyDict_SetItem( tmp_assign_source_86, tmp_dict_key_19, tmp_dict_value_19 );
    tmp_dict_value_20 = const_str_digest_631e000c81d910a8147ab346cc8ad355;
    tmp_dict_key_20 = const_str_plain_initf2pywraphooks;
    PyDict_SetItem( tmp_assign_source_86, tmp_dict_key_20, tmp_dict_value_20 );
    tmp_dict_value_21 = const_str_digest_dbc79063883259818da1c0a53399df33;
    tmp_dict_key_21 = const_str_plain_externroutines;
    PyDict_SetItem( tmp_assign_source_86, tmp_dict_key_21, tmp_dict_value_21 );
    tmp_dict_value_22 = const_str_digest_482888043114fac9592902783c464a6e;
    tmp_dict_key_22 = const_str_plain_doc;
    PyDict_SetItem( tmp_assign_source_86, tmp_dict_key_22, tmp_dict_value_22 );
    tmp_dict_value_23 = const_str_digest_a374575bcf8cb1068e38d978d5cd2122;
    tmp_dict_key_23 = const_str_plain_docshort;
    PyDict_SetItem( tmp_assign_source_86, tmp_dict_key_23, tmp_dict_value_23 );
    tmp_dict_value_24 = const_str_digest_6f1be74ea92dca27c547a995cbe2baf3;
    tmp_dict_key_24 = const_str_plain_docs;
    PyDict_SetItem( tmp_assign_source_86, tmp_dict_key_24, tmp_dict_value_24 );
    tmp_dict_value_25 = LIST_COPY( const_list_0725c8ade74f8f28b621ba88c880b6bd_list );
    tmp_dict_key_25 = const_str_plain_need;
    PyDict_SetItem( tmp_assign_source_86, tmp_dict_key_25, tmp_dict_value_25 );
    Py_DECREF( tmp_dict_value_25 );
    tmp_dict_value_26 = _PyDict_NewPresized( 1 );
    tmp_dict_value_27 = const_str_digest_d63884af5fa452403148da77aa33bbba;
    tmp_dict_key_27 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_27 == NULL ))
    {
        tmp_dict_key_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_27 == NULL )
    {
        Py_DECREF( tmp_assign_source_86 );
        Py_DECREF( tmp_dict_value_26 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 335;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_26, tmp_dict_key_27, tmp_dict_value_27 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_86 );
        Py_DECREF( tmp_dict_value_26 );

        exception_lineno = 335;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_26 = const_str_plain_cppmacros;
    PyDict_SetItem( tmp_assign_source_86, tmp_dict_key_26, tmp_dict_value_26 );
    Py_DECREF( tmp_dict_value_26 );
    tmp_dict_value_28 = LIST_COPY( const_list_d9758b2de662a4320da70ff340579452_list );
    tmp_dict_key_28 = const_str_plain_latexdoc;
    PyDict_SetItem( tmp_assign_source_86, tmp_dict_key_28, tmp_dict_value_28 );
    Py_DECREF( tmp_dict_value_28 );
    tmp_dict_value_29 = LIST_COPY( const_list_str_digest_c4d2c3ebecea3ad233be322292339553_list );
    tmp_dict_key_29 = const_str_plain_restdoc;
    PyDict_SetItem( tmp_assign_source_86, tmp_dict_key_29, tmp_dict_value_29 );
    Py_DECREF( tmp_dict_value_29 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_routine_rules, tmp_assign_source_86 );
    tmp_assign_source_87 = PyList_New( 10 );
    tmp_list_element_2 = _PyDict_NewPresized( 47 );
    tmp_dict_value_30 = PyDict_Copy( const_dict_8074601cdd243b85d166caacc3b89ad0 );
    tmp_dict_key_30 = const_str_plain_separatorsfor;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_30, tmp_dict_value_30 );
    Py_DECREF( tmp_dict_value_30 );
    tmp_dict_value_31 = const_str_empty;
    tmp_dict_key_31 = const_str_plain_kwlist;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_31, tmp_dict_value_31 );
    tmp_dict_value_32 = const_str_empty;
    tmp_dict_key_32 = const_str_plain_kwlistopt;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_32, tmp_dict_value_32 );
    tmp_dict_value_33 = const_str_empty;
    tmp_dict_key_33 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_33, tmp_dict_value_33 );
    tmp_dict_value_34 = const_str_empty;
    tmp_dict_key_34 = const_str_plain_callfortranappend;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_34, tmp_dict_value_34 );
    tmp_dict_value_35 = const_str_empty;
    tmp_dict_key_35 = const_str_plain_docsign;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_35, tmp_dict_value_35 );
    tmp_dict_value_36 = const_str_empty;
    tmp_dict_key_36 = const_str_plain_docsignopt;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_36, tmp_dict_value_36 );
    tmp_dict_value_37 = const_str_digest_61e182e7ec186c9e9c0ffbab603428ea;
    tmp_dict_key_37 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_37, tmp_dict_value_37 );
    tmp_dict_value_38 = const_str_digest_b46e1c937548d68a9c2f031741c09adb;
    tmp_dict_key_38 = const_str_plain_freemem;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_38, tmp_dict_value_38 );
    tmp_dict_value_39 = const_str_empty;
    tmp_dict_key_39 = const_str_plain_docsignshort;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_39, tmp_dict_value_39 );
    tmp_dict_value_40 = const_str_empty;
    tmp_dict_key_40 = const_str_plain_docsignoptshort;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_40, tmp_dict_value_40 );
    tmp_dict_value_41 = const_str_empty;
    tmp_dict_key_41 = const_str_plain_docstrsigns;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_41, tmp_dict_value_41 );
    tmp_dict_value_42 = const_str_empty;
    tmp_dict_key_42 = const_str_plain_latexdocstrsigns;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_42, tmp_dict_value_42 );
    tmp_dict_value_43 = const_str_digest_1f6d21ea771f0d8ddf3920ca84317357;
    tmp_dict_key_43 = const_str_plain_docstrreq;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_43, tmp_dict_value_43 );
    tmp_dict_value_44 = const_str_digest_cf8a9881e3a2ad0668b004694b967abc;
    tmp_dict_key_44 = const_str_plain_docstropt;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_44, tmp_dict_value_44 );
    tmp_dict_value_45 = const_str_digest_6f81bebe9433aaa279ac7cb939be9fc7;
    tmp_dict_key_45 = const_str_plain_docstrout;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_45, tmp_dict_value_45 );
    tmp_dict_value_46 = const_str_digest_2c65e7a3708b15343e85146c682ba2c2;
    tmp_dict_key_46 = const_str_plain_docstrcbs;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_46, tmp_dict_value_46 );
    tmp_dict_value_47 = const_str_digest_69865d8d974379ad2496cd131169c31f;
    tmp_dict_key_47 = const_str_plain_latexdocstrreq;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_47, tmp_dict_value_47 );
    tmp_dict_value_48 = const_str_digest_858755cb0d1b16e28bf818ef14dc1f10;
    tmp_dict_key_48 = const_str_plain_latexdocstropt;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_48, tmp_dict_value_48 );
    tmp_dict_value_49 = const_str_digest_ced081d2a6b71e298fe676a098557262;
    tmp_dict_key_49 = const_str_plain_latexdocstrout;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_49, tmp_dict_value_49 );
    tmp_dict_value_50 = const_str_digest_f4fea561d25dbef3080e43f7f7093ca8;
    tmp_dict_key_50 = const_str_plain_latexdocstrcbs;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_50, tmp_dict_value_50 );
    tmp_dict_value_51 = const_str_empty;
    tmp_dict_key_51 = const_str_plain_args_capi;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_51, tmp_dict_value_51 );
    tmp_dict_value_52 = const_str_empty;
    tmp_dict_key_52 = const_str_plain_keys_capi;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_52, tmp_dict_value_52 );
    tmp_dict_value_53 = const_str_empty;
    tmp_dict_key_53 = const_str_plain_functype;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_53, tmp_dict_value_53 );
    tmp_dict_value_54 = const_str_digest_19a37930d23e75dad6a7be50f2905eb9;
    tmp_dict_key_54 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_54, tmp_dict_value_54 );
    tmp_dict_value_55 = LIST_COPY( const_list_str_digest_99dfc913087e0ea1a18c8ad788d0d99b_list );
    tmp_dict_key_55 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_55, tmp_dict_value_55 );
    Py_DECREF( tmp_dict_value_55 );
    tmp_dict_value_56 = const_str_digest_e0848666c6e4c10ba0a704c34bf8a25a;
    tmp_dict_key_56 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_56, tmp_dict_value_56 );
    tmp_dict_value_57 = LIST_COPY( const_list_str_digest_387e5976948d489f60396f8097e151c3_list );
    tmp_dict_key_57 = const_str_plain_closepyobjfrom;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_57, tmp_dict_value_57 );
    Py_DECREF( tmp_dict_value_57 );
    tmp_dict_value_58 = const_str_digest_563ace957d241680d13ba471193cde19;
    tmp_dict_key_58 = const_str_plain_topyarr;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_58, tmp_dict_value_58 );
    tmp_dict_value_59 = const_str_digest_9ed50576800e8b31c86257ade86792c9;
    tmp_dict_key_59 = const_str_plain_routdebugleave;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_59, tmp_dict_value_59 );
    tmp_dict_value_60 = const_str_digest_9c43fa3f6d4fba5643ad09e3876054c8;
    tmp_dict_key_60 = const_str_plain_routdebugenter;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_60, tmp_dict_value_60 );
    tmp_dict_value_61 = const_str_digest_a91d17bf637fe2ed086dd27d03793bab;
    tmp_dict_key_61 = const_str_plain_routdebugfailure;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_61, tmp_dict_value_61 );
    tmp_dict_value_62 = const_str_digest_9f16671c33eb6f2ff404ed7978cd1586;
    tmp_dict_key_62 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_62, tmp_dict_value_62 );
    tmp_dict_value_63 = const_str_empty;
    tmp_dict_key_63 = const_str_plain_argformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_63, tmp_dict_value_63 );
    tmp_dict_value_64 = const_str_empty;
    tmp_dict_key_64 = const_str_plain_keyformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_64, tmp_dict_value_64 );
    tmp_dict_value_65 = const_str_empty;
    tmp_dict_key_65 = const_str_plain_need_cfuncs;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_65, tmp_dict_value_65 );
    tmp_dict_value_66 = const_str_empty;
    tmp_dict_key_66 = const_str_plain_docreturn;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_66, tmp_dict_value_66 );
    tmp_dict_value_67 = const_str_empty;
    tmp_dict_key_67 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_67, tmp_dict_value_67 );
    tmp_dict_value_68 = const_str_empty;
    tmp_dict_key_68 = const_str_plain_returnformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_68, tmp_dict_value_68 );
    tmp_dict_value_69 = const_str_empty;
    tmp_dict_key_69 = const_str_plain_rformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_69, tmp_dict_value_69 );
    tmp_dict_value_70 = const_str_empty;
    tmp_dict_key_70 = const_str_plain_kwlistxa;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_70, tmp_dict_value_70 );
    tmp_dict_value_71 = const_str_empty;
    tmp_dict_key_71 = const_str_plain_keys_xa;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_71, tmp_dict_value_71 );
    tmp_dict_value_72 = const_str_empty;
    tmp_dict_key_72 = const_str_plain_xaformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_72, tmp_dict_value_72 );
    tmp_dict_value_73 = const_str_empty;
    tmp_dict_key_73 = const_str_plain_docsignxa;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_73, tmp_dict_value_73 );
    tmp_dict_value_74 = const_str_empty;
    tmp_dict_key_74 = const_str_plain_docsignxashort;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_74, tmp_dict_value_74 );
    tmp_dict_value_75 = const_str_empty;
    tmp_dict_key_75 = const_str_plain_initf2pywraphook;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_75, tmp_dict_value_75 );
    tmp_dict_value_76 = _PyDict_NewPresized( 2 );
    tmp_dict_value_77 = const_str_digest_685077f1f38d82b206cc793ea02e01a1;
    tmp_dict_key_77 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_dict_key_77 == NULL ))
    {
        tmp_dict_key_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_dict_key_77 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_76 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasnote" );
        exception_tb = NULL;

        exception_lineno = 389;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_76, tmp_dict_key_77, tmp_dict_value_77 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_76 );

        exception_lineno = 389;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_78 = const_str_empty;
    tmp_called_name_20 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_20 == NULL ))
    {
        tmp_called_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_20 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_76 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 389;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_args_element_name_4 == NULL ))
    {
        tmp_args_element_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_76 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasnote" );
        exception_tb = NULL;

        exception_lineno = 389;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 389;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_dict_key_78 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_20, call_args );
    }

    if ( tmp_dict_key_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_76 );

        exception_lineno = 389;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_76, tmp_dict_key_78, tmp_dict_value_78 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_76 );
        Py_DECREF( tmp_dict_key_78 );

        exception_lineno = 389;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_78 );
    tmp_dict_key_76 = const_str_plain_routnote;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_76, tmp_dict_value_76 );
    Py_DECREF( tmp_dict_value_76 );
    PyList_SET_ITEM( tmp_assign_source_87, 0, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 4 );
    tmp_dict_value_79 = const_str_digest_2a298462210506c569d120ca46f60e5c;
    tmp_dict_key_79 = const_str_plain_apiname;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_79, tmp_dict_value_79 );
    tmp_dict_value_80 = const_str_digest_eec1155b73c887bcd4e234f423320107;
    tmp_dict_key_80 = const_str_plain_pyname;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_80, tmp_dict_value_80 );
    tmp_dict_value_81 = const_str_empty;
    tmp_dict_key_81 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_81, tmp_dict_value_81 );
    tmp_called_name_21 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_21 == NULL ))
    {
        tmp_called_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_21 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 394;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_5 == NULL ))
    {
        tmp_args_element_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 394;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 394;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_dict_value_82 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_21, call_args );
    }

    if ( tmp_dict_value_82 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );

        exception_lineno = 394;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_82 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_82, tmp_dict_value_82 );
    Py_DECREF( tmp_dict_value_82 );
    PyList_SET_ITEM( tmp_assign_source_87, 1, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 4 );
    tmp_dict_value_83 = const_str_digest_c760157a12395121e8e8ddcb4c62d725;
    tmp_dict_key_83 = const_str_plain_apiname;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_83, tmp_dict_value_83 );
    tmp_dict_value_84 = const_str_digest_660079687b96f232aaa5a3014be65b39;
    tmp_dict_key_84 = const_str_plain_pyname;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_84, tmp_dict_value_84 );
    tmp_dict_value_85 = const_str_empty;
    tmp_dict_key_85 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_85, tmp_dict_value_85 );
    tmp_dict_value_86 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_dict_value_86 == NULL ))
    {
        tmp_dict_value_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_dict_value_86 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 399;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_86 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_86, tmp_dict_value_86 );
    PyList_SET_ITEM( tmp_assign_source_87, 2, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 6 );
    tmp_dict_value_87 = const_str_plain_void;
    tmp_dict_key_87 = const_str_plain_functype;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_87, tmp_dict_value_87 );
    tmp_dict_value_88 = _PyDict_NewPresized( 4 );
    tmp_dict_value_89 = const_str_digest_418fe04998188548a4eb680883e25e29;
    tmp_called_name_22 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_22 == NULL ))
    {
        tmp_called_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_22 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }

    tmp_called_name_23 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_23 == NULL ))
    {
        tmp_called_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_23 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }

    tmp_called_name_24 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_24 == NULL ))
    {
        tmp_called_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_24 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_8 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_8 == NULL ))
    {
        tmp_args_element_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_9 == NULL ))
    {
        tmp_args_element_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 402;
    {
        PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9 };
        tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_24, call_args );
    }

    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 402;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_args_element_name_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_23, call_args );
    }

    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }
    tmp_called_name_25 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_25 == NULL ))
    {
        tmp_called_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_25 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_args_element_name_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_11 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_11 == NULL ))
    {
        tmp_args_element_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_args_element_name_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 402;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_args_element_name_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_25, call_args );
    }

    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_args_element_name_6 );

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 402;
    {
        PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_10 };
        tmp_dict_key_89 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_22, call_args );
    }

    Py_DECREF( tmp_args_element_name_6 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_dict_key_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_88, tmp_dict_key_89, tmp_dict_value_89 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_dict_key_89 );

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_89 );
    tmp_dict_value_90 = const_str_digest_cc2eda06485ca42feb0b61a8d94b80aa;
    tmp_called_name_26 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_26 == NULL ))
    {
        tmp_called_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_26 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }

    tmp_called_name_27 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_27 == NULL ))
    {
        tmp_called_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_27 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_13 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_13 == NULL ))
    {
        tmp_args_element_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 403;
    {
        PyObject *call_args[] = { tmp_args_element_name_13 };
        tmp_args_element_name_12 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_27, call_args );
    }

    if ( tmp_args_element_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_14 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_14 == NULL ))
    {
        tmp_args_element_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_args_element_name_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }

    tmp_called_name_28 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_28 == NULL ))
    {
        tmp_called_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_28 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_args_element_name_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_16 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_16 == NULL ))
    {
        tmp_args_element_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_args_element_name_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 403;
    {
        PyObject *call_args[] = { tmp_args_element_name_16 };
        tmp_args_element_name_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_28, call_args );
    }

    if ( tmp_args_element_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_args_element_name_12 );

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 403;
    {
        PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_14, tmp_args_element_name_15 };
        tmp_dict_key_90 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_26, call_args );
    }

    Py_DECREF( tmp_args_element_name_12 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_dict_key_90 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_88, tmp_dict_key_90, tmp_dict_value_90 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_dict_key_90 );

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_90 );
    tmp_dict_value_91 = const_str_empty;
    tmp_dict_key_91 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_dict_key_91 == NULL ))
    {
        tmp_dict_key_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_dict_key_91 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 404;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_88, tmp_dict_key_91, tmp_dict_value_91 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_92 = const_str_empty;
    tmp_dict_key_92 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_92 == NULL ))
    {
        tmp_dict_key_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_92 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 405;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_88, tmp_dict_key_92, tmp_dict_value_92 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_88 = const_str_plain_declfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_88, tmp_dict_value_88 );
    Py_DECREF( tmp_dict_value_88 );
    tmp_dict_value_93 = _PyDict_NewPresized( 3 );
    tmp_dict_value_94 = const_str_digest_f079d8c7e0ce1658a2cdcdbc6577f10a;
    tmp_called_name_29 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_29 == NULL ))
    {
        tmp_called_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_29 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }

    tmp_called_name_30 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_30 == NULL ))
    {
        tmp_called_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_30 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_18 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_18 == NULL ))
    {
        tmp_args_element_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_19 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_19 == NULL ))
    {
        tmp_args_element_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_19 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_20 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_20 == NULL ))
    {
        tmp_args_element_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_20 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 407;
    {
        PyObject *call_args[] = { tmp_args_element_name_18, tmp_args_element_name_19, tmp_args_element_name_20 };
        tmp_args_element_name_17 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_30, call_args );
    }

    if ( tmp_args_element_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 407;
    {
        PyObject *call_args[] = { tmp_args_element_name_17 };
        tmp_dict_key_94 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_29, call_args );
    }

    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_dict_key_94 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_93, tmp_dict_key_94, tmp_dict_value_94 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_dict_key_94 );

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_94 );
    tmp_dict_value_95 = const_str_digest_3901229eb47cd28cbfe43558ace8a7fe;
    tmp_called_name_31 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_31 == NULL ))
    {
        tmp_called_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_31 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 408;
        goto frame_exception_exit_1;
    }

    tmp_called_name_32 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_32 == NULL ))
    {
        tmp_called_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_32 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 408;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_22 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_22 == NULL ))
    {
        tmp_args_element_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_22 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 408;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 408;
    {
        PyObject *call_args[] = { tmp_args_element_name_22 };
        tmp_args_element_name_21 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_32, call_args );
    }

    if ( tmp_args_element_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );

        exception_lineno = 408;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_23 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_23 == NULL ))
    {
        tmp_args_element_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_23 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_args_element_name_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 408;
        goto frame_exception_exit_1;
    }

    tmp_called_name_33 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_33 == NULL ))
    {
        tmp_called_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_33 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_args_element_name_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 408;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_25 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_25 == NULL ))
    {
        tmp_args_element_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_25 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_args_element_name_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 408;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 408;
    {
        PyObject *call_args[] = { tmp_args_element_name_25 };
        tmp_args_element_name_24 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_33, call_args );
    }

    if ( tmp_args_element_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_args_element_name_21 );

        exception_lineno = 408;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 408;
    {
        PyObject *call_args[] = { tmp_args_element_name_21, tmp_args_element_name_23, tmp_args_element_name_24 };
        tmp_dict_key_95 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_31, call_args );
    }

    Py_DECREF( tmp_args_element_name_21 );
    Py_DECREF( tmp_args_element_name_24 );
    if ( tmp_dict_key_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );

        exception_lineno = 408;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_93, tmp_dict_key_95, tmp_dict_value_95 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_dict_key_95 );

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_95 );
    tmp_dict_value_96 = const_str_digest_d63e19eac20174e68ed46e663e86a06f;
    tmp_called_name_34 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_34 == NULL ))
    {
        tmp_called_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_34 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 409;
        goto frame_exception_exit_1;
    }

    tmp_called_name_35 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_35 == NULL ))
    {
        tmp_called_name_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_35 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 409;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_27 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_27 == NULL ))
    {
        tmp_args_element_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_27 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 409;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 409;
    {
        PyObject *call_args[] = { tmp_args_element_name_27 };
        tmp_args_element_name_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_35, call_args );
    }

    if ( tmp_args_element_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );

        exception_lineno = 409;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_28 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_28 == NULL ))
    {
        tmp_args_element_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_28 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_args_element_name_26 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 409;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 409;
    {
        PyObject *call_args[] = { tmp_args_element_name_26, tmp_args_element_name_28 };
        tmp_dict_key_96 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_34, call_args );
    }

    Py_DECREF( tmp_args_element_name_26 );
    if ( tmp_dict_key_96 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );

        exception_lineno = 409;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_93, tmp_dict_key_96, tmp_dict_value_96 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_dict_key_96 );

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_96 );
    tmp_dict_key_93 = const_str_plain_routine_def;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_93, tmp_dict_value_93 );
    Py_DECREF( tmp_dict_value_93 );
    tmp_dict_value_97 = _PyDict_NewPresized( 1 );
    tmp_dict_value_98 = const_str_plain_F_FUNC;
    tmp_called_name_36 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_36 == NULL ))
    {
        tmp_called_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_36 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }

    tmp_called_name_37 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_37 == NULL ))
    {
        tmp_called_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_37 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }

    tmp_called_name_38 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_38 == NULL ))
    {
        tmp_called_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_38 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_31 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_31 == NULL ))
    {
        tmp_args_element_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_31 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_32 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_32 == NULL ))
    {
        tmp_args_element_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_32 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 411;
    {
        PyObject *call_args[] = { tmp_args_element_name_31, tmp_args_element_name_32 };
        tmp_args_element_name_30 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_38, call_args );
    }

    if ( tmp_args_element_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 411;
    {
        PyObject *call_args[] = { tmp_args_element_name_30 };
        tmp_args_element_name_29 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_37, call_args );
    }

    Py_DECREF( tmp_args_element_name_30 );
    if ( tmp_args_element_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }
    tmp_called_name_39 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_39 == NULL ))
    {
        tmp_called_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_39 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        Py_DECREF( tmp_args_element_name_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_34 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_34 == NULL ))
    {
        tmp_args_element_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_34 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        Py_DECREF( tmp_args_element_name_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 411;
    {
        PyObject *call_args[] = { tmp_args_element_name_34 };
        tmp_args_element_name_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_39, call_args );
    }

    if ( tmp_args_element_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        Py_DECREF( tmp_args_element_name_29 );

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 411;
    {
        PyObject *call_args[] = { tmp_args_element_name_29, tmp_args_element_name_33 };
        tmp_dict_key_98 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_36, call_args );
    }

    Py_DECREF( tmp_args_element_name_29 );
    Py_DECREF( tmp_args_element_name_33 );
    if ( tmp_dict_key_98 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_97, tmp_dict_key_98, tmp_dict_value_98 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        Py_DECREF( tmp_dict_key_98 );

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_98 );
    tmp_dict_key_97 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_97, tmp_dict_value_97 );
    Py_DECREF( tmp_dict_value_97 );
    tmp_dict_value_99 = PyList_New( 7 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_100 = LIST_COPY( const_list_str_digest_c2ccddf34d5f3ccfcc1d66ae9e062936_list );
    tmp_dict_key_100 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_100 == NULL ))
    {
        tmp_dict_key_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_100 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        Py_DECREF( tmp_dict_value_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 413;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_3, tmp_dict_key_100, tmp_dict_value_100 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        Py_DECREF( tmp_dict_value_100 );

        exception_lineno = 413;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_value_100 );
    PyList_SET_ITEM( tmp_dict_value_99, 0, tmp_list_element_3 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_101 = const_str_digest_3a3271ef4159a1c24ad0288a211dee55;
    tmp_dict_key_101 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_101 == NULL ))
    {
        tmp_dict_key_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_101 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasexternals" );
        exception_tb = NULL;

        exception_lineno = 415;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_3, tmp_dict_key_101, tmp_dict_value_101 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );

        exception_lineno = 415;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_99, 1, tmp_list_element_3 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_102 = const_str_digest_9f02b2aa426d1e968bb0fe3cfd892925;
    tmp_dict_key_102 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_102 == NULL ))
    {
        tmp_dict_key_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_102 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isthreadsafe" );
        exception_tb = NULL;

        exception_lineno = 419;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_3, tmp_dict_key_102, tmp_dict_value_102 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );

        exception_lineno = 419;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_99, 2, tmp_list_element_3 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_103 = const_str_digest_f0ccf18acc02945cb81efd922b1819aa;
    tmp_dict_key_103 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_dict_key_103 == NULL ))
    {
        tmp_dict_key_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_dict_key_103 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hascallstatement" );
        exception_tb = NULL;

        exception_lineno = 420;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_3, tmp_dict_key_103, tmp_dict_value_103 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );

        exception_lineno = 420;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_99, 3, tmp_list_element_3 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_104 = const_str_digest_fe69aab46c78e8d0544f13c568d75e6a;
    tmp_called_name_40 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_40 == NULL ))
    {
        tmp_called_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_40 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 422;
        goto frame_exception_exit_1;
    }

    tmp_called_name_41 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_41 == NULL ))
    {
        tmp_called_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_41 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 422;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_36 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_args_element_name_36 == NULL ))
    {
        tmp_args_element_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_args_element_name_36 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hascallstatement" );
        exception_tb = NULL;

        exception_lineno = 422;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_37 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_37 == NULL ))
    {
        tmp_args_element_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_37 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 422;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 422;
    {
        PyObject *call_args[] = { tmp_args_element_name_36, tmp_args_element_name_37 };
        tmp_args_element_name_35 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_41, call_args );
    }

    if ( tmp_args_element_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );

        exception_lineno = 422;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 422;
    {
        PyObject *call_args[] = { tmp_args_element_name_35 };
        tmp_dict_key_104 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_40, call_args );
    }

    Py_DECREF( tmp_args_element_name_35 );
    if ( tmp_dict_key_104 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );

        exception_lineno = 422;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_3, tmp_dict_key_104, tmp_dict_value_104 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        Py_DECREF( tmp_dict_key_104 );

        exception_lineno = 422;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_104 );
    PyList_SET_ITEM( tmp_dict_value_99, 4, tmp_list_element_3 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_105 = const_str_digest_17b6682164c8e0e6b79f7d2463beb342;
    tmp_dict_key_105 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_105 == NULL ))
    {
        tmp_dict_key_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_105 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isthreadsafe" );
        exception_tb = NULL;

        exception_lineno = 424;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_3, tmp_dict_key_105, tmp_dict_value_105 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );

        exception_lineno = 424;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_99, 5, tmp_list_element_3 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_106 = const_str_digest_6fbcce788ee343047e2cb747b93c7fac;
    tmp_dict_key_106 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_106 == NULL ))
    {
        tmp_dict_key_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_106 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasexternals" );
        exception_tb = NULL;

        exception_lineno = 425;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_3, tmp_dict_key_106, tmp_dict_value_106 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );

        exception_lineno = 425;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_99, 6, tmp_list_element_3 );
    tmp_dict_key_99 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_99, tmp_dict_value_99 );
    Py_DECREF( tmp_dict_value_99 );
    tmp_called_name_42 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_42 == NULL ))
    {
        tmp_called_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_42 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 427;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_38 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_issubroutine );

    if (unlikely( tmp_args_element_name_38 == NULL ))
    {
        tmp_args_element_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_issubroutine );
    }

    if ( tmp_args_element_name_38 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "issubroutine" );
        exception_tb = NULL;

        exception_lineno = 427;
        goto frame_exception_exit_1;
    }

    tmp_called_name_43 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_43 == NULL ))
    {
        tmp_called_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_43 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 427;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_40 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_issubroutine_wrap );

    if (unlikely( tmp_args_element_name_40 == NULL ))
    {
        tmp_args_element_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_issubroutine_wrap );
    }

    if ( tmp_args_element_name_40 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "issubroutine_wrap" );
        exception_tb = NULL;

        exception_lineno = 427;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 427;
    {
        PyObject *call_args[] = { tmp_args_element_name_40 };
        tmp_args_element_name_39 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_43, call_args );
    }

    if ( tmp_args_element_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );

        exception_lineno = 427;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 427;
    {
        PyObject *call_args[] = { tmp_args_element_name_38, tmp_args_element_name_39 };
        tmp_dict_value_107 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_42, call_args );
    }

    Py_DECREF( tmp_args_element_name_39 );
    if ( tmp_dict_value_107 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );

        exception_lineno = 427;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_107 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_107, tmp_dict_value_107 );
    Py_DECREF( tmp_dict_value_107 );
    PyList_SET_ITEM( tmp_assign_source_87, 3, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 7 );
    tmp_dict_value_108 = const_str_plain_void;
    tmp_dict_key_108 = const_str_plain_functype;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_108, tmp_dict_value_108 );
    tmp_dict_value_109 = _PyDict_NewPresized( 2 );
    tmp_dict_value_110 = const_str_digest_a83c90fa5fd3daaef5d52b46677ba4ec;
    tmp_called_name_44 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_44 == NULL ))
    {
        tmp_called_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_44 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 430;
        goto frame_exception_exit_1;
    }

    tmp_called_name_45 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_45 == NULL ))
    {
        tmp_called_name_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_45 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 430;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_42 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_42 == NULL ))
    {
        tmp_args_element_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_42 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 430;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_43 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_43 == NULL ))
    {
        tmp_args_element_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_43 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 430;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 430;
    {
        PyObject *call_args[] = { tmp_args_element_name_42, tmp_args_element_name_43 };
        tmp_args_element_name_41 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_45, call_args );
    }

    if ( tmp_args_element_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );

        exception_lineno = 430;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 430;
    {
        PyObject *call_args[] = { tmp_args_element_name_41 };
        tmp_dict_key_110 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_44, call_args );
    }

    Py_DECREF( tmp_args_element_name_41 );
    if ( tmp_dict_key_110 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );

        exception_lineno = 430;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_109, tmp_dict_key_110, tmp_dict_value_110 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );
        Py_DECREF( tmp_dict_key_110 );

        exception_lineno = 430;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_110 );
    tmp_dict_value_111 = const_str_empty;
    tmp_dict_key_111 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_111 == NULL ))
    {
        tmp_dict_key_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_111 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 431;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_109, tmp_dict_key_111, tmp_dict_value_111 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );

        exception_lineno = 430;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_109 = const_str_plain_declfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_109, tmp_dict_value_109 );
    Py_DECREF( tmp_dict_value_109 );
    tmp_dict_value_112 = _PyDict_NewPresized( 2 );
    tmp_dict_value_113 = const_str_digest_a871c415f4ae2645c21857940d3b44f9;
    tmp_called_name_46 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_46 == NULL ))
    {
        tmp_called_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_46 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 434;
        goto frame_exception_exit_1;
    }

    tmp_called_name_47 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_47 == NULL ))
    {
        tmp_called_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_47 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 434;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_45 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_45 == NULL ))
    {
        tmp_args_element_name_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_45 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 434;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_46 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_46 == NULL ))
    {
        tmp_args_element_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_46 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 434;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 434;
    {
        PyObject *call_args[] = { tmp_args_element_name_45, tmp_args_element_name_46 };
        tmp_args_element_name_44 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_47, call_args );
    }

    if ( tmp_args_element_name_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );

        exception_lineno = 434;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 434;
    {
        PyObject *call_args[] = { tmp_args_element_name_44 };
        tmp_dict_key_113 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_46, call_args );
    }

    Py_DECREF( tmp_args_element_name_44 );
    if ( tmp_dict_key_113 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );

        exception_lineno = 434;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_112, tmp_dict_key_113, tmp_dict_value_113 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );
        Py_DECREF( tmp_dict_key_113 );

        exception_lineno = 434;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_113 );
    tmp_dict_value_114 = const_str_digest_d63e19eac20174e68ed46e663e86a06f;
    tmp_dict_key_114 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_114 == NULL ))
    {
        tmp_dict_key_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_114 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 435;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_112, tmp_dict_key_114, tmp_dict_value_114 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );

        exception_lineno = 434;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_112 = const_str_plain_routine_def;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_112, tmp_dict_value_112 );
    Py_DECREF( tmp_dict_value_112 );
    tmp_dict_value_115 = _PyDict_NewPresized( 1 );
    tmp_dict_value_116 = const_str_digest_4b201bb14560b4f560e6beebf146a1b3;
    tmp_called_name_48 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_48 == NULL ))
    {
        tmp_called_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_48 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }

    tmp_called_name_49 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_49 == NULL ))
    {
        tmp_called_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_49 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_48 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_48 == NULL ))
    {
        tmp_args_element_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_48 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_49 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_49 == NULL ))
    {
        tmp_args_element_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_49 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 437;
    {
        PyObject *call_args[] = { tmp_args_element_name_48, tmp_args_element_name_49 };
        tmp_args_element_name_47 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_49, call_args );
    }

    if ( tmp_args_element_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 437;
    {
        PyObject *call_args[] = { tmp_args_element_name_47 };
        tmp_dict_key_116 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_48, call_args );
    }

    Py_DECREF( tmp_args_element_name_47 );
    if ( tmp_dict_key_116 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_115, tmp_dict_key_116, tmp_dict_value_116 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );
        Py_DECREF( tmp_dict_key_116 );

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_116 );
    tmp_dict_key_115 = const_str_plain_initf2pywraphook;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_115, tmp_dict_value_115 );
    Py_DECREF( tmp_dict_value_115 );
    tmp_dict_value_117 = _PyDict_NewPresized( 1 );
    tmp_dict_value_118 = LIST_COPY( const_list_str_plain_F_WRAPPEDFUNC_str_plain_F_FUNC_list );
    tmp_called_name_50 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_50 == NULL ))
    {
        tmp_called_name_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_50 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 449;
        goto frame_exception_exit_1;
    }

    tmp_called_name_51 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_51 == NULL ))
    {
        tmp_called_name_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_51 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 449;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_51 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_51 == NULL ))
    {
        tmp_args_element_name_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_51 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 449;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_52 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_52 == NULL ))
    {
        tmp_args_element_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_52 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 449;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 449;
    {
        PyObject *call_args[] = { tmp_args_element_name_51, tmp_args_element_name_52 };
        tmp_args_element_name_50 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_51, call_args );
    }

    if ( tmp_args_element_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );

        exception_lineno = 449;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 449;
    {
        PyObject *call_args[] = { tmp_args_element_name_50 };
        tmp_dict_key_118 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_50, call_args );
    }

    Py_DECREF( tmp_args_element_name_50 );
    if ( tmp_dict_key_118 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );

        exception_lineno = 449;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_117, tmp_dict_key_118, tmp_dict_value_118 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );
        Py_DECREF( tmp_dict_key_118 );

        exception_lineno = 449;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_value_118 );
    Py_DECREF( tmp_dict_key_118 );
    tmp_dict_key_117 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_117, tmp_dict_value_117 );
    Py_DECREF( tmp_dict_value_117 );
    tmp_dict_value_119 = PyList_New( 7 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_120 = LIST_COPY( const_list_str_digest_2e018d041c7e280e775f591990904aec_list );
    tmp_dict_key_120 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_120 == NULL ))
    {
        tmp_dict_key_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_120 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        Py_DECREF( tmp_dict_value_120 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 451;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_4, tmp_dict_key_120, tmp_dict_value_120 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        Py_DECREF( tmp_dict_value_120 );

        exception_lineno = 451;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_value_120 );
    PyList_SET_ITEM( tmp_dict_value_119, 0, tmp_list_element_4 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_121 = const_str_digest_34ea19e92b020553baa1048d998366f6;
    tmp_dict_key_121 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_121 == NULL ))
    {
        tmp_dict_key_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_121 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasexternals" );
        exception_tb = NULL;

        exception_lineno = 453;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_4, tmp_dict_key_121, tmp_dict_value_121 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );

        exception_lineno = 453;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_119, 1, tmp_list_element_4 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_122 = const_str_digest_23f56deffe35f9f8fbfb91faf4e32791;
    tmp_dict_key_122 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_122 == NULL ))
    {
        tmp_dict_key_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_122 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isthreadsafe" );
        exception_tb = NULL;

        exception_lineno = 457;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_4, tmp_dict_key_122, tmp_dict_value_122 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );

        exception_lineno = 457;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_119, 2, tmp_list_element_4 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_123 = const_str_digest_67673829ecc7f22967de3f42af9c6968;
    tmp_called_name_52 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_52 == NULL ))
    {
        tmp_called_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_52 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 458;
        goto frame_exception_exit_1;
    }

    tmp_called_name_53 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_53 == NULL ))
    {
        tmp_called_name_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_53 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 458;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_54 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_args_element_name_54 == NULL ))
    {
        tmp_args_element_name_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_args_element_name_54 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hascallstatement" );
        exception_tb = NULL;

        exception_lineno = 458;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_55 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_55 == NULL ))
    {
        tmp_args_element_name_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_55 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 458;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 458;
    {
        PyObject *call_args[] = { tmp_args_element_name_54, tmp_args_element_name_55 };
        tmp_args_element_name_53 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_53, call_args );
    }

    if ( tmp_args_element_name_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );

        exception_lineno = 458;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 458;
    {
        PyObject *call_args[] = { tmp_args_element_name_53 };
        tmp_dict_key_123 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_52, call_args );
    }

    Py_DECREF( tmp_args_element_name_53 );
    if ( tmp_dict_key_123 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );

        exception_lineno = 458;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_4, tmp_dict_key_123, tmp_dict_value_123 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        Py_DECREF( tmp_dict_key_123 );

        exception_lineno = 458;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_123 );
    PyList_SET_ITEM( tmp_dict_value_119, 3, tmp_list_element_4 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_124 = const_str_digest_8b378a16bc207977d6266489de437e89;
    tmp_dict_key_124 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_dict_key_124 == NULL ))
    {
        tmp_dict_key_124 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_dict_key_124 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hascallstatement" );
        exception_tb = NULL;

        exception_lineno = 460;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_4, tmp_dict_key_124, tmp_dict_value_124 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );

        exception_lineno = 460;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_119, 4, tmp_list_element_4 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_125 = const_str_digest_12cebb8a70d033198d60b48030c9e3fe;
    tmp_dict_key_125 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_125 == NULL ))
    {
        tmp_dict_key_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_125 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isthreadsafe" );
        exception_tb = NULL;

        exception_lineno = 462;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_4, tmp_dict_key_125, tmp_dict_value_125 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );

        exception_lineno = 462;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_119, 5, tmp_list_element_4 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_126 = const_str_digest_ff06ccb2c23c449388cb0f214acc87f7;
    tmp_dict_key_126 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_126 == NULL ))
    {
        tmp_dict_key_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_126 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasexternals" );
        exception_tb = NULL;

        exception_lineno = 463;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_4, tmp_dict_key_126, tmp_dict_value_126 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );

        exception_lineno = 463;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_119, 6, tmp_list_element_4 );
    tmp_dict_key_119 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_119, tmp_dict_value_119 );
    Py_DECREF( tmp_dict_value_119 );
    tmp_dict_value_127 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );

    if (unlikely( tmp_dict_value_127 == NULL ))
    {
        tmp_dict_value_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );
    }

    if ( tmp_dict_value_127 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isfunction_wrap" );
        exception_tb = NULL;

        exception_lineno = 465;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_127 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_127, tmp_dict_value_127 );
    PyList_SET_ITEM( tmp_assign_source_87, 4, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 7 );
    tmp_dict_value_128 = const_str_plain_void;
    tmp_dict_key_128 = const_str_plain_functype;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_128, tmp_dict_value_128 );
    tmp_dict_value_129 = _PyDict_NewPresized( 2 );
    tmp_dict_value_130 = const_str_digest_a83c90fa5fd3daaef5d52b46677ba4ec;
    tmp_called_name_54 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_54 == NULL ))
    {
        tmp_called_name_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_54 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }

    tmp_called_name_55 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_55 == NULL ))
    {
        tmp_called_name_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_55 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_57 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_57 == NULL ))
    {
        tmp_args_element_name_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_57 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_58 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_58 == NULL ))
    {
        tmp_args_element_name_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_58 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 468;
    {
        PyObject *call_args[] = { tmp_args_element_name_57, tmp_args_element_name_58 };
        tmp_args_element_name_56 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_55, call_args );
    }

    if ( tmp_args_element_name_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 468;
    {
        PyObject *call_args[] = { tmp_args_element_name_56 };
        tmp_dict_key_130 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_54, call_args );
    }

    Py_DECREF( tmp_args_element_name_56 );
    if ( tmp_dict_key_130 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_129, tmp_dict_key_130, tmp_dict_value_130 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );
        Py_DECREF( tmp_dict_key_130 );

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_130 );
    tmp_dict_value_131 = const_str_empty;
    tmp_dict_key_131 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_131 == NULL ))
    {
        tmp_dict_key_131 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_131 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 469;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_129, tmp_dict_key_131, tmp_dict_value_131 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_129 = const_str_plain_declfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_129, tmp_dict_value_129 );
    Py_DECREF( tmp_dict_value_129 );
    tmp_dict_value_132 = _PyDict_NewPresized( 2 );
    tmp_dict_value_133 = const_str_digest_a871c415f4ae2645c21857940d3b44f9;
    tmp_called_name_56 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_56 == NULL ))
    {
        tmp_called_name_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_56 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 472;
        goto frame_exception_exit_1;
    }

    tmp_called_name_57 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_57 == NULL ))
    {
        tmp_called_name_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_57 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 472;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_60 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_60 == NULL ))
    {
        tmp_args_element_name_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_60 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 472;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_61 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_61 == NULL ))
    {
        tmp_args_element_name_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_61 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 472;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 472;
    {
        PyObject *call_args[] = { tmp_args_element_name_60, tmp_args_element_name_61 };
        tmp_args_element_name_59 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_57, call_args );
    }

    if ( tmp_args_element_name_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );

        exception_lineno = 472;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 472;
    {
        PyObject *call_args[] = { tmp_args_element_name_59 };
        tmp_dict_key_133 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_56, call_args );
    }

    Py_DECREF( tmp_args_element_name_59 );
    if ( tmp_dict_key_133 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );

        exception_lineno = 472;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_132, tmp_dict_key_133, tmp_dict_value_133 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );
        Py_DECREF( tmp_dict_key_133 );

        exception_lineno = 472;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_133 );
    tmp_dict_value_134 = const_str_digest_d63e19eac20174e68ed46e663e86a06f;
    tmp_dict_key_134 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_134 == NULL ))
    {
        tmp_dict_key_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_134 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 473;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_132, tmp_dict_key_134, tmp_dict_value_134 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );

        exception_lineno = 472;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_132 = const_str_plain_routine_def;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_132, tmp_dict_value_132 );
    Py_DECREF( tmp_dict_value_132 );
    tmp_dict_value_135 = _PyDict_NewPresized( 1 );
    tmp_dict_value_136 = const_str_digest_a09721f72a5c34dacc0ffc15233c4471;
    tmp_called_name_58 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_58 == NULL ))
    {
        tmp_called_name_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_58 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }

    tmp_called_name_59 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_59 == NULL ))
    {
        tmp_called_name_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_59 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_63 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_63 == NULL ))
    {
        tmp_args_element_name_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_63 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_64 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_64 == NULL ))
    {
        tmp_args_element_name_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_64 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 475;
    {
        PyObject *call_args[] = { tmp_args_element_name_63, tmp_args_element_name_64 };
        tmp_args_element_name_62 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_59, call_args );
    }

    if ( tmp_args_element_name_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 475;
    {
        PyObject *call_args[] = { tmp_args_element_name_62 };
        tmp_dict_key_136 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_58, call_args );
    }

    Py_DECREF( tmp_args_element_name_62 );
    if ( tmp_dict_key_136 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_135, tmp_dict_key_136, tmp_dict_value_136 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );
        Py_DECREF( tmp_dict_key_136 );

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_136 );
    tmp_dict_key_135 = const_str_plain_initf2pywraphook;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_135, tmp_dict_value_135 );
    Py_DECREF( tmp_dict_value_135 );
    tmp_dict_value_137 = _PyDict_NewPresized( 1 );
    tmp_dict_value_138 = LIST_COPY( const_list_str_plain_F_WRAPPEDFUNC_str_plain_F_FUNC_list );
    tmp_called_name_60 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_60 == NULL ))
    {
        tmp_called_name_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_60 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 487;
        goto frame_exception_exit_1;
    }

    tmp_called_name_61 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_61 == NULL ))
    {
        tmp_called_name_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_61 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 487;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_66 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_66 == NULL ))
    {
        tmp_args_element_name_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_66 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 487;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_67 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_67 == NULL ))
    {
        tmp_args_element_name_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_67 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 487;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 487;
    {
        PyObject *call_args[] = { tmp_args_element_name_66, tmp_args_element_name_67 };
        tmp_args_element_name_65 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_61, call_args );
    }

    if ( tmp_args_element_name_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );

        exception_lineno = 487;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 487;
    {
        PyObject *call_args[] = { tmp_args_element_name_65 };
        tmp_dict_key_138 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_60, call_args );
    }

    Py_DECREF( tmp_args_element_name_65 );
    if ( tmp_dict_key_138 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );

        exception_lineno = 487;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_137, tmp_dict_key_138, tmp_dict_value_138 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );
        Py_DECREF( tmp_dict_key_138 );

        exception_lineno = 487;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_value_138 );
    Py_DECREF( tmp_dict_key_138 );
    tmp_dict_key_137 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_137, tmp_dict_value_137 );
    Py_DECREF( tmp_dict_value_137 );
    tmp_dict_value_139 = PyList_New( 7 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_140 = LIST_COPY( const_list_str_digest_2e018d041c7e280e775f591990904aec_list );
    tmp_dict_key_140 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_140 == NULL ))
    {
        tmp_dict_key_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_140 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        Py_DECREF( tmp_dict_value_140 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 489;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_5, tmp_dict_key_140, tmp_dict_value_140 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        Py_DECREF( tmp_dict_value_140 );

        exception_lineno = 489;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_value_140 );
    PyList_SET_ITEM( tmp_dict_value_139, 0, tmp_list_element_5 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_141 = const_str_digest_34ea19e92b020553baa1048d998366f6;
    tmp_dict_key_141 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_141 == NULL ))
    {
        tmp_dict_key_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_141 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasexternals" );
        exception_tb = NULL;

        exception_lineno = 491;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_5, tmp_dict_key_141, tmp_dict_value_141 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );

        exception_lineno = 491;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_139, 1, tmp_list_element_5 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_142 = const_str_digest_23f56deffe35f9f8fbfb91faf4e32791;
    tmp_dict_key_142 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_142 == NULL ))
    {
        tmp_dict_key_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_142 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isthreadsafe" );
        exception_tb = NULL;

        exception_lineno = 495;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_5, tmp_dict_key_142, tmp_dict_value_142 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );

        exception_lineno = 495;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_139, 2, tmp_list_element_5 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_143 = const_str_digest_67673829ecc7f22967de3f42af9c6968;
    tmp_called_name_62 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_62 == NULL ))
    {
        tmp_called_name_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_62 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 496;
        goto frame_exception_exit_1;
    }

    tmp_called_name_63 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_63 == NULL ))
    {
        tmp_called_name_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_63 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 496;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_69 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_args_element_name_69 == NULL ))
    {
        tmp_args_element_name_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_args_element_name_69 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hascallstatement" );
        exception_tb = NULL;

        exception_lineno = 496;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_70 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_70 == NULL ))
    {
        tmp_args_element_name_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_70 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 496;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 496;
    {
        PyObject *call_args[] = { tmp_args_element_name_69, tmp_args_element_name_70 };
        tmp_args_element_name_68 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_63, call_args );
    }

    if ( tmp_args_element_name_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );

        exception_lineno = 496;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 496;
    {
        PyObject *call_args[] = { tmp_args_element_name_68 };
        tmp_dict_key_143 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_62, call_args );
    }

    Py_DECREF( tmp_args_element_name_68 );
    if ( tmp_dict_key_143 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );

        exception_lineno = 496;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_5, tmp_dict_key_143, tmp_dict_value_143 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        Py_DECREF( tmp_dict_key_143 );

        exception_lineno = 496;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_143 );
    PyList_SET_ITEM( tmp_dict_value_139, 3, tmp_list_element_5 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_144 = const_str_digest_8b378a16bc207977d6266489de437e89;
    tmp_dict_key_144 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_dict_key_144 == NULL ))
    {
        tmp_dict_key_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_dict_key_144 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hascallstatement" );
        exception_tb = NULL;

        exception_lineno = 498;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_5, tmp_dict_key_144, tmp_dict_value_144 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );

        exception_lineno = 498;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_139, 4, tmp_list_element_5 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_145 = const_str_digest_12cebb8a70d033198d60b48030c9e3fe;
    tmp_dict_key_145 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_145 == NULL ))
    {
        tmp_dict_key_145 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_145 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isthreadsafe" );
        exception_tb = NULL;

        exception_lineno = 500;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_5, tmp_dict_key_145, tmp_dict_value_145 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );

        exception_lineno = 500;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_139, 5, tmp_list_element_5 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_146 = const_str_digest_ff06ccb2c23c449388cb0f214acc87f7;
    tmp_dict_key_146 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_146 == NULL ))
    {
        tmp_dict_key_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_146 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasexternals" );
        exception_tb = NULL;

        exception_lineno = 501;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_5, tmp_dict_key_146, tmp_dict_value_146 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );

        exception_lineno = 501;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_139, 6, tmp_list_element_5 );
    tmp_dict_key_139 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_139, tmp_dict_value_139 );
    Py_DECREF( tmp_dict_value_139 );
    tmp_dict_value_147 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_issubroutine_wrap );

    if (unlikely( tmp_dict_value_147 == NULL ))
    {
        tmp_dict_value_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_issubroutine_wrap );
    }

    if ( tmp_dict_value_147 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "issubroutine_wrap" );
        exception_tb = NULL;

        exception_lineno = 503;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_147 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_147, tmp_dict_value_147 );
    PyList_SET_ITEM( tmp_assign_source_87, 5, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 6 );
    tmp_dict_value_148 = const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70;
    tmp_dict_key_148 = const_str_plain_functype;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_148, tmp_dict_value_148 );
    tmp_dict_value_149 = _PyDict_NewPresized( 1 );
    tmp_dict_value_150 = const_str_digest_79cf6d3fbc1ff7602b4753d744fc0e64;
    tmp_called_name_64 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_64 == NULL ))
    {
        tmp_called_name_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_64 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_149 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 506;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_71 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_args_element_name_71 == NULL ))
    {
        tmp_args_element_name_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_args_element_name_71 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_149 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 506;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 506;
    {
        PyObject *call_args[] = { tmp_args_element_name_71 };
        tmp_dict_key_150 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_64, call_args );
    }

    if ( tmp_dict_key_150 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_149 );

        exception_lineno = 506;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_149, tmp_dict_key_150, tmp_dict_value_150 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_149 );
        Py_DECREF( tmp_dict_key_150 );

        exception_lineno = 506;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_150 );
    tmp_dict_key_149 = const_str_plain_docreturn;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_149, tmp_dict_value_149 );
    Py_DECREF( tmp_dict_value_149 );
    tmp_dict_value_151 = const_str_digest_807a8edf883cc73f1196a6287772f84f;
    tmp_dict_key_151 = const_str_plain_docstrout;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_151, tmp_dict_value_151 );
    tmp_dict_value_152 = PyList_New( 2 );
    tmp_list_element_6 = const_str_digest_49f4bfda85db57bf51690dba3a8d81dd;
    Py_INCREF( tmp_list_element_6 );
    PyList_SET_ITEM( tmp_dict_value_152, 0, tmp_list_element_6 );
    tmp_list_element_6 = _PyDict_NewPresized( 1 );
    tmp_dict_value_153 = const_str_digest_eddadf0dabfc5042f9a31bb99020252b;
    tmp_dict_key_153 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasresultnote );

    if (unlikely( tmp_dict_key_153 == NULL ))
    {
        tmp_dict_key_153 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasresultnote );
    }

    if ( tmp_dict_key_153 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_152 );
        Py_DECREF( tmp_list_element_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasresultnote" );
        exception_tb = NULL;

        exception_lineno = 509;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_6, tmp_dict_key_153, tmp_dict_value_153 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_152 );
        Py_DECREF( tmp_list_element_6 );

        exception_lineno = 509;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_152, 1, tmp_list_element_6 );
    tmp_dict_key_152 = const_str_plain_latexdocstrout;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_152, tmp_dict_value_152 );
    Py_DECREF( tmp_dict_value_152 );
    tmp_dict_value_154 = PyList_New( 2 );
    tmp_list_element_7 = _PyDict_NewPresized( 1 );
    tmp_dict_value_155 = const_str_digest_b4c19ac5d0264d44f3b358978705a878;
    tmp_called_name_65 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_65 == NULL ))
    {
        tmp_called_name_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_65 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 510;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_72 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_args_element_name_72 == NULL ))
    {
        tmp_args_element_name_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_args_element_name_72 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 510;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_73 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringfunction );

    if (unlikely( tmp_args_element_name_73 == NULL ))
    {
        tmp_args_element_name_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstringfunction );
    }

    if ( tmp_args_element_name_73 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstringfunction" );
        exception_tb = NULL;

        exception_lineno = 510;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 510;
    {
        PyObject *call_args[] = { tmp_args_element_name_72, tmp_args_element_name_73 };
        tmp_dict_key_155 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_65, call_args );
    }

    if ( tmp_dict_key_155 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );

        exception_lineno = 510;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_7, tmp_dict_key_155, tmp_dict_value_155 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        Py_DECREF( tmp_dict_key_155 );

        exception_lineno = 510;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_155 );
    PyList_SET_ITEM( tmp_dict_value_154, 0, tmp_list_element_7 );
    tmp_list_element_7 = _PyDict_NewPresized( 1 );
    tmp_dict_value_156 = const_str_digest_d0192ea46e116016c3c7cbd447f90050;
    tmp_called_name_66 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_66 == NULL ))
    {
        tmp_called_name_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_66 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 517;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_74 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_args_element_name_74 == NULL ))
    {
        tmp_args_element_name_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_args_element_name_74 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 517;
        goto frame_exception_exit_1;
    }

    tmp_called_name_67 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_67 == NULL ))
    {
        tmp_called_name_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_67 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 517;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_76 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringfunction );

    if (unlikely( tmp_args_element_name_76 == NULL ))
    {
        tmp_args_element_name_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstringfunction );
    }

    if ( tmp_args_element_name_76 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstringfunction" );
        exception_tb = NULL;

        exception_lineno = 517;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 517;
    {
        PyObject *call_args[] = { tmp_args_element_name_76 };
        tmp_args_element_name_75 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_67, call_args );
    }

    if ( tmp_args_element_name_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );

        exception_lineno = 517;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 517;
    {
        PyObject *call_args[] = { tmp_args_element_name_74, tmp_args_element_name_75 };
        tmp_dict_key_156 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_66, call_args );
    }

    Py_DECREF( tmp_args_element_name_75 );
    if ( tmp_dict_key_156 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );

        exception_lineno = 517;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_7, tmp_dict_key_156, tmp_dict_value_156 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        Py_DECREF( tmp_dict_key_156 );

        exception_lineno = 517;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_156 );
    PyList_SET_ITEM( tmp_dict_value_154, 1, tmp_list_element_7 );
    tmp_dict_key_154 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_154, tmp_dict_value_154 );
    Py_DECREF( tmp_dict_value_154 );
    tmp_called_name_68 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_68 == NULL ))
    {
        tmp_called_name_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_68 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 521;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_77 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction );

    if (unlikely( tmp_args_element_name_77 == NULL ))
    {
        tmp_args_element_name_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isfunction );
    }

    if ( tmp_args_element_name_77 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isfunction" );
        exception_tb = NULL;

        exception_lineno = 521;
        goto frame_exception_exit_1;
    }

    tmp_called_name_69 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_69 == NULL ))
    {
        tmp_called_name_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_69 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 521;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_79 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );

    if (unlikely( tmp_args_element_name_79 == NULL ))
    {
        tmp_args_element_name_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );
    }

    if ( tmp_args_element_name_79 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isfunction_wrap" );
        exception_tb = NULL;

        exception_lineno = 521;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 521;
    {
        PyObject *call_args[] = { tmp_args_element_name_79 };
        tmp_args_element_name_78 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_69, call_args );
    }

    if ( tmp_args_element_name_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );

        exception_lineno = 521;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 521;
    {
        PyObject *call_args[] = { tmp_args_element_name_77, tmp_args_element_name_78 };
        tmp_dict_value_157 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_68, call_args );
    }

    Py_DECREF( tmp_args_element_name_78 );
    if ( tmp_dict_value_157 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );

        exception_lineno = 521;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_157 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_157, tmp_dict_value_157 );
    Py_DECREF( tmp_dict_value_157 );
    PyList_SET_ITEM( tmp_assign_source_87, 6, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 9 );
    tmp_dict_value_158 = _PyDict_NewPresized( 3 );
    tmp_dict_value_159 = const_str_digest_1fd49f133ca390a888f362a49cd559e3;
    tmp_called_name_70 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_70 == NULL ))
    {
        tmp_called_name_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_70 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }

    tmp_called_name_71 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_71 == NULL ))
    {
        tmp_called_name_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_71 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }

    tmp_called_name_72 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_72 == NULL ))
    {
        tmp_called_name_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_72 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_82 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_82 == NULL ))
    {
        tmp_args_element_name_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_82 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_83 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_83 == NULL ))
    {
        tmp_args_element_name_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_83 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 523;
    {
        PyObject *call_args[] = { tmp_args_element_name_82, tmp_args_element_name_83 };
        tmp_args_element_name_81 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_72, call_args );
    }

    if ( tmp_args_element_name_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 523;
    {
        PyObject *call_args[] = { tmp_args_element_name_81 };
        tmp_args_element_name_80 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_71, call_args );
    }

    Py_DECREF( tmp_args_element_name_81 );
    if ( tmp_args_element_name_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }
    tmp_called_name_73 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_73 == NULL ))
    {
        tmp_called_name_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_73 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_args_element_name_80 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_85 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_85 == NULL ))
    {
        tmp_args_element_name_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_85 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_args_element_name_80 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 523;
    {
        PyObject *call_args[] = { tmp_args_element_name_85 };
        tmp_args_element_name_84 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_73, call_args );
    }

    if ( tmp_args_element_name_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_args_element_name_80 );

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 523;
    {
        PyObject *call_args[] = { tmp_args_element_name_80, tmp_args_element_name_84 };
        tmp_dict_key_159 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_70, call_args );
    }

    Py_DECREF( tmp_args_element_name_80 );
    Py_DECREF( tmp_args_element_name_84 );
    if ( tmp_dict_key_159 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_158, tmp_dict_key_159, tmp_dict_value_159 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_dict_key_159 );

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_159 );
    tmp_dict_value_160 = const_str_digest_b1685647f0346194c5abc8530f497944;
    tmp_called_name_74 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_74 == NULL ))
    {
        tmp_called_name_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_74 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 524;
        goto frame_exception_exit_1;
    }

    tmp_called_name_75 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_75 == NULL ))
    {
        tmp_called_name_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_75 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 524;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_87 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_87 == NULL ))
    {
        tmp_args_element_name_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_87 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 524;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 524;
    {
        PyObject *call_args[] = { tmp_args_element_name_87 };
        tmp_args_element_name_86 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_75, call_args );
    }

    if ( tmp_args_element_name_86 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );

        exception_lineno = 524;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_88 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_88 == NULL ))
    {
        tmp_args_element_name_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_88 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_args_element_name_86 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 524;
        goto frame_exception_exit_1;
    }

    tmp_called_name_76 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_76 == NULL ))
    {
        tmp_called_name_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_76 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_args_element_name_86 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 524;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_90 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_90 == NULL ))
    {
        tmp_args_element_name_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_90 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_args_element_name_86 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 524;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 524;
    {
        PyObject *call_args[] = { tmp_args_element_name_90 };
        tmp_args_element_name_89 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_76, call_args );
    }

    if ( tmp_args_element_name_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_args_element_name_86 );

        exception_lineno = 524;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 524;
    {
        PyObject *call_args[] = { tmp_args_element_name_86, tmp_args_element_name_88, tmp_args_element_name_89 };
        tmp_dict_key_160 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_74, call_args );
    }

    Py_DECREF( tmp_args_element_name_86 );
    Py_DECREF( tmp_args_element_name_89 );
    if ( tmp_dict_key_160 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );

        exception_lineno = 524;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_158, tmp_dict_key_160, tmp_dict_value_160 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_dict_key_160 );

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_160 );
    tmp_dict_value_161 = const_str_empty;
    tmp_dict_key_161 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_161 == NULL ))
    {
        tmp_dict_key_161 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_161 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 525;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_158, tmp_dict_key_161, tmp_dict_value_161 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_158 = const_str_plain_declfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_158, tmp_dict_value_158 );
    Py_DECREF( tmp_dict_value_158 );
    tmp_dict_value_162 = _PyDict_NewPresized( 3 );
    tmp_dict_value_163 = const_str_digest_f079d8c7e0ce1658a2cdcdbc6577f10a;
    tmp_called_name_77 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_77 == NULL ))
    {
        tmp_called_name_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_77 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }

    tmp_called_name_78 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_78 == NULL ))
    {
        tmp_called_name_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_78 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }

    tmp_called_name_79 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_79 == NULL ))
    {
        tmp_called_name_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_79 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_93 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_93 == NULL ))
    {
        tmp_args_element_name_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_93 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_94 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_94 == NULL ))
    {
        tmp_args_element_name_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_94 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 527;
    {
        PyObject *call_args[] = { tmp_args_element_name_93, tmp_args_element_name_94 };
        tmp_args_element_name_92 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_79, call_args );
    }

    if ( tmp_args_element_name_92 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 527;
    {
        PyObject *call_args[] = { tmp_args_element_name_92 };
        tmp_args_element_name_91 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_78, call_args );
    }

    Py_DECREF( tmp_args_element_name_92 );
    if ( tmp_args_element_name_91 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }
    tmp_called_name_80 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_80 == NULL ))
    {
        tmp_called_name_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_80 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_args_element_name_91 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_96 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_96 == NULL ))
    {
        tmp_args_element_name_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_96 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_args_element_name_91 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 527;
    {
        PyObject *call_args[] = { tmp_args_element_name_96 };
        tmp_args_element_name_95 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_80, call_args );
    }

    if ( tmp_args_element_name_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_args_element_name_91 );

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 527;
    {
        PyObject *call_args[] = { tmp_args_element_name_91, tmp_args_element_name_95 };
        tmp_dict_key_163 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_77, call_args );
    }

    Py_DECREF( tmp_args_element_name_91 );
    Py_DECREF( tmp_args_element_name_95 );
    if ( tmp_dict_key_163 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_162, tmp_dict_key_163, tmp_dict_value_163 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_dict_key_163 );

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_163 );
    tmp_dict_value_164 = const_str_digest_3901229eb47cd28cbfe43558ace8a7fe;
    tmp_called_name_81 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_81 == NULL ))
    {
        tmp_called_name_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_81 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 528;
        goto frame_exception_exit_1;
    }

    tmp_called_name_82 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_82 == NULL ))
    {
        tmp_called_name_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_82 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 528;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_98 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_98 == NULL ))
    {
        tmp_args_element_name_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_98 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 528;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 528;
    {
        PyObject *call_args[] = { tmp_args_element_name_98 };
        tmp_args_element_name_97 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_82, call_args );
    }

    if ( tmp_args_element_name_97 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );

        exception_lineno = 528;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_99 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_99 == NULL ))
    {
        tmp_args_element_name_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_99 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_args_element_name_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 528;
        goto frame_exception_exit_1;
    }

    tmp_called_name_83 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_83 == NULL ))
    {
        tmp_called_name_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_83 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_args_element_name_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 528;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_101 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_101 == NULL ))
    {
        tmp_args_element_name_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_101 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_args_element_name_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 528;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 528;
    {
        PyObject *call_args[] = { tmp_args_element_name_101 };
        tmp_args_element_name_100 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_83, call_args );
    }

    if ( tmp_args_element_name_100 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_args_element_name_97 );

        exception_lineno = 528;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 528;
    {
        PyObject *call_args[] = { tmp_args_element_name_97, tmp_args_element_name_99, tmp_args_element_name_100 };
        tmp_dict_key_164 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_81, call_args );
    }

    Py_DECREF( tmp_args_element_name_97 );
    Py_DECREF( tmp_args_element_name_100 );
    if ( tmp_dict_key_164 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );

        exception_lineno = 528;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_162, tmp_dict_key_164, tmp_dict_value_164 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_dict_key_164 );

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_164 );
    tmp_dict_value_165 = const_str_digest_d63e19eac20174e68ed46e663e86a06f;
    tmp_dict_key_165 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_165 == NULL ))
    {
        tmp_dict_key_165 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_165 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 529;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_162, tmp_dict_key_165, tmp_dict_value_165 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_162 = const_str_plain_routine_def;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_162, tmp_dict_value_162 );
    Py_DECREF( tmp_dict_value_162 );
    tmp_dict_value_166 = PyList_New( 2 );
    tmp_list_element_8 = _PyDict_NewPresized( 2 );
    tmp_dict_value_167 = const_str_digest_87c2ebbc3b21746550e363bead591b36;
    tmp_dict_key_167 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction_warn );

    if (unlikely( tmp_dict_key_167 == NULL ))
    {
        tmp_dict_key_167 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction_warn );
    }

    if ( tmp_dict_key_167 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexfunction_warn" );
        exception_tb = NULL;

        exception_lineno = 531;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_8, tmp_dict_key_167, tmp_dict_value_167 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );

        exception_lineno = 531;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_168 = const_str_digest_edac874f144411fa00eea5af51810d35;
    tmp_called_name_84 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_84 == NULL ))
    {
        tmp_called_name_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_84 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 532;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_102 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_args_element_name_102 == NULL ))
    {
        tmp_args_element_name_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_args_element_name_102 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexfunction" );
        exception_tb = NULL;

        exception_lineno = 532;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 532;
    {
        PyObject *call_args[] = { tmp_args_element_name_102 };
        tmp_dict_key_168 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_84, call_args );
    }

    if ( tmp_dict_key_168 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );

        exception_lineno = 532;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_8, tmp_dict_key_168, tmp_dict_value_168 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );
        Py_DECREF( tmp_dict_key_168 );

        exception_lineno = 531;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_168 );
    PyList_SET_ITEM( tmp_dict_value_166, 0, tmp_list_element_8 );
    tmp_list_element_8 = _PyDict_NewPresized( 1 );
    tmp_dict_value_169 = const_str_digest_29e74fe1bb3a1c37df8d2af52c1fbbd4;
    tmp_dict_key_169 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_dict_key_169 == NULL ))
    {
        tmp_dict_key_169 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_dict_key_169 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexfunction" );
        exception_tb = NULL;

        exception_lineno = 533;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_8, tmp_dict_key_169, tmp_dict_value_169 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );

        exception_lineno = 533;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_166, 1, tmp_list_element_8 );
    tmp_dict_key_166 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_166, tmp_dict_value_166 );
    Py_DECREF( tmp_dict_value_166 );
    tmp_dict_value_170 = PyList_New( 8 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_171 = const_str_digest_34ea19e92b020553baa1048d998366f6;
    tmp_dict_key_171 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_171 == NULL ))
    {
        tmp_dict_key_171 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_171 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasexternals" );
        exception_tb = NULL;

        exception_lineno = 537;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_9, tmp_dict_key_171, tmp_dict_value_171 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        exception_lineno = 537;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_170, 0, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_172 = const_str_digest_23f56deffe35f9f8fbfb91faf4e32791;
    tmp_dict_key_172 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_172 == NULL ))
    {
        tmp_dict_key_172 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_172 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isthreadsafe" );
        exception_tb = NULL;

        exception_lineno = 541;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_9, tmp_dict_key_172, tmp_dict_value_172 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        exception_lineno = 541;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_170, 1, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_173 = const_str_digest_93455bf8bf6723d3683f4767d1730bb1;
    tmp_dict_key_173 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_dict_key_173 == NULL ))
    {
        tmp_dict_key_173 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_dict_key_173 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hascallstatement" );
        exception_tb = NULL;

        exception_lineno = 542;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_9, tmp_dict_key_173, tmp_dict_value_173 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        exception_lineno = 542;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_170, 2, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_174 = const_str_digest_9cfd9f010c87212166c3a6b47669c9ec;
    tmp_called_name_85 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_85 == NULL ))
    {
        tmp_called_name_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_85 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 545;
        goto frame_exception_exit_1;
    }

    tmp_called_name_86 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_86 == NULL ))
    {
        tmp_called_name_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_86 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 545;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_104 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_args_element_name_104 == NULL ))
    {
        tmp_args_element_name_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_args_element_name_104 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hascallstatement" );
        exception_tb = NULL;

        exception_lineno = 545;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_105 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_105 == NULL ))
    {
        tmp_args_element_name_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_105 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 545;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 545;
    {
        PyObject *call_args[] = { tmp_args_element_name_104, tmp_args_element_name_105 };
        tmp_args_element_name_103 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_86, call_args );
    }

    if ( tmp_args_element_name_103 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        exception_lineno = 545;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 545;
    {
        PyObject *call_args[] = { tmp_args_element_name_103 };
        tmp_dict_key_174 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_85, call_args );
    }

    Py_DECREF( tmp_args_element_name_103 );
    if ( tmp_dict_key_174 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        exception_lineno = 545;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_9, tmp_dict_key_174, tmp_dict_value_174 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        Py_DECREF( tmp_dict_key_174 );

        exception_lineno = 545;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_174 );
    PyList_SET_ITEM( tmp_dict_value_170, 3, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_175 = const_str_digest_12cebb8a70d033198d60b48030c9e3fe;
    tmp_dict_key_175 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_175 == NULL ))
    {
        tmp_dict_key_175 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_175 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isthreadsafe" );
        exception_tb = NULL;

        exception_lineno = 547;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_9, tmp_dict_key_175, tmp_dict_value_175 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        exception_lineno = 547;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_170, 4, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_176 = const_str_digest_ff06ccb2c23c449388cb0f214acc87f7;
    tmp_dict_key_176 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_176 == NULL ))
    {
        tmp_dict_key_176 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_176 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasexternals" );
        exception_tb = NULL;

        exception_lineno = 548;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_9, tmp_dict_key_176, tmp_dict_value_176 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        exception_lineno = 548;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_170, 5, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_177 = const_str_digest_2999263330b02d2a6d44588a7326f194;
    tmp_called_name_87 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_87 == NULL ))
    {
        tmp_called_name_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_87 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 549;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_106 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_args_element_name_106 == NULL ))
    {
        tmp_args_element_name_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_args_element_name_106 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 549;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_107 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_args_element_name_107 == NULL ))
    {
        tmp_args_element_name_107 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_args_element_name_107 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexfunction" );
        exception_tb = NULL;

        exception_lineno = 549;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 549;
    {
        PyObject *call_args[] = { tmp_args_element_name_106, tmp_args_element_name_107 };
        tmp_dict_key_177 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_87, call_args );
    }

    if ( tmp_dict_key_177 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        exception_lineno = 549;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_9, tmp_dict_key_177, tmp_dict_value_177 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        Py_DECREF( tmp_dict_key_177 );

        exception_lineno = 549;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_177 );
    PyList_SET_ITEM( tmp_dict_value_170, 6, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_178 = const_str_digest_a75b5e8e76ffa7e79c5a93ac611a3b01;
    tmp_called_name_88 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_88 == NULL ))
    {
        tmp_called_name_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_88 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 551;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_108 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_args_element_name_108 == NULL ))
    {
        tmp_args_element_name_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_args_element_name_108 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 551;
        goto frame_exception_exit_1;
    }

    tmp_called_name_89 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_89 == NULL ))
    {
        tmp_called_name_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_89 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 551;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_110 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_args_element_name_110 == NULL ))
    {
        tmp_args_element_name_110 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_args_element_name_110 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexfunction" );
        exception_tb = NULL;

        exception_lineno = 551;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 551;
    {
        PyObject *call_args[] = { tmp_args_element_name_110 };
        tmp_args_element_name_109 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_89, call_args );
    }

    if ( tmp_args_element_name_109 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        exception_lineno = 551;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 551;
    {
        PyObject *call_args[] = { tmp_args_element_name_108, tmp_args_element_name_109 };
        tmp_dict_key_178 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_88, call_args );
    }

    Py_DECREF( tmp_args_element_name_109 );
    if ( tmp_dict_key_178 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        exception_lineno = 551;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_9, tmp_dict_key_178, tmp_dict_value_178 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        Py_DECREF( tmp_dict_key_178 );

        exception_lineno = 551;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_178 );
    PyList_SET_ITEM( tmp_dict_value_170, 7, tmp_list_element_9 );
    tmp_dict_key_170 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_170, tmp_dict_value_170 );
    Py_DECREF( tmp_dict_value_170 );
    tmp_dict_value_179 = _PyDict_NewPresized( 1 );
    tmp_dict_value_180 = const_str_digest_70ca1db0f541403066a91a07e8aafa04;
    tmp_dict_key_180 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_dict_key_180 == NULL ))
    {
        tmp_dict_key_180 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_dict_key_180 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_179 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexfunction" );
        exception_tb = NULL;

        exception_lineno = 552;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_179, tmp_dict_key_180, tmp_dict_value_180 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_179 );

        exception_lineno = 552;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_179 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_179, tmp_dict_value_179 );
    Py_DECREF( tmp_dict_value_179 );
    tmp_dict_value_181 = PyList_New( 4 );
    tmp_list_element_10 = _PyDict_NewPresized( 1 );
    tmp_dict_value_182 = const_str_plain_F_FUNC;
    tmp_called_name_90 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_90 == NULL ))
    {
        tmp_called_name_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_90 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 553;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_111 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_args_element_name_111 == NULL ))
    {
        tmp_args_element_name_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_args_element_name_111 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isdummyroutine" );
        exception_tb = NULL;

        exception_lineno = 553;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 553;
    {
        PyObject *call_args[] = { tmp_args_element_name_111 };
        tmp_dict_key_182 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_90, call_args );
    }

    if ( tmp_dict_key_182 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );

        exception_lineno = 553;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_10, tmp_dict_key_182, tmp_dict_value_182 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );
        Py_DECREF( tmp_dict_key_182 );

        exception_lineno = 553;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_182 );
    PyList_SET_ITEM( tmp_dict_value_181, 0, tmp_list_element_10 );
    tmp_list_element_10 = _PyDict_NewPresized( 1 );
    tmp_dict_value_183 = const_str_digest_d1ebec83b319c7a5ff58a0b1ba8c192e;
    tmp_dict_key_183 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_dict_key_183 == NULL ))
    {
        tmp_dict_key_183 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_dict_key_183 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexfunction" );
        exception_tb = NULL;

        exception_lineno = 554;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_10, tmp_dict_key_183, tmp_dict_value_183 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );

        exception_lineno = 554;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_181, 1, tmp_list_element_10 );
    tmp_list_element_10 = _PyDict_NewPresized( 1 );
    tmp_dict_value_184 = const_str_plain_long_long;
    tmp_dict_key_184 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_longfunction );

    if (unlikely( tmp_dict_key_184 == NULL ))
    {
        tmp_dict_key_184 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islong_longfunction );
    }

    if ( tmp_dict_key_184 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "islong_longfunction" );
        exception_tb = NULL;

        exception_lineno = 555;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_10, tmp_dict_key_184, tmp_dict_value_184 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );

        exception_lineno = 555;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_181, 2, tmp_list_element_10 );
    tmp_list_element_10 = _PyDict_NewPresized( 1 );
    tmp_dict_value_185 = const_str_plain_long_double;
    tmp_dict_key_185 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_doublefunction );

    if (unlikely( tmp_dict_key_185 == NULL ))
    {
        tmp_dict_key_185 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islong_doublefunction );
    }

    if ( tmp_dict_key_185 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "islong_doublefunction" );
        exception_tb = NULL;

        exception_lineno = 556;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_10, tmp_dict_key_185, tmp_dict_value_185 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );

        exception_lineno = 556;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_181, 3, tmp_list_element_10 );
    tmp_dict_key_181 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_181, tmp_dict_value_181 );
    Py_DECREF( tmp_dict_value_181 );
    tmp_dict_value_186 = _PyDict_NewPresized( 1 );
    tmp_dict_value_187 = const_str_digest_f79c650094dda7c6d84545f0a63bf1e9;
    tmp_called_name_91 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_91 == NULL ))
    {
        tmp_called_name_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_91 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_186 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 557;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_112 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_args_element_name_112 == NULL ))
    {
        tmp_args_element_name_112 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_args_element_name_112 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_186 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 557;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 557;
    {
        PyObject *call_args[] = { tmp_args_element_name_112 };
        tmp_dict_key_187 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_91, call_args );
    }

    if ( tmp_dict_key_187 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_186 );

        exception_lineno = 557;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_186, tmp_dict_key_187, tmp_dict_value_187 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_186 );
        Py_DECREF( tmp_dict_key_187 );

        exception_lineno = 557;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_187 );
    tmp_dict_key_186 = const_str_plain_returnformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_186, tmp_dict_value_186 );
    Py_DECREF( tmp_dict_value_186 );
    tmp_dict_value_188 = _PyDict_NewPresized( 2 );
    tmp_dict_value_189 = const_str_digest_325978b503143ba3d999d70211c4d3a9;
    tmp_dict_key_189 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_dict_key_189 == NULL ))
    {
        tmp_dict_key_189 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_dict_key_189 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexfunction" );
        exception_tb = NULL;

        exception_lineno = 558;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_188, tmp_dict_key_189, tmp_dict_value_189 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );

        exception_lineno = 558;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_190 = const_str_digest_ce814c810229f76f4c23862cecc7d34c;
    tmp_called_name_92 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_92 == NULL ))
    {
        tmp_called_name_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_92 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }

    tmp_called_name_93 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_93 == NULL ))
    {
        tmp_called_name_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_93 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_114 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_args_element_name_114 == NULL ))
    {
        tmp_args_element_name_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_args_element_name_114 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexfunction" );
        exception_tb = NULL;

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_115 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_args_element_name_115 == NULL ))
    {
        tmp_args_element_name_115 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_args_element_name_115 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 559;
    {
        PyObject *call_args[] = { tmp_args_element_name_114, tmp_args_element_name_115 };
        tmp_args_element_name_113 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_93, call_args );
    }

    if ( tmp_args_element_name_113 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 559;
    {
        PyObject *call_args[] = { tmp_args_element_name_113 };
        tmp_dict_key_190 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_92, call_args );
    }

    Py_DECREF( tmp_args_element_name_113 );
    if ( tmp_dict_key_190 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_188, tmp_dict_key_190, tmp_dict_value_190 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );
        Py_DECREF( tmp_dict_key_190 );

        exception_lineno = 558;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_190 );
    tmp_dict_key_188 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_188, tmp_dict_value_188 );
    Py_DECREF( tmp_dict_value_188 );
    tmp_called_name_94 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_94 == NULL ))
    {
        tmp_called_name_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_94 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 560;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_116 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction );

    if (unlikely( tmp_args_element_name_116 == NULL ))
    {
        tmp_args_element_name_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isfunction );
    }

    if ( tmp_args_element_name_116 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isfunction" );
        exception_tb = NULL;

        exception_lineno = 560;
        goto frame_exception_exit_1;
    }

    tmp_called_name_95 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_95 == NULL ))
    {
        tmp_called_name_95 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_95 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 560;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_118 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringfunction );

    if (unlikely( tmp_args_element_name_118 == NULL ))
    {
        tmp_args_element_name_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstringfunction );
    }

    if ( tmp_args_element_name_118 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstringfunction" );
        exception_tb = NULL;

        exception_lineno = 560;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 560;
    {
        PyObject *call_args[] = { tmp_args_element_name_118 };
        tmp_args_element_name_117 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_95, call_args );
    }

    if ( tmp_args_element_name_117 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );

        exception_lineno = 560;
        goto frame_exception_exit_1;
    }
    tmp_called_name_96 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_96 == NULL ))
    {
        tmp_called_name_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_96 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_args_element_name_117 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 560;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_120 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );

    if (unlikely( tmp_args_element_name_120 == NULL ))
    {
        tmp_args_element_name_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );
    }

    if ( tmp_args_element_name_120 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_args_element_name_117 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isfunction_wrap" );
        exception_tb = NULL;

        exception_lineno = 560;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 560;
    {
        PyObject *call_args[] = { tmp_args_element_name_120 };
        tmp_args_element_name_119 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_96, call_args );
    }

    if ( tmp_args_element_name_119 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_args_element_name_117 );

        exception_lineno = 560;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 560;
    {
        PyObject *call_args[] = { tmp_args_element_name_116, tmp_args_element_name_117, tmp_args_element_name_119 };
        tmp_dict_value_191 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_94, call_args );
    }

    Py_DECREF( tmp_args_element_name_117 );
    Py_DECREF( tmp_args_element_name_119 );
    if ( tmp_dict_value_191 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );

        exception_lineno = 560;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_191 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_191, tmp_dict_value_191 );
    Py_DECREF( tmp_dict_value_191 );
    PyList_SET_ITEM( tmp_assign_source_87, 7, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 10 );
    tmp_dict_value_192 = const_str_digest_418fe04998188548a4eb680883e25e29;
    tmp_dict_key_192 = const_str_plain_declfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_192, tmp_dict_value_192 );
    tmp_dict_value_193 = _PyDict_NewPresized( 2 );
    tmp_dict_value_194 = const_str_digest_f079d8c7e0ce1658a2cdcdbc6577f10a;
    tmp_called_name_97 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_97 == NULL ))
    {
        tmp_called_name_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_97 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 563;
        goto frame_exception_exit_1;
    }

    tmp_called_name_98 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_98 == NULL ))
    {
        tmp_called_name_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_98 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 563;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_122 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_122 == NULL ))
    {
        tmp_args_element_name_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_122 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 563;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_123 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_123 == NULL ))
    {
        tmp_args_element_name_123 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_123 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 563;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 563;
    {
        PyObject *call_args[] = { tmp_args_element_name_122, tmp_args_element_name_123 };
        tmp_args_element_name_121 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_98, call_args );
    }

    if ( tmp_args_element_name_121 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );

        exception_lineno = 563;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 563;
    {
        PyObject *call_args[] = { tmp_args_element_name_121 };
        tmp_dict_key_194 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_97, call_args );
    }

    Py_DECREF( tmp_args_element_name_121 );
    if ( tmp_dict_key_194 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );

        exception_lineno = 563;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_193, tmp_dict_key_194, tmp_dict_value_194 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        Py_DECREF( tmp_dict_key_194 );

        exception_lineno = 563;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_194 );
    tmp_dict_value_195 = const_str_digest_3901229eb47cd28cbfe43558ace8a7fe;
    tmp_called_name_99 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_99 == NULL ))
    {
        tmp_called_name_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_99 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 565;
        goto frame_exception_exit_1;
    }

    tmp_called_name_100 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_100 == NULL ))
    {
        tmp_called_name_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_100 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 565;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_125 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_args_element_name_125 == NULL ))
    {
        tmp_args_element_name_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_args_element_name_125 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ismoduleroutine" );
        exception_tb = NULL;

        exception_lineno = 565;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 565;
    {
        PyObject *call_args[] = { tmp_args_element_name_125 };
        tmp_args_element_name_124 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_100, call_args );
    }

    if ( tmp_args_element_name_124 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );

        exception_lineno = 565;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_126 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_126 == NULL ))
    {
        tmp_args_element_name_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_126 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        Py_DECREF( tmp_args_element_name_124 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 565;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 565;
    {
        PyObject *call_args[] = { tmp_args_element_name_124, tmp_args_element_name_126 };
        tmp_dict_key_195 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_99, call_args );
    }

    Py_DECREF( tmp_args_element_name_124 );
    if ( tmp_dict_key_195 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );

        exception_lineno = 565;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_193, tmp_dict_key_195, tmp_dict_value_195 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        Py_DECREF( tmp_dict_key_195 );

        exception_lineno = 563;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_195 );
    tmp_dict_key_193 = const_str_plain_routine_def;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_193, tmp_dict_value_193 );
    Py_DECREF( tmp_dict_value_193 );
    tmp_dict_value_196 = LIST_COPY( const_list_9af870e8ed9f6c337cdc0c36a763a6f2_list );
    tmp_dict_key_196 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_196, tmp_dict_value_196 );
    Py_DECREF( tmp_dict_value_196 );
    tmp_dict_value_197 = const_str_digest_3a9c9af3e588a2633a190cff1a10bb88;
    tmp_dict_key_197 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_197, tmp_dict_value_197 );
    tmp_dict_value_198 = PyList_New( 15 );
    tmp_list_element_11 = const_str_digest_67aace0cd79c924ba6b33fef89556eb4;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 0, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_40637411422dfc32b28a843ad5dde31c;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 1, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_ba731a222a3154fea200e0b8ef7551a0;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 2, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_1bd186189b55a7f24f5b08c35b6e375e;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 3, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_73242ab7ac60aa6a101ca2a2c63a94f6;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 4, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_96e6a77778bbeb3dd4408d0a578f26f6;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 5, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_ff06ccb2c23c449388cb0f214acc87f7;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 6, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_2deaf67a44d2415292c19cfb0aa50a8c;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 7, tmp_list_element_11 );
    tmp_list_element_11 = _PyDict_NewPresized( 1 );
    tmp_dict_value_199 = const_str_digest_3a3271ef4159a1c24ad0288a211dee55;
    tmp_dict_key_199 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_199 == NULL ))
    {
        tmp_dict_key_199 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_199 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasexternals" );
        exception_tb = NULL;

        exception_lineno = 579;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_11, tmp_dict_key_199, tmp_dict_value_199 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );

        exception_lineno = 579;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_198, 8, tmp_list_element_11 );
    tmp_list_element_11 = _PyDict_NewPresized( 1 );
    tmp_dict_value_200 = const_str_digest_414ab1171f5a5120432354ccf185eb19;
    tmp_dict_key_200 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_200 == NULL ))
    {
        tmp_dict_key_200 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_200 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isthreadsafe" );
        exception_tb = NULL;

        exception_lineno = 583;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_11, tmp_dict_key_200, tmp_dict_value_200 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );

        exception_lineno = 583;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_198, 9, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_bfaaa4c1dfc4c9a8695c608949396cef;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 10, tmp_list_element_11 );
    tmp_list_element_11 = _PyDict_NewPresized( 1 );
    tmp_dict_value_201 = const_str_digest_5c5eac15bee883da581fb631c32166a5;
    tmp_dict_key_201 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_201 == NULL ))
    {
        tmp_dict_key_201 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_201 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isthreadsafe" );
        exception_tb = NULL;

        exception_lineno = 591;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_11, tmp_dict_key_201, tmp_dict_value_201 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );

        exception_lineno = 591;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_198, 11, tmp_list_element_11 );
    tmp_list_element_11 = _PyDict_NewPresized( 1 );
    tmp_dict_value_202 = const_str_digest_6fbcce788ee343047e2cb747b93c7fac;
    tmp_dict_key_202 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_202 == NULL ))
    {
        tmp_dict_key_202 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_202 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasexternals" );
        exception_tb = NULL;

        exception_lineno = 592;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_11, tmp_dict_key_202, tmp_dict_value_202 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );

        exception_lineno = 592;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_198, 12, tmp_list_element_11 );
    tmp_list_element_11 = _PyDict_NewPresized( 1 );
    tmp_dict_value_203 = const_str_digest_5529d0c2e779042efeaae9babb2fc0da;
    tmp_dict_key_203 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_203 == NULL ))
    {
        tmp_dict_key_203 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_203 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 593;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_11, tmp_dict_key_203, tmp_dict_value_203 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );

        exception_lineno = 593;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_198, 13, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_dd00cc76eb43fb8e61f9350624d82fe2;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 14, tmp_list_element_11 );
    tmp_dict_key_198 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_198, tmp_dict_value_198 );
    Py_DECREF( tmp_dict_value_198 );
    tmp_dict_value_204 = const_str_digest_f79c650094dda7c6d84545f0a63bf1e9;
    tmp_dict_key_204 = const_str_plain_returnformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_204, tmp_dict_value_204 );
    tmp_dict_value_205 = const_str_digest_ce814c810229f76f4c23862cecc7d34c;
    tmp_dict_key_205 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_205, tmp_dict_value_205 );
    tmp_dict_value_206 = const_str_digest_e6791082bde6b05eedc1689a810e4aec;
    tmp_dict_key_206 = const_str_plain_freemem;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_206, tmp_dict_value_206 );
    tmp_dict_value_207 = LIST_COPY( const_list_2a1cb5f1b6ad96684950fc2bb3e18869_list );
    tmp_dict_key_207 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_207, tmp_dict_value_207 );
    Py_DECREF( tmp_dict_value_207 );
    tmp_called_name_101 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_101 == NULL ))
    {
        tmp_called_name_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_101 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 601;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_127 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringfunction );

    if (unlikely( tmp_args_element_name_127 == NULL ))
    {
        tmp_args_element_name_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstringfunction );
    }

    if ( tmp_args_element_name_127 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstringfunction" );
        exception_tb = NULL;

        exception_lineno = 601;
        goto frame_exception_exit_1;
    }

    tmp_called_name_102 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_102 == NULL ))
    {
        tmp_called_name_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_102 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 601;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_129 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );

    if (unlikely( tmp_args_element_name_129 == NULL ))
    {
        tmp_args_element_name_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );
    }

    if ( tmp_args_element_name_129 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isfunction_wrap" );
        exception_tb = NULL;

        exception_lineno = 601;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 601;
    {
        PyObject *call_args[] = { tmp_args_element_name_129 };
        tmp_args_element_name_128 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_102, call_args );
    }

    if ( tmp_args_element_name_128 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );

        exception_lineno = 601;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 601;
    {
        PyObject *call_args[] = { tmp_args_element_name_127, tmp_args_element_name_128 };
        tmp_dict_value_208 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_101, call_args );
    }

    Py_DECREF( tmp_args_element_name_128 );
    if ( tmp_dict_value_208 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );

        exception_lineno = 601;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_208 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_208, tmp_dict_value_208 );
    Py_DECREF( tmp_dict_value_208 );
    PyList_SET_ITEM( tmp_assign_source_87, 8, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 4 );
    tmp_dict_value_209 = const_str_digest_c4364c15f85c6aa770abecdf0860eef3;
    tmp_dict_key_209 = const_str_plain_routdebugenter;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_209, tmp_dict_value_209 );
    tmp_dict_value_210 = const_str_digest_e20e424cfc96e1ebeae47e009382b436;
    tmp_dict_key_210 = const_str_plain_routdebugleave;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_210, tmp_dict_value_210 );
    tmp_dict_value_211 = const_str_digest_9283391fb6e933c6558013a71a260784;
    tmp_dict_key_211 = const_str_plain_routdebugfailure;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_211, tmp_dict_value_211 );
    tmp_dict_value_212 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_value_212 == NULL ))
    {
        tmp_dict_value_212 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_value_212 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 607;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_212 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_212, tmp_dict_value_212 );
    PyList_SET_ITEM( tmp_assign_source_87, 9, tmp_list_element_2 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_rout_rules, tmp_assign_source_87 );
    tmp_assign_source_88 = _PyDict_NewPresized( 11 );
    tmp_dict_value_213 = const_str_plain_long_long;
    tmp_dict_key_213 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_long );

    if (unlikely( tmp_dict_key_213 == NULL ))
    {
        tmp_dict_key_213 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islong_long );
    }

    if ( tmp_dict_key_213 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "islong_long" );
        exception_tb = NULL;

        exception_lineno = 613;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_assign_source_88, tmp_dict_key_213, tmp_dict_value_213 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 613;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_214 = const_str_plain_long_double;
    tmp_dict_key_214 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_double );

    if (unlikely( tmp_dict_key_214 == NULL ))
    {
        tmp_dict_key_214 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islong_double );
    }

    if ( tmp_dict_key_214 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "islong_double" );
        exception_tb = NULL;

        exception_lineno = 614;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_assign_source_88, tmp_dict_key_214, tmp_dict_value_214 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 613;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_215 = const_str_plain_complex_long_double;
    tmp_dict_key_215 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_complex );

    if (unlikely( tmp_dict_key_215 == NULL ))
    {
        tmp_dict_key_215 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islong_complex );
    }

    if ( tmp_dict_key_215 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "islong_complex" );
        exception_tb = NULL;

        exception_lineno = 615;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_assign_source_88, tmp_dict_key_215, tmp_dict_value_215 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 613;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_216 = const_str_plain_unsigned_char;
    tmp_dict_key_216 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_char );

    if (unlikely( tmp_dict_key_216 == NULL ))
    {
        tmp_dict_key_216 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_char );
    }

    if ( tmp_dict_key_216 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned_char" );
        exception_tb = NULL;

        exception_lineno = 616;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_assign_source_88, tmp_dict_key_216, tmp_dict_value_216 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 613;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_217 = const_str_plain_unsigned_short;
    tmp_dict_key_217 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_short );

    if (unlikely( tmp_dict_key_217 == NULL ))
    {
        tmp_dict_key_217 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_short );
    }

    if ( tmp_dict_key_217 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned_short" );
        exception_tb = NULL;

        exception_lineno = 617;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_assign_source_88, tmp_dict_key_217, tmp_dict_value_217 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 613;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_218 = const_str_plain_unsigned;
    tmp_dict_key_218 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned );

    if (unlikely( tmp_dict_key_218 == NULL ))
    {
        tmp_dict_key_218 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned );
    }

    if ( tmp_dict_key_218 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned" );
        exception_tb = NULL;

        exception_lineno = 618;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_assign_source_88, tmp_dict_key_218, tmp_dict_value_218 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 613;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_219 = const_str_plain_unsigned_long_long;
    tmp_dict_key_219 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_long_long );

    if (unlikely( tmp_dict_key_219 == NULL ))
    {
        tmp_dict_key_219 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_long_long );
    }

    if ( tmp_dict_key_219 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned_long_long" );
        exception_tb = NULL;

        exception_lineno = 619;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_assign_source_88, tmp_dict_key_219, tmp_dict_value_219 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 613;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_220 = const_str_plain_unsigned_char;
    tmp_dict_key_220 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray );

    if (unlikely( tmp_dict_key_220 == NULL ))
    {
        tmp_dict_key_220 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray );
    }

    if ( tmp_dict_key_220 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned_chararray" );
        exception_tb = NULL;

        exception_lineno = 620;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_assign_source_88, tmp_dict_key_220, tmp_dict_value_220 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 613;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_221 = const_str_plain_unsigned_short;
    tmp_dict_key_221 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray );

    if (unlikely( tmp_dict_key_221 == NULL ))
    {
        tmp_dict_key_221 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray );
    }

    if ( tmp_dict_key_221 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned_shortarray" );
        exception_tb = NULL;

        exception_lineno = 621;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_assign_source_88, tmp_dict_key_221, tmp_dict_value_221 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 613;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_222 = const_str_plain_unsigned_long_long;
    tmp_dict_key_222 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray );

    if (unlikely( tmp_dict_key_222 == NULL ))
    {
        tmp_dict_key_222 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray );
    }

    if ( tmp_dict_key_222 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned_long_longarray" );
        exception_tb = NULL;

        exception_lineno = 622;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_assign_source_88, tmp_dict_key_222, tmp_dict_value_222 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 613;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_223 = const_str_plain_long_long;
    tmp_dict_key_223 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_issigned_long_longarray );

    if (unlikely( tmp_dict_key_223 == NULL ))
    {
        tmp_dict_key_223 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_issigned_long_longarray );
    }

    if ( tmp_dict_key_223 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "issigned_long_longarray" );
        exception_tb = NULL;

        exception_lineno = 623;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_assign_source_88, tmp_dict_key_223, tmp_dict_value_223 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 613;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_typedef_need_dict, tmp_assign_source_88 );
    tmp_assign_source_89 = PyList_New( 15 );
    tmp_list_element_12 = _PyDict_NewPresized( 1 );
    tmp_dict_value_224 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sepdict );

    if (unlikely( tmp_dict_value_224 == NULL ))
    {
        tmp_dict_value_224 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sepdict );
    }

    if ( tmp_dict_value_224 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sepdict" );
        exception_tb = NULL;

        exception_lineno = 628;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_224 = const_str_plain_separatorsfor;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_224, tmp_dict_value_224 );
    PyList_SET_ITEM( tmp_assign_source_89, 0, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_225 = PyList_New( 2 );
    tmp_list_element_13 = const_str_digest_4fd4446f18d1b901104969530d10ded8;
    Py_INCREF( tmp_list_element_13 );
    PyList_SET_ITEM( tmp_dict_value_225, 0, tmp_list_element_13 );
    tmp_list_element_13 = _PyDict_NewPresized( 1 );
    tmp_dict_value_226 = const_str_digest_29c8a7dbfff0f5e57cc5a0cd26809507;
    tmp_dict_key_226 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_226 == NULL ))
    {
        tmp_dict_key_226 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_226 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_225 );
        Py_DECREF( tmp_list_element_13 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 632;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_13, tmp_dict_key_226, tmp_dict_value_226 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_225 );
        Py_DECREF( tmp_list_element_13 );

        exception_lineno = 632;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_225, 1, tmp_list_element_13 );
    tmp_dict_key_225 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_225, tmp_dict_value_225 );
    Py_DECREF( tmp_dict_value_225 );
    tmp_dict_value_227 = const_str_digest_23871080073f259d5d6f43f02f0c36c2;
    tmp_dict_key_227 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_227, tmp_dict_value_227 );
    tmp_dict_value_228 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_typedef_need_dict );

    if (unlikely( tmp_dict_value_228 == NULL ))
    {
        tmp_dict_value_228 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_typedef_need_dict );
    }

    if ( tmp_dict_value_228 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "typedef_need_dict" );
        exception_tb = NULL;

        exception_lineno = 634;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_228 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_228, tmp_dict_value_228 );
    PyList_SET_ITEM( tmp_assign_source_89, 1, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 4 );
    tmp_dict_value_229 = const_str_digest_47726514eddf542ce57be98491d6745b;
    tmp_dict_key_229 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_229, tmp_dict_value_229 );
    tmp_dict_value_230 = _PyDict_NewPresized( 1 );
    tmp_dict_value_231 = const_str_digest_7b560b9c887c6f93f8fb76cb77937f62;
    tmp_dict_key_231 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_231 == NULL ))
    {
        tmp_dict_key_231 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_231 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_230 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 639;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_230, tmp_dict_key_231, tmp_dict_value_231 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_230 );

        exception_lineno = 639;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_230 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_230, tmp_dict_value_230 );
    Py_DECREF( tmp_dict_value_230 );
    tmp_dict_value_232 = _PyDict_NewPresized( 1 );
    tmp_dict_value_233 = const_str_digest_e6104d35553a035097ec1423ebaa6291;
    tmp_dict_key_233 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_233 == NULL ))
    {
        tmp_dict_key_233 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_233 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_232 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 640;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_232, tmp_dict_key_233, tmp_dict_value_233 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_232 );

        exception_lineno = 640;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_232 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_232, tmp_dict_value_232 );
    Py_DECREF( tmp_dict_value_232 );
    tmp_called_name_103 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_103 == NULL ))
    {
        tmp_called_name_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_103 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 641;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_130 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_args_element_name_130 == NULL ))
    {
        tmp_args_element_name_130 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_args_element_name_130 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isscalar" );
        exception_tb = NULL;

        exception_lineno = 641;
        goto frame_exception_exit_1;
    }

    tmp_called_name_104 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_104 == NULL ))
    {
        tmp_called_name_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_104 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 641;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_132 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_132 == NULL ))
    {
        tmp_args_element_name_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_132 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 641;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 641;
    {
        PyObject *call_args[] = { tmp_args_element_name_132 };
        tmp_args_element_name_131 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_104, call_args );
    }

    if ( tmp_args_element_name_131 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );

        exception_lineno = 641;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 641;
    {
        PyObject *call_args[] = { tmp_args_element_name_130, tmp_args_element_name_131 };
        tmp_dict_value_234 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_103, call_args );
    }

    Py_DECREF( tmp_args_element_name_131 );
    if ( tmp_dict_value_234 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );

        exception_lineno = 641;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_234 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_234, tmp_dict_value_234 );
    Py_DECREF( tmp_dict_value_234 );
    PyList_SET_ITEM( tmp_assign_source_89, 2, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 5 );
    tmp_dict_value_235 = const_str_digest_ec5c056bc2faa2f16a4f48f4884353b9;
    tmp_dict_key_235 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_235, tmp_dict_value_235 );
    tmp_dict_value_236 = const_str_digest_807a8edf883cc73f1196a6287772f84f;
    tmp_dict_key_236 = const_str_plain_docstrout;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_236, tmp_dict_value_236 );
    tmp_dict_value_237 = const_str_digest_5e7d869da782af1421d1abc2296a84fd;
    tmp_dict_key_237 = const_str_plain_docreturn;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_237, tmp_dict_value_237 );
    tmp_dict_value_238 = const_str_digest_ba6df2cca25e244289fd58a116476aaa;
    tmp_dict_key_238 = const_str_plain_returnformat;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_238, tmp_dict_value_238 );
    tmp_called_name_105 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_105 == NULL ))
    {
        tmp_called_name_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_105 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 648;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_133 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_args_element_name_133 == NULL ))
    {
        tmp_args_element_name_133 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_args_element_name_133 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isscalar" );
        exception_tb = NULL;

        exception_lineno = 648;
        goto frame_exception_exit_1;
    }

    tmp_called_name_106 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_106 == NULL ))
    {
        tmp_called_name_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_106 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 648;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_135 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_135 == NULL ))
    {
        tmp_args_element_name_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_135 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 648;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 648;
    {
        PyObject *call_args[] = { tmp_args_element_name_135 };
        tmp_args_element_name_134 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_106, call_args );
    }

    if ( tmp_args_element_name_134 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );

        exception_lineno = 648;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_136 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_args_element_name_136 == NULL ))
    {
        tmp_args_element_name_136 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_args_element_name_136 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_args_element_name_134 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_out" );
        exception_tb = NULL;

        exception_lineno = 648;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 648;
    {
        PyObject *call_args[] = { tmp_args_element_name_133, tmp_args_element_name_134, tmp_args_element_name_136 };
        tmp_dict_value_239 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_105, call_args );
    }

    Py_DECREF( tmp_args_element_name_134 );
    if ( tmp_dict_value_239 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );

        exception_lineno = 648;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_239 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_239, tmp_dict_value_239 );
    Py_DECREF( tmp_dict_value_239 );
    PyList_SET_ITEM( tmp_assign_source_89, 3, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_240 = const_str_digest_5b7ccc32e52fccf534ab08cff75fe54e;
    tmp_dict_key_240 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_240, tmp_dict_value_240 );
    tmp_dict_value_241 = _PyDict_NewPresized( 1 );
    tmp_dict_value_242 = const_str_digest_12736df3358c55f9c88205a9d038e3cd;
    tmp_dict_key_242 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_242 == NULL ))
    {
        tmp_dict_key_242 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_242 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_241 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 653;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_241, tmp_dict_key_242, tmp_dict_value_242 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_241 );

        exception_lineno = 653;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_241 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_241, tmp_dict_value_241 );
    Py_DECREF( tmp_dict_value_241 );
    tmp_dict_value_243 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_dict_value_243 == NULL ))
    {
        tmp_dict_value_243 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_dict_value_243 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 654;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_243 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_243, tmp_dict_value_243 );
    PyList_SET_ITEM( tmp_assign_source_89, 4, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_244 = LIST_COPY( const_list_10b104c3768849b37f92dfc64a682f14_list );
    tmp_dict_key_244 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_244, tmp_dict_value_244 );
    Py_DECREF( tmp_dict_value_244 );
    tmp_dict_value_245 = LIST_COPY( const_list_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34_list );
    tmp_dict_key_245 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_245, tmp_dict_value_245 );
    Py_DECREF( tmp_dict_value_245 );
    tmp_dict_value_246 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_dict_value_246 == NULL ))
    {
        tmp_dict_value_246 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_dict_value_246 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstring" );
        exception_tb = NULL;

        exception_lineno = 662;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_246 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_246, tmp_dict_value_246 );
    PyList_SET_ITEM( tmp_assign_source_89, 5, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_247 = LIST_COPY( const_list_53e499b918b44aac469e052ee883b608_list );
    tmp_dict_key_247 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_247, tmp_dict_value_247 );
    Py_DECREF( tmp_dict_value_247 );
    tmp_dict_value_248 = PyList_New( 3 );
    tmp_list_element_14 = const_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34;
    Py_INCREF( tmp_list_element_14 );
    PyList_SET_ITEM( tmp_dict_value_248, 0, tmp_list_element_14 );
    tmp_list_element_14 = _PyDict_NewPresized( 1 );
    tmp_dict_value_249 = const_str_plain_forcomb;
    tmp_dict_key_249 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_249 == NULL ))
    {
        tmp_dict_key_249 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_249 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_248 );
        Py_DECREF( tmp_list_element_14 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 670;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_14, tmp_dict_key_249, tmp_dict_value_249 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_248 );
        Py_DECREF( tmp_list_element_14 );

        exception_lineno = 670;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_248, 1, tmp_list_element_14 );
    tmp_list_element_14 = _PyDict_NewPresized( 1 );
    tmp_dict_value_250 = const_str_plain_CFUNCSMESS;
    tmp_dict_key_250 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_250 == NULL ))
    {
        tmp_dict_key_250 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_250 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_248 );
        Py_DECREF( tmp_list_element_14 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 670;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_14, tmp_dict_key_250, tmp_dict_value_250 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_248 );
        Py_DECREF( tmp_list_element_14 );

        exception_lineno = 670;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_248, 2, tmp_list_element_14 );
    tmp_dict_key_248 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_248, tmp_dict_value_248 );
    Py_DECREF( tmp_dict_value_248 );
    tmp_dict_value_251 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_dict_value_251 == NULL ))
    {
        tmp_dict_value_251 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_dict_value_251 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 671;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_251 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_251, tmp_dict_value_251 );
    PyList_SET_ITEM( tmp_assign_source_89, 6, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 1 );
    tmp_called_name_107 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_107 == NULL ))
    {
        tmp_called_name_107 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_107 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 675;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_137 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_args_element_name_137 == NULL ))
    {
        tmp_args_element_name_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_args_element_name_137 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 675;
        goto frame_exception_exit_1;
    }

    tmp_called_name_108 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_108 == NULL ))
    {
        tmp_called_name_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_108 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 675;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_139 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_args_element_name_139 == NULL ))
    {
        tmp_args_element_name_139 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_args_element_name_139 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexarray" );
        exception_tb = NULL;

        exception_lineno = 675;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 675;
    {
        PyObject *call_args[] = { tmp_args_element_name_139 };
        tmp_args_element_name_138 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_108, call_args );
    }

    if ( tmp_args_element_name_138 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );

        exception_lineno = 675;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 675;
    {
        PyObject *call_args[] = { tmp_args_element_name_137, tmp_args_element_name_138 };
        tmp_dict_value_252 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_107, call_args );
    }

    Py_DECREF( tmp_args_element_name_138 );
    if ( tmp_dict_value_252 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );

        exception_lineno = 675;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_252 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_252, tmp_dict_value_252 );
    Py_DECREF( tmp_dict_value_252 );
    PyList_SET_ITEM( tmp_assign_source_89, 7, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 1 );
    tmp_called_name_109 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_109 == NULL ))
    {
        tmp_called_name_109 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_109 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 677;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_140 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_args_element_name_140 == NULL ))
    {
        tmp_args_element_name_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_args_element_name_140 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 677;
        goto frame_exception_exit_1;
    }

    tmp_called_name_110 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_110 == NULL ))
    {
        tmp_called_name_110 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_110 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 677;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_142 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_args_element_name_142 == NULL ))
    {
        tmp_args_element_name_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_args_element_name_142 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexarray" );
        exception_tb = NULL;

        exception_lineno = 677;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 677;
    {
        PyObject *call_args[] = { tmp_args_element_name_142 };
        tmp_args_element_name_141 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_110, call_args );
    }

    if ( tmp_args_element_name_141 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );

        exception_lineno = 677;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_143 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_143 == NULL ))
    {
        tmp_args_element_name_143 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_143 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_args_element_name_141 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 677;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 677;
    {
        PyObject *call_args[] = { tmp_args_element_name_140, tmp_args_element_name_141, tmp_args_element_name_143 };
        tmp_dict_value_253 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_109, call_args );
    }

    Py_DECREF( tmp_args_element_name_141 );
    if ( tmp_dict_value_253 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );

        exception_lineno = 677;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_253 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_253, tmp_dict_value_253 );
    Py_DECREF( tmp_dict_value_253 );
    PyList_SET_ITEM( tmp_assign_source_89, 8, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_254 = const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70;
    tmp_dict_key_254 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_254, tmp_dict_value_254 );
    tmp_dict_value_255 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isint1array );

    if (unlikely( tmp_dict_value_255 == NULL ))
    {
        tmp_dict_value_255 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isint1array );
    }

    if ( tmp_dict_value_255 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isint1array" );
        exception_tb = NULL;

        exception_lineno = 681;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_255 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_255, tmp_dict_value_255 );
    tmp_dict_value_256 = const_str_empty;
    tmp_dict_key_256 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_256, tmp_dict_value_256 );
    PyList_SET_ITEM( tmp_assign_source_89, 9, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_257 = const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70;
    tmp_dict_key_257 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_257, tmp_dict_value_257 );
    tmp_dict_value_258 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray );

    if (unlikely( tmp_dict_value_258 == NULL ))
    {
        tmp_dict_value_258 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray );
    }

    if ( tmp_dict_value_258 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned_chararray" );
        exception_tb = NULL;

        exception_lineno = 686;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_258 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_258, tmp_dict_value_258 );
    tmp_dict_value_259 = const_str_empty;
    tmp_dict_key_259 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_259, tmp_dict_value_259 );
    PyList_SET_ITEM( tmp_assign_source_89, 10, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_260 = const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70;
    tmp_dict_key_260 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_260, tmp_dict_value_260 );
    tmp_dict_value_261 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray );

    if (unlikely( tmp_dict_value_261 == NULL ))
    {
        tmp_dict_value_261 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray );
    }

    if ( tmp_dict_value_261 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned_shortarray" );
        exception_tb = NULL;

        exception_lineno = 691;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_261 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_261, tmp_dict_value_261 );
    tmp_dict_value_262 = const_str_empty;
    tmp_dict_key_262 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_262, tmp_dict_value_262 );
    PyList_SET_ITEM( tmp_assign_source_89, 11, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_263 = const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70;
    tmp_dict_key_263 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_263, tmp_dict_value_263 );
    tmp_dict_value_264 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray );

    if (unlikely( tmp_dict_value_264 == NULL ))
    {
        tmp_dict_value_264 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray );
    }

    if ( tmp_dict_value_264 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned_long_longarray" );
        exception_tb = NULL;

        exception_lineno = 696;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_264 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_264, tmp_dict_value_264 );
    tmp_dict_value_265 = const_str_empty;
    tmp_dict_key_265 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_265, tmp_dict_value_265 );
    PyList_SET_ITEM( tmp_assign_source_89, 12, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_266 = const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70;
    tmp_dict_key_266 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_266, tmp_dict_value_266 );
    tmp_dict_value_267 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_dict_value_267 == NULL ))
    {
        tmp_dict_value_267 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_dict_value_267 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexarray" );
        exception_tb = NULL;

        exception_lineno = 701;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_267 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_267, tmp_dict_value_267 );
    tmp_dict_value_268 = const_str_empty;
    tmp_dict_key_268 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_268, tmp_dict_value_268 );
    PyList_SET_ITEM( tmp_assign_source_89, 13, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_269 = _PyDict_NewPresized( 1 );
    tmp_dict_value_270 = const_str_digest_d704ce9f38840583240e1e34a2cd70e6;
    tmp_dict_key_270 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarrayofstrings );

    if (unlikely( tmp_dict_key_270 == NULL ))
    {
        tmp_dict_key_270 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarrayofstrings );
    }

    if ( tmp_dict_key_270 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_269 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarrayofstrings" );
        exception_tb = NULL;

        exception_lineno = 706;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_269, tmp_dict_key_270, tmp_dict_value_270 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_269 );

        exception_lineno = 706;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_269 = const_str_plain_callfortranappend;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_269, tmp_dict_value_269 );
    Py_DECREF( tmp_dict_value_269 );
    tmp_dict_value_271 = const_str_plain_string;
    tmp_dict_key_271 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_271, tmp_dict_value_271 );
    tmp_dict_value_272 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringarray );

    if (unlikely( tmp_dict_value_272 == NULL ))
    {
        tmp_dict_value_272 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstringarray );
    }

    if ( tmp_dict_value_272 == NULL )
    {
        Py_DECREF( tmp_assign_source_89 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstringarray" );
        exception_tb = NULL;

        exception_lineno = 708;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_272 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_272, tmp_dict_value_272 );
    PyList_SET_ITEM( tmp_assign_source_89, 14, tmp_list_element_12 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_aux_rules, tmp_assign_source_89 );
    tmp_assign_source_90 = PyList_New( 42 );
    tmp_list_element_15 = _PyDict_NewPresized( 1 );
    tmp_dict_value_273 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sepdict );

    if (unlikely( tmp_dict_value_273 == NULL ))
    {
        tmp_dict_value_273 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sepdict );
    }

    if ( tmp_dict_value_273 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sepdict" );
        exception_tb = NULL;

        exception_lineno = 714;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_273 = const_str_plain_separatorsfor;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_273, tmp_dict_value_273 );
    PyList_SET_ITEM( tmp_assign_source_90, 0, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 4 );
    tmp_dict_value_274 = PyList_New( 2 );
    tmp_list_element_16 = const_str_digest_7e73ba8d5edb7ec5ccd148bf6084d61b;
    Py_INCREF( tmp_list_element_16 );
    PyList_SET_ITEM( tmp_dict_value_274, 0, tmp_list_element_16 );
    tmp_list_element_16 = _PyDict_NewPresized( 1 );
    tmp_dict_value_275 = const_str_digest_29c8a7dbfff0f5e57cc5a0cd26809507;
    tmp_dict_key_275 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_275 == NULL ))
    {
        tmp_dict_key_275 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_275 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_274 );
        Py_DECREF( tmp_list_element_16 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 718;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_16, tmp_dict_key_275, tmp_dict_value_275 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_274 );
        Py_DECREF( tmp_list_element_16 );

        exception_lineno = 718;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_274, 1, tmp_list_element_16 );
    tmp_dict_key_274 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_274, tmp_dict_value_274 );
    Py_DECREF( tmp_dict_value_274 );
    tmp_dict_value_276 = const_str_digest_23871080073f259d5d6f43f02f0c36c2;
    tmp_dict_key_276 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_276, tmp_dict_value_276 );
    tmp_dict_value_277 = const_str_empty;
    tmp_dict_key_277 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_277, tmp_dict_value_277 );
    tmp_dict_value_278 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_typedef_need_dict );

    if (unlikely( tmp_dict_value_278 == NULL ))
    {
        tmp_dict_value_278 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_typedef_need_dict );
    }

    if ( tmp_dict_value_278 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "typedef_need_dict" );
        exception_tb = NULL;

        exception_lineno = 721;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_278 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_278, tmp_dict_value_278 );
    PyList_SET_ITEM( tmp_assign_source_90, 1, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 7 );
    tmp_dict_value_279 = _PyDict_NewPresized( 1 );
    tmp_dict_value_280 = const_str_digest_16c89f50945435dd0988659c1c019bec;
    tmp_called_name_111 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_111 == NULL ))
    {
        tmp_called_name_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_111 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_279 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 725;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_144 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_args_element_name_144 == NULL ))
    {
        tmp_args_element_name_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_args_element_name_144 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_279 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 725;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_145 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_145 == NULL ))
    {
        tmp_args_element_name_145 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_145 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_279 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 725;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 725;
    {
        PyObject *call_args[] = { tmp_args_element_name_144, tmp_args_element_name_145 };
        tmp_dict_key_280 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_111, call_args );
    }

    if ( tmp_dict_key_280 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_279 );

        exception_lineno = 725;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_279, tmp_dict_key_280, tmp_dict_value_280 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_279 );
        Py_DECREF( tmp_dict_key_280 );

        exception_lineno = 725;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_280 );
    tmp_dict_key_279 = const_str_plain_docstropt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_279, tmp_dict_value_279 );
    Py_DECREF( tmp_dict_value_279 );
    tmp_dict_value_281 = _PyDict_NewPresized( 1 );
    tmp_dict_value_282 = const_str_digest_16c89f50945435dd0988659c1c019bec;
    tmp_called_name_112 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_112 == NULL ))
    {
        tmp_called_name_112 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_112 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_281 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 726;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_146 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_args_element_name_146 == NULL ))
    {
        tmp_args_element_name_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_args_element_name_146 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_281 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isrequired" );
        exception_tb = NULL;

        exception_lineno = 726;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_147 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_147 == NULL ))
    {
        tmp_args_element_name_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_147 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_281 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 726;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 726;
    {
        PyObject *call_args[] = { tmp_args_element_name_146, tmp_args_element_name_147 };
        tmp_dict_key_282 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_112, call_args );
    }

    if ( tmp_dict_key_282 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_281 );

        exception_lineno = 726;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_281, tmp_dict_key_282, tmp_dict_value_282 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_281 );
        Py_DECREF( tmp_dict_key_282 );

        exception_lineno = 726;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_282 );
    tmp_dict_key_281 = const_str_plain_docstrreq;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_281, tmp_dict_value_281 );
    Py_DECREF( tmp_dict_value_281 );
    tmp_dict_value_283 = _PyDict_NewPresized( 1 );
    tmp_dict_value_284 = const_str_digest_807a8edf883cc73f1196a6287772f84f;
    tmp_dict_key_284 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_284 == NULL ))
    {
        tmp_dict_key_284 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_284 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_283 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_out" );
        exception_tb = NULL;

        exception_lineno = 727;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_283, tmp_dict_key_284, tmp_dict_value_284 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_283 );

        exception_lineno = 727;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_283 = const_str_plain_docstrout;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_283, tmp_dict_value_283 );
    Py_DECREF( tmp_dict_value_283 );
    tmp_dict_value_285 = _PyDict_NewPresized( 1 );
    tmp_dict_value_286 = PyList_New( 2 );
    tmp_list_element_17 = const_str_digest_17902227e562a5b10e9fdcc2c3c46bec;
    Py_INCREF( tmp_list_element_17 );
    PyList_SET_ITEM( tmp_dict_value_286, 0, tmp_list_element_17 );
    tmp_list_element_17 = _PyDict_NewPresized( 1 );
    tmp_dict_value_287 = const_str_digest_685077f1f38d82b206cc793ea02e01a1;
    tmp_dict_key_287 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_dict_key_287 == NULL ))
    {
        tmp_dict_key_287 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_dict_key_287 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_285 );
        Py_DECREF( tmp_dict_value_286 );
        Py_DECREF( tmp_list_element_17 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasnote" );
        exception_tb = NULL;

        exception_lineno = 729;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_17, tmp_dict_key_287, tmp_dict_value_287 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_285 );
        Py_DECREF( tmp_dict_value_286 );
        Py_DECREF( tmp_list_element_17 );

        exception_lineno = 729;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_286, 1, tmp_list_element_17 );
    tmp_called_name_113 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_113 == NULL ))
    {
        tmp_called_name_113 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_113 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_285 );
        Py_DECREF( tmp_dict_value_286 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 728;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_148 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_args_element_name_148 == NULL ))
    {
        tmp_args_element_name_148 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_args_element_name_148 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_285 );
        Py_DECREF( tmp_dict_value_286 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 728;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_149 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_149 == NULL ))
    {
        tmp_args_element_name_149 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_149 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_285 );
        Py_DECREF( tmp_dict_value_286 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 728;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 728;
    {
        PyObject *call_args[] = { tmp_args_element_name_148, tmp_args_element_name_149 };
        tmp_dict_key_286 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_113, call_args );
    }

    if ( tmp_dict_key_286 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_285 );
        Py_DECREF( tmp_dict_value_286 );

        exception_lineno = 728;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_285, tmp_dict_key_286, tmp_dict_value_286 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_285 );
        Py_DECREF( tmp_dict_value_286 );
        Py_DECREF( tmp_dict_key_286 );

        exception_lineno = 728;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_value_286 );
    Py_DECREF( tmp_dict_key_286 );
    tmp_dict_key_285 = const_str_plain_latexdocstropt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_285, tmp_dict_value_285 );
    Py_DECREF( tmp_dict_value_285 );
    tmp_dict_value_288 = _PyDict_NewPresized( 1 );
    tmp_dict_value_289 = PyList_New( 2 );
    tmp_list_element_18 = const_str_digest_17902227e562a5b10e9fdcc2c3c46bec;
    Py_INCREF( tmp_list_element_18 );
    PyList_SET_ITEM( tmp_dict_value_289, 0, tmp_list_element_18 );
    tmp_list_element_18 = _PyDict_NewPresized( 1 );
    tmp_dict_value_290 = const_str_digest_685077f1f38d82b206cc793ea02e01a1;
    tmp_dict_key_290 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_dict_key_290 == NULL ))
    {
        tmp_dict_key_290 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_dict_key_290 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_288 );
        Py_DECREF( tmp_dict_value_289 );
        Py_DECREF( tmp_list_element_18 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasnote" );
        exception_tb = NULL;

        exception_lineno = 731;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_18, tmp_dict_key_290, tmp_dict_value_290 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_288 );
        Py_DECREF( tmp_dict_value_289 );
        Py_DECREF( tmp_list_element_18 );

        exception_lineno = 731;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_289, 1, tmp_list_element_18 );
    tmp_called_name_114 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_114 == NULL ))
    {
        tmp_called_name_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_114 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_288 );
        Py_DECREF( tmp_dict_value_289 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 730;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_150 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_args_element_name_150 == NULL ))
    {
        tmp_args_element_name_150 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_args_element_name_150 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_288 );
        Py_DECREF( tmp_dict_value_289 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isrequired" );
        exception_tb = NULL;

        exception_lineno = 730;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_151 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_151 == NULL ))
    {
        tmp_args_element_name_151 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_151 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_288 );
        Py_DECREF( tmp_dict_value_289 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 730;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 730;
    {
        PyObject *call_args[] = { tmp_args_element_name_150, tmp_args_element_name_151 };
        tmp_dict_key_289 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_114, call_args );
    }

    if ( tmp_dict_key_289 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_288 );
        Py_DECREF( tmp_dict_value_289 );

        exception_lineno = 730;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_288, tmp_dict_key_289, tmp_dict_value_289 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_288 );
        Py_DECREF( tmp_dict_value_289 );
        Py_DECREF( tmp_dict_key_289 );

        exception_lineno = 730;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_value_289 );
    Py_DECREF( tmp_dict_key_289 );
    tmp_dict_key_288 = const_str_plain_latexdocstrreq;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_288, tmp_dict_value_288 );
    Py_DECREF( tmp_dict_value_288 );
    tmp_dict_value_291 = _PyDict_NewPresized( 1 );
    tmp_dict_value_292 = PyList_New( 2 );
    tmp_list_element_19 = const_str_digest_49f4bfda85db57bf51690dba3a8d81dd;
    Py_INCREF( tmp_list_element_19 );
    PyList_SET_ITEM( tmp_dict_value_292, 0, tmp_list_element_19 );
    tmp_list_element_19 = _PyDict_NewPresized( 2 );
    tmp_dict_value_293 = const_str_digest_685077f1f38d82b206cc793ea02e01a1;
    tmp_called_name_115 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_115 == NULL ))
    {
        tmp_called_name_115 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_115 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 733;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_152 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_args_element_name_152 == NULL ))
    {
        tmp_args_element_name_152 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_args_element_name_152 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasnote" );
        exception_tb = NULL;

        exception_lineno = 733;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_153 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_args_element_name_153 == NULL ))
    {
        tmp_args_element_name_153 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_args_element_name_153 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 733;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 733;
    {
        PyObject *call_args[] = { tmp_args_element_name_152, tmp_args_element_name_153 };
        tmp_dict_key_293 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_115, call_args );
    }

    if ( tmp_dict_key_293 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );

        exception_lineno = 733;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_19, tmp_dict_key_293, tmp_dict_value_293 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        Py_DECREF( tmp_dict_key_293 );

        exception_lineno = 733;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_293 );
    tmp_dict_value_294 = const_str_digest_1754ef5e5cfc66384eee38a13dd4d26c;
    tmp_called_name_116 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_116 == NULL ))
    {
        tmp_called_name_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_116 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 734;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_154 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_args_element_name_154 == NULL ))
    {
        tmp_args_element_name_154 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_args_element_name_154 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasnote" );
        exception_tb = NULL;

        exception_lineno = 734;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_155 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_155 == NULL ))
    {
        tmp_args_element_name_155 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_155 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 734;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 734;
    {
        PyObject *call_args[] = { tmp_args_element_name_154, tmp_args_element_name_155 };
        tmp_dict_key_294 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_116, call_args );
    }

    if ( tmp_dict_key_294 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );

        exception_lineno = 734;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_19, tmp_dict_key_294, tmp_dict_value_294 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        Py_DECREF( tmp_dict_key_294 );

        exception_lineno = 733;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_294 );
    PyList_SET_ITEM( tmp_dict_value_292, 1, tmp_list_element_19 );
    tmp_dict_key_292 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_292 == NULL ))
    {
        tmp_dict_key_292 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_292 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_out" );
        exception_tb = NULL;

        exception_lineno = 732;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_291, tmp_dict_key_292, tmp_dict_value_292 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );

        exception_lineno = 732;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_value_292 );
    tmp_dict_key_291 = const_str_plain_latexdocstrout;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_291, tmp_dict_value_291 );
    Py_DECREF( tmp_dict_value_291 );
    tmp_dict_value_295 = const_str_empty;
    tmp_dict_key_295 = const_str_plain_depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_295, tmp_dict_value_295 );
    PyList_SET_ITEM( tmp_assign_source_90, 2, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_296 = const_str_digest_d065d82fc9f51ae43f4b8db6651be301;
    tmp_dict_key_296 = const_str_plain_kwlist;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_296, tmp_dict_value_296 );
    tmp_dict_value_297 = const_str_digest_9fce729b393d78d2d76cbe9aec8d0e74;
    tmp_dict_key_297 = const_str_plain_docsign;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_297, tmp_dict_value_297 );
    tmp_called_name_117 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_117 == NULL ))
    {
        tmp_called_name_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_117 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 741;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_156 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_156 == NULL ))
    {
        tmp_args_element_name_156 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_156 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 741;
        goto frame_exception_exit_1;
    }

    tmp_called_name_118 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_118 == NULL ))
    {
        tmp_called_name_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_118 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 741;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_158 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_args_element_name_158 == NULL ))
    {
        tmp_args_element_name_158 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_args_element_name_158 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 741;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 741;
    {
        PyObject *call_args[] = { tmp_args_element_name_158 };
        tmp_args_element_name_157 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_118, call_args );
    }

    if ( tmp_args_element_name_157 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 741;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 741;
    {
        PyObject *call_args[] = { tmp_args_element_name_156, tmp_args_element_name_157 };
        tmp_dict_value_298 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_117, call_args );
    }

    Py_DECREF( tmp_args_element_name_157 );
    if ( tmp_dict_value_298 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 741;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_298 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_298, tmp_dict_value_298 );
    Py_DECREF( tmp_dict_value_298 );
    PyList_SET_ITEM( tmp_assign_source_90, 3, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 4 );
    tmp_dict_value_299 = const_str_digest_d065d82fc9f51ae43f4b8db6651be301;
    tmp_dict_key_299 = const_str_plain_kwlistopt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_299, tmp_dict_value_299 );
    tmp_dict_value_300 = const_str_digest_6002d8c1f65ca339b0204f2c0395caf2;
    tmp_dict_key_300 = const_str_plain_docsignopt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_300, tmp_dict_value_300 );
    tmp_dict_value_301 = const_str_digest_9fce729b393d78d2d76cbe9aec8d0e74;
    tmp_dict_key_301 = const_str_plain_docsignoptshort;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_301, tmp_dict_value_301 );
    tmp_called_name_119 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_119 == NULL ))
    {
        tmp_called_name_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_119 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 747;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_159 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_159 == NULL ))
    {
        tmp_args_element_name_159 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_159 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 747;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_160 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_args_element_name_160 == NULL ))
    {
        tmp_args_element_name_160 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_args_element_name_160 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 747;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 747;
    {
        PyObject *call_args[] = { tmp_args_element_name_159, tmp_args_element_name_160 };
        tmp_dict_value_302 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_119, call_args );
    }

    if ( tmp_dict_value_302 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 747;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_302 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_302, tmp_dict_value_302 );
    Py_DECREF( tmp_dict_value_302 );
    PyList_SET_ITEM( tmp_assign_source_90, 4, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_303 = const_str_digest_5e7d869da782af1421d1abc2296a84fd;
    tmp_dict_key_303 = const_str_plain_docreturn;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_303, tmp_dict_value_303 );
    tmp_dict_value_304 = const_str_digest_ba6df2cca25e244289fd58a116476aaa;
    tmp_dict_key_304 = const_str_plain_returnformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_304, tmp_dict_value_304 );
    tmp_dict_value_305 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_value_305 == NULL ))
    {
        tmp_dict_value_305 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_value_305 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_out" );
        exception_tb = NULL;

        exception_lineno = 753;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_305 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_305, tmp_dict_value_305 );
    PyList_SET_ITEM( tmp_assign_source_90, 5, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 18 );
    tmp_dict_value_306 = _PyDict_NewPresized( 1 );
    tmp_dict_value_307 = const_str_digest_f2b8e8c1719fcee60c4e7b5e4eb1f6d0;
    tmp_dict_key_307 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_307 == NULL ))
    {
        tmp_dict_key_307 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_307 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_306 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 757;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_306, tmp_dict_key_307, tmp_dict_value_307 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_306 );

        exception_lineno = 757;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_306 = const_str_plain_docsignxa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_306, tmp_dict_value_306 );
    Py_DECREF( tmp_dict_value_306 );
    tmp_dict_value_308 = _PyDict_NewPresized( 1 );
    tmp_dict_value_309 = const_str_digest_25e4729fdbfcd617a477e2c1623c74da;
    tmp_dict_key_309 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_309 == NULL ))
    {
        tmp_dict_key_309 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_309 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_308 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 758;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_308, tmp_dict_key_309, tmp_dict_value_309 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_308 );

        exception_lineno = 758;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_308 = const_str_plain_docsignxashort;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_308, tmp_dict_value_308 );
    Py_DECREF( tmp_dict_value_308 );
    tmp_dict_value_310 = _PyDict_NewPresized( 1 );
    tmp_dict_value_311 = const_str_digest_1d1217104e20c84be3d61679a5272d17;
    tmp_dict_key_311 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_311 == NULL ))
    {
        tmp_dict_key_311 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_311 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_310 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 759;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_310, tmp_dict_key_311, tmp_dict_value_311 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_310 );

        exception_lineno = 759;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_310 = const_str_plain_docstropt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_310, tmp_dict_value_310 );
    Py_DECREF( tmp_dict_value_310 );
    tmp_dict_value_312 = const_str_digest_c3d060677e97d1e4eb3742c0a4b516c2;
    tmp_dict_key_312 = const_str_plain_docstrcbs;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_312, tmp_dict_value_312 );
    tmp_dict_value_313 = const_str_digest_17bcb58e75e5d8bce33ae36b2bf1b62d;
    tmp_dict_key_313 = const_str_plain_latexdocstrcbs;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_313, tmp_dict_value_313 );
    tmp_dict_value_314 = _PyDict_NewPresized( 1 );
    tmp_dict_value_315 = const_str_digest_ed8324cdd58a5f11071d24d180e25fba;
    tmp_dict_key_315 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_315 == NULL ))
    {
        tmp_dict_key_315 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_315 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_314 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 762;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_314, tmp_dict_key_315, tmp_dict_value_315 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_314 );

        exception_lineno = 762;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_314 = const_str_plain_latexdocstropt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_314, tmp_dict_value_314 );
    Py_DECREF( tmp_dict_value_314 );
    tmp_dict_value_316 = PyList_New( 5 );
    tmp_list_element_20 = const_str_digest_a60174a114848d728a7bac00cb12b7d4;
    Py_INCREF( tmp_list_element_20 );
    PyList_SET_ITEM( tmp_dict_value_316, 0, tmp_list_element_20 );
    tmp_list_element_20 = const_str_digest_8f4a6ebd219b92c5b2fe5a6636dc1e65;
    Py_INCREF( tmp_list_element_20 );
    PyList_SET_ITEM( tmp_dict_value_316, 1, tmp_list_element_20 );
    tmp_list_element_20 = const_str_digest_71af71dc0b26aad8d87ceab249f8ba1b;
    Py_INCREF( tmp_list_element_20 );
    PyList_SET_ITEM( tmp_dict_value_316, 2, tmp_list_element_20 );
    tmp_list_element_20 = const_str_digest_2c0998a53b872b9217a70a4214626264;
    Py_INCREF( tmp_list_element_20 );
    PyList_SET_ITEM( tmp_dict_value_316, 3, tmp_list_element_20 );
    tmp_list_element_20 = _PyDict_NewPresized( 1 );
    tmp_dict_value_317 = const_str_digest_7d26dd93dbe102ee8b81db081a6361f0;
    tmp_called_name_120 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_120 == NULL ))
    {
        tmp_called_name_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_120 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_316 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 767;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_161 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_callback );

    if (unlikely( tmp_args_element_name_161 == NULL ))
    {
        tmp_args_element_name_161 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_callback );
    }

    if ( tmp_args_element_name_161 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_316 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_callback" );
        exception_tb = NULL;

        exception_lineno = 767;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 767;
    {
        PyObject *call_args[] = { tmp_args_element_name_161 };
        tmp_dict_key_317 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_120, call_args );
    }

    if ( tmp_dict_key_317 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_316 );
        Py_DECREF( tmp_list_element_20 );

        exception_lineno = 767;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_20, tmp_dict_key_317, tmp_dict_value_317 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_316 );
        Py_DECREF( tmp_list_element_20 );
        Py_DECREF( tmp_dict_key_317 );

        exception_lineno = 767;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_317 );
    PyList_SET_ITEM( tmp_dict_value_316, 4, tmp_list_element_20 );
    tmp_dict_key_316 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_316, tmp_dict_value_316 );
    Py_DECREF( tmp_dict_value_316 );
    tmp_dict_value_318 = _PyDict_NewPresized( 1 );
    tmp_dict_value_319 = const_str_digest_ae43d06c73b4fbd5c298de60127d721d;
    tmp_dict_key_319 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_319 == NULL ))
    {
        tmp_dict_key_319 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_319 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_318 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 770;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_318, tmp_dict_key_319, tmp_dict_value_319 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_318 );

        exception_lineno = 770;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_318 = const_str_plain_kwlistxa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_318, tmp_dict_value_318 );
    Py_DECREF( tmp_dict_value_318 );
    tmp_dict_value_320 = _PyDict_NewPresized( 1 );
    tmp_dict_value_321 = const_str_plain_O;
    tmp_dict_key_321 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_321 == NULL ))
    {
        tmp_dict_key_321 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_321 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_320 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isrequired" );
        exception_tb = NULL;

        exception_lineno = 771;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_320, tmp_dict_key_321, tmp_dict_value_321 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_320 );

        exception_lineno = 771;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_320 = const_str_plain_argformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_320, tmp_dict_value_320 );
    Py_DECREF( tmp_dict_value_320 );
    tmp_dict_value_322 = _PyDict_NewPresized( 1 );
    tmp_dict_value_323 = const_str_plain_O;
    tmp_dict_key_323 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_323 == NULL ))
    {
        tmp_dict_key_323 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_323 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_322 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 772;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_322, tmp_dict_key_323, tmp_dict_value_323 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_322 );

        exception_lineno = 772;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_322 = const_str_plain_keyformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_322, tmp_dict_value_322 );
    Py_DECREF( tmp_dict_value_322 );
    tmp_dict_value_324 = _PyDict_NewPresized( 1 );
    tmp_dict_value_325 = const_str_digest_a7864ec8dd41aab3bc7b2abc67720e65;
    tmp_dict_key_325 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_325 == NULL ))
    {
        tmp_dict_key_325 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_325 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_324 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 773;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_324, tmp_dict_key_325, tmp_dict_value_325 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_324 );

        exception_lineno = 773;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_324 = const_str_plain_xaformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_324, tmp_dict_value_324 );
    Py_DECREF( tmp_dict_value_324 );
    tmp_dict_value_326 = _PyDict_NewPresized( 1 );
    tmp_dict_value_327 = const_str_digest_7c37896c780e69c4def0a3d853f193f1;
    tmp_dict_key_327 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_327 == NULL ))
    {
        tmp_dict_key_327 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_327 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_326 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isrequired" );
        exception_tb = NULL;

        exception_lineno = 774;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_326, tmp_dict_key_327, tmp_dict_value_327 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_326 );

        exception_lineno = 774;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_326 = const_str_plain_args_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_326, tmp_dict_value_326 );
    Py_DECREF( tmp_dict_value_326 );
    tmp_dict_value_328 = _PyDict_NewPresized( 1 );
    tmp_dict_value_329 = const_str_digest_7c37896c780e69c4def0a3d853f193f1;
    tmp_dict_key_329 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_329 == NULL ))
    {
        tmp_dict_key_329 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_329 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_328 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 775;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_328, tmp_dict_key_329, tmp_dict_value_329 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_328 );

        exception_lineno = 775;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_328 = const_str_plain_keys_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_328, tmp_dict_value_328 );
    Py_DECREF( tmp_dict_value_328 );
    tmp_dict_value_330 = const_str_digest_0ec129680246017f27a2269f24523dbb;
    tmp_dict_key_330 = const_str_plain_keys_xa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_330, tmp_dict_value_330 );
    tmp_dict_value_331 = const_str_digest_79ad26fe7b8e008519c2537938b503e9;
    tmp_dict_key_331 = const_str_plain_setjmpbuf;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_331, tmp_dict_value_331 );
    tmp_dict_value_332 = _PyDict_NewPresized( 1 );
    tmp_dict_value_333 = const_str_digest_d3a44657679a3e652a4d721177ebd2a1;
    tmp_called_name_121 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_121 == NULL ))
    {
        tmp_called_name_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_121 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_332 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 778;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_162 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_callback );

    if (unlikely( tmp_args_element_name_162 == NULL ))
    {
        tmp_args_element_name_162 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_callback );
    }

    if ( tmp_args_element_name_162 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_332 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_callback" );
        exception_tb = NULL;

        exception_lineno = 778;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 778;
    {
        PyObject *call_args[] = { tmp_args_element_name_162 };
        tmp_dict_key_333 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_121, call_args );
    }

    if ( tmp_dict_key_333 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_332 );

        exception_lineno = 778;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_332, tmp_dict_key_333, tmp_dict_value_333 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_332 );
        Py_DECREF( tmp_dict_key_333 );

        exception_lineno = 778;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_333 );
    tmp_dict_key_332 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_332, tmp_dict_value_332 );
    Py_DECREF( tmp_dict_value_332 );
    tmp_dict_value_334 = LIST_COPY( const_list_917626a5cab86448639269d43350330f_list );
    tmp_dict_key_334 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_334, tmp_dict_value_334 );
    Py_DECREF( tmp_dict_value_334 );
    tmp_dict_value_335 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isexternal );

    if (unlikely( tmp_dict_value_335 == NULL ))
    {
        tmp_dict_value_335 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isexternal );
    }

    if ( tmp_dict_value_335 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isexternal" );
        exception_tb = NULL;

        exception_lineno = 780;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_335 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_335, tmp_dict_value_335 );
    PyList_SET_ITEM( tmp_assign_source_90, 6, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_336 = PyList_New( 5 );
    tmp_list_element_21 = _PyDict_NewPresized( 1 );
    tmp_dict_value_337 = const_str_digest_b72c98396d6b7d6bb9cbbbefd832fdb3;
    tmp_called_name_122 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_122 == NULL ))
    {
        tmp_called_name_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_122 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 783;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_163 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_callback );

    if (unlikely( tmp_args_element_name_163 == NULL ))
    {
        tmp_args_element_name_163 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_callback );
    }

    if ( tmp_args_element_name_163 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_callback" );
        exception_tb = NULL;

        exception_lineno = 783;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 783;
    {
        PyObject *call_args[] = { tmp_args_element_name_163 };
        tmp_dict_key_337 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_122, call_args );
    }

    if ( tmp_dict_key_337 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );

        exception_lineno = 783;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_21, tmp_dict_key_337, tmp_dict_value_337 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        Py_DECREF( tmp_dict_key_337 );

        exception_lineno = 783;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_337 );
    PyList_SET_ITEM( tmp_dict_value_336, 0, tmp_list_element_21 );
    tmp_list_element_21 = _PyDict_NewPresized( 1 );
    tmp_dict_value_338 = const_str_digest_d5bb8fcff9f6c488a0e6b16adb0537fe;
    tmp_dict_key_338 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_callback );

    if (unlikely( tmp_dict_key_338 == NULL ))
    {
        tmp_dict_key_338 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_callback );
    }

    if ( tmp_dict_key_338 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_callback" );
        exception_tb = NULL;

        exception_lineno = 789;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_21, tmp_dict_key_338, tmp_dict_value_338 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );

        exception_lineno = 789;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_336, 1, tmp_list_element_21 );
    tmp_list_element_21 = const_str_digest_121fa8c0a7f221c891dc8822fac5fdd1;
    Py_INCREF( tmp_list_element_21 );
    PyList_SET_ITEM( tmp_dict_value_336, 2, tmp_list_element_21 );
    tmp_list_element_21 = _PyDict_NewPresized( 1 );
    tmp_dict_value_339 = PyList_New( 2 );
    tmp_list_element_22 = const_str_digest_7ab7fdc0f90c620e6cb6b3d34ad64258;
    Py_INCREF( tmp_list_element_22 );
    PyList_SET_ITEM( tmp_dict_value_339, 0, tmp_list_element_22 );
    tmp_list_element_22 = _PyDict_NewPresized( 1 );
    tmp_dict_value_340 = const_str_digest_c0d6e5feecfa16c4a5e5c5506cf94dee;
    tmp_called_name_123 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_123 == NULL ))
    {
        tmp_called_name_123 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_123 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        Py_DECREF( tmp_dict_value_339 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_164 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_callback );

    if (unlikely( tmp_args_element_name_164 == NULL ))
    {
        tmp_args_element_name_164 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_callback );
    }

    if ( tmp_args_element_name_164 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        Py_DECREF( tmp_dict_value_339 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_callback" );
        exception_tb = NULL;

        exception_lineno = 820;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 820;
    {
        PyObject *call_args[] = { tmp_args_element_name_164 };
        tmp_dict_key_340 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_123, call_args );
    }

    if ( tmp_dict_key_340 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        Py_DECREF( tmp_dict_value_339 );
        Py_DECREF( tmp_list_element_22 );

        exception_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_22, tmp_dict_key_340, tmp_dict_value_340 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        Py_DECREF( tmp_dict_value_339 );
        Py_DECREF( tmp_list_element_22 );
        Py_DECREF( tmp_dict_key_340 );

        exception_lineno = 820;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_340 );
    PyList_SET_ITEM( tmp_dict_value_339, 1, tmp_list_element_22 );
    tmp_dict_key_339 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_339 == NULL ))
    {
        tmp_dict_key_339 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_339 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        Py_DECREF( tmp_dict_value_339 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 817;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_21, tmp_dict_key_339, tmp_dict_value_339 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        Py_DECREF( tmp_dict_value_339 );

        exception_lineno = 817;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_value_339 );
    PyList_SET_ITEM( tmp_dict_value_336, 3, tmp_list_element_21 );
    tmp_list_element_21 = const_str_digest_19c89b1adeb69ece88b14d6273aa8ca8;
    Py_INCREF( tmp_list_element_21 );
    PyList_SET_ITEM( tmp_dict_value_336, 4, tmp_list_element_21 );
    tmp_dict_key_336 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_336, tmp_dict_value_336 );
    Py_DECREF( tmp_dict_value_336 );
    tmp_dict_value_341 = const_str_digest_0c04797528ac79a29ab7bb1842a844da;
    tmp_dict_key_341 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_341, tmp_dict_value_341 );
    tmp_dict_value_342 = LIST_COPY( const_list_str_plain_SWAP_str_plain_create_cb_arglist_list );
    tmp_dict_key_342 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_342, tmp_dict_value_342 );
    Py_DECREF( tmp_dict_value_342 );
    tmp_dict_value_343 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isexternal );

    if (unlikely( tmp_dict_value_343 == NULL ))
    {
        tmp_dict_value_343 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isexternal );
    }

    if ( tmp_dict_value_343 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isexternal" );
        exception_tb = NULL;

        exception_lineno = 837;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_343 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_343, tmp_dict_value_343 );
    tmp_dict_value_344 = const_str_empty;
    tmp_dict_key_344 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_344, tmp_dict_value_344 );
    PyList_SET_ITEM( tmp_assign_source_90, 7, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_345 = const_str_digest_47726514eddf542ce57be98491d6745b;
    tmp_dict_key_345 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_345, tmp_dict_value_345 );
    tmp_dict_value_346 = _PyDict_NewPresized( 1 );
    tmp_dict_value_347 = const_str_digest_e9feacad3ffc7d40ca7fa991c347ae8e;
    tmp_dict_key_347 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_347 == NULL ))
    {
        tmp_dict_key_347 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_347 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_346 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_346, tmp_dict_key_347, tmp_dict_value_347 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_346 );

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_346 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_346, tmp_dict_value_346 );
    Py_DECREF( tmp_dict_value_346 );
    tmp_dict_value_348 = _PyDict_NewPresized( 2 );
    tmp_dict_value_349 = const_str_digest_9fce729b393d78d2d76cbe9aec8d0e74;
    tmp_dict_key_349 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_dict_key_349 == NULL ))
    {
        tmp_dict_key_349 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_dict_key_349 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_348 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 844;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_348, tmp_dict_key_349, tmp_dict_value_349 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_348 );

        exception_lineno = 844;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_350 = const_str_digest_9b25501ee14be4762851524d43f59638;
    tmp_called_name_124 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_124 == NULL ))
    {
        tmp_called_name_124 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_124 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_348 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 844;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_165 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_165 == NULL ))
    {
        tmp_args_element_name_165 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_165 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_348 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 844;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 844;
    {
        PyObject *call_args[] = { tmp_args_element_name_165 };
        tmp_dict_key_350 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_124, call_args );
    }

    if ( tmp_dict_key_350 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_348 );

        exception_lineno = 844;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_348, tmp_dict_key_350, tmp_dict_value_350 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_348 );
        Py_DECREF( tmp_dict_key_350 );

        exception_lineno = 844;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_350 );
    tmp_dict_key_348 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_348, tmp_dict_value_348 );
    Py_DECREF( tmp_dict_value_348 );
    tmp_dict_value_351 = _PyDict_NewPresized( 1 );
    tmp_dict_value_352 = const_str_digest_ec5c056bc2faa2f16a4f48f4884353b9;
    tmp_dict_key_352 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_352 == NULL ))
    {
        tmp_dict_key_352 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_352 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_351 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_out" );
        exception_tb = NULL;

        exception_lineno = 845;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_351, tmp_dict_key_352, tmp_dict_value_352 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_351 );

        exception_lineno = 845;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_351 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_351, tmp_dict_value_351 );
    Py_DECREF( tmp_dict_value_351 );
    tmp_called_name_125 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_125 == NULL ))
    {
        tmp_called_name_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_125 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 846;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_166 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_args_element_name_166 == NULL ))
    {
        tmp_args_element_name_166 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_args_element_name_166 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isscalar" );
        exception_tb = NULL;

        exception_lineno = 846;
        goto frame_exception_exit_1;
    }

    tmp_called_name_126 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_126 == NULL ))
    {
        tmp_called_name_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_126 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 846;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_168 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_168 == NULL ))
    {
        tmp_args_element_name_168 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_168 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 846;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 846;
    {
        PyObject *call_args[] = { tmp_args_element_name_168 };
        tmp_args_element_name_167 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_126, call_args );
    }

    if ( tmp_args_element_name_167 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 846;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 846;
    {
        PyObject *call_args[] = { tmp_args_element_name_166, tmp_args_element_name_167 };
        tmp_dict_value_353 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_125, call_args );
    }

    Py_DECREF( tmp_args_element_name_167 );
    if ( tmp_dict_value_353 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 846;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_353 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_353, tmp_dict_value_353 );
    Py_DECREF( tmp_dict_value_353 );
    PyList_SET_ITEM( tmp_assign_source_90, 8, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 2 );
    tmp_dict_value_354 = _PyDict_NewPresized( 1 );
    tmp_dict_value_355 = const_str_digest_7b560b9c887c6f93f8fb76cb77937f62;
    tmp_dict_key_355 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_355 == NULL ))
    {
        tmp_dict_key_355 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_355 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_354 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 848;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_354, tmp_dict_key_355, tmp_dict_value_355 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_354 );

        exception_lineno = 848;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_354 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_354, tmp_dict_value_354 );
    Py_DECREF( tmp_dict_value_354 );
    tmp_called_name_127 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_127 == NULL ))
    {
        tmp_called_name_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_127 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 849;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_169 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_args_element_name_169 == NULL ))
    {
        tmp_args_element_name_169 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_args_element_name_169 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isscalar" );
        exception_tb = NULL;

        exception_lineno = 849;
        goto frame_exception_exit_1;
    }

    tmp_called_name_128 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_128 == NULL ))
    {
        tmp_called_name_128 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_128 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 849;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_171 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_171 == NULL ))
    {
        tmp_args_element_name_171 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_171 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 849;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 849;
    {
        PyObject *call_args[] = { tmp_args_element_name_171 };
        tmp_args_element_name_170 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_128, call_args );
    }

    if ( tmp_args_element_name_170 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 849;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 849;
    {
        PyObject *call_args[] = { tmp_args_element_name_169, tmp_args_element_name_170 };
        tmp_dict_value_356 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_127, call_args );
    }

    Py_DECREF( tmp_args_element_name_170 );
    if ( tmp_dict_value_356 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 849;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_356 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_356, tmp_dict_value_356 );
    Py_DECREF( tmp_dict_value_356 );
    PyList_SET_ITEM( tmp_assign_source_90, 9, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 9 );
    tmp_dict_value_357 = const_str_digest_a60174a114848d728a7bac00cb12b7d4;
    tmp_dict_key_357 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_357, tmp_dict_value_357 );
    tmp_dict_value_358 = _PyDict_NewPresized( 1 );
    tmp_dict_value_359 = const_str_plain_O;
    tmp_dict_key_359 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_359 == NULL ))
    {
        tmp_dict_key_359 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_359 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_358 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isrequired" );
        exception_tb = NULL;

        exception_lineno = 852;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_358, tmp_dict_key_359, tmp_dict_value_359 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_358 );

        exception_lineno = 852;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_358 = const_str_plain_argformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_358, tmp_dict_value_358 );
    Py_DECREF( tmp_dict_value_358 );
    tmp_dict_value_360 = _PyDict_NewPresized( 1 );
    tmp_dict_value_361 = const_str_plain_O;
    tmp_dict_key_361 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_361 == NULL ))
    {
        tmp_dict_key_361 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_361 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_360 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 853;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_360, tmp_dict_key_361, tmp_dict_value_361 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_360 );

        exception_lineno = 853;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_360 = const_str_plain_keyformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_360, tmp_dict_value_360 );
    Py_DECREF( tmp_dict_value_360 );
    tmp_dict_value_362 = _PyDict_NewPresized( 1 );
    tmp_dict_value_363 = const_str_digest_7c37896c780e69c4def0a3d853f193f1;
    tmp_dict_key_363 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_363 == NULL ))
    {
        tmp_dict_key_363 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_363 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_362 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isrequired" );
        exception_tb = NULL;

        exception_lineno = 854;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_362, tmp_dict_key_363, tmp_dict_value_363 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_362 );

        exception_lineno = 854;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_362 = const_str_plain_args_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_362, tmp_dict_value_362 );
    Py_DECREF( tmp_dict_value_362 );
    tmp_dict_value_364 = _PyDict_NewPresized( 1 );
    tmp_dict_value_365 = const_str_digest_7c37896c780e69c4def0a3d853f193f1;
    tmp_dict_key_365 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_365 == NULL ))
    {
        tmp_dict_key_365 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_365 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_364 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 855;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_364, tmp_dict_key_365, tmp_dict_value_365 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_364 );

        exception_lineno = 855;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_364 = const_str_plain_keys_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_364, tmp_dict_value_364 );
    Py_DECREF( tmp_dict_value_364 );
    tmp_dict_value_366 = _PyDict_NewPresized( 1 );
    tmp_dict_value_367 = const_str_digest_6264e53bf9ed98be0a17c99db19ce952;
    tmp_dict_key_367 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_367 == NULL ))
    {
        tmp_dict_key_367 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_367 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_366 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_inout" );
        exception_tb = NULL;

        exception_lineno = 856;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_366, tmp_dict_key_367, tmp_dict_value_367 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_366 );

        exception_lineno = 856;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_366 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_366, tmp_dict_value_366 );
    Py_DECREF( tmp_dict_value_366 );
    tmp_dict_value_368 = _PyDict_NewPresized( 1 );
    tmp_dict_value_369 = const_str_digest_9162ef44a28670aee2da45cf26457013;
    tmp_dict_key_369 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_369 == NULL ))
    {
        tmp_dict_key_369 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_369 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_368 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_inout" );
        exception_tb = NULL;

        exception_lineno = 859;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_368, tmp_dict_key_369, tmp_dict_value_369 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_368 );

        exception_lineno = 859;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_368 = const_str_plain_closepyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_368, tmp_dict_value_368 );
    Py_DECREF( tmp_dict_value_368 );
    tmp_dict_value_370 = _PyDict_NewPresized( 1 );
    tmp_dict_value_371 = const_str_digest_be1bbd329187a280a32151e905c5811c;
    tmp_dict_key_371 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_371 == NULL ))
    {
        tmp_dict_key_371 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_371 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_370 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_inout" );
        exception_tb = NULL;

        exception_lineno = 860;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_370, tmp_dict_key_371, tmp_dict_value_371 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_370 );

        exception_lineno = 860;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_370 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_370, tmp_dict_value_370 );
    Py_DECREF( tmp_dict_value_370 );
    tmp_called_name_129 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_129 == NULL ))
    {
        tmp_called_name_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_129 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 861;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_172 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_args_element_name_172 == NULL ))
    {
        tmp_args_element_name_172 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_args_element_name_172 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isscalar" );
        exception_tb = NULL;

        exception_lineno = 861;
        goto frame_exception_exit_1;
    }

    tmp_called_name_130 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_130 == NULL ))
    {
        tmp_called_name_130 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_130 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 861;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_174 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_174 == NULL ))
    {
        tmp_args_element_name_174 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_174 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 861;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 861;
    {
        PyObject *call_args[] = { tmp_args_element_name_174 };
        tmp_args_element_name_173 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_130, call_args );
    }

    if ( tmp_args_element_name_173 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 861;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_175 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_175 == NULL ))
    {
        tmp_args_element_name_175 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_175 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_args_element_name_173 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 861;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 861;
    {
        PyObject *call_args[] = { tmp_args_element_name_172, tmp_args_element_name_173, tmp_args_element_name_175 };
        tmp_dict_value_372 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_129, call_args );
    }

    Py_DECREF( tmp_args_element_name_173 );
    if ( tmp_dict_value_372 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 861;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_372 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_372, tmp_dict_value_372 );
    Py_DECREF( tmp_dict_value_372 );
    PyList_SET_ITEM( tmp_assign_source_90, 10, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_373 = PyList_New( 4 );
    tmp_list_element_23 = _PyDict_NewPresized( 2 );
    tmp_dict_value_374 = const_str_digest_1872273f673a454c879c2bca8fa0f177;
    tmp_dict_key_374 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_374 == NULL ))
    {
        tmp_dict_key_374 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_374 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 879;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_23, tmp_dict_key_374, tmp_dict_value_374 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );

        exception_lineno = 879;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_375 = const_str_empty;
    tmp_dict_key_375 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_23, tmp_dict_key_375, tmp_dict_value_375 );
    PyList_SET_ITEM( tmp_dict_value_373, 0, tmp_list_element_23 );
    tmp_list_element_23 = _PyDict_NewPresized( 2 );
    tmp_dict_value_376 = const_str_digest_fb0ac3319e29a078566c27883e0fcda1;
    tmp_called_name_131 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_131 == NULL ))
    {
        tmp_called_name_131 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_131 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 881;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_176 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_args_element_name_176 == NULL ))
    {
        tmp_args_element_name_176 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_args_element_name_176 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 881;
        goto frame_exception_exit_1;
    }

    tmp_called_name_132 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_132 == NULL ))
    {
        tmp_called_name_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_132 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 881;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_178 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_args_element_name_178 == NULL ))
    {
        tmp_args_element_name_178 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_args_element_name_178 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 881;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 881;
    {
        PyObject *call_args[] = { tmp_args_element_name_178 };
        tmp_args_element_name_177 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_132, call_args );
    }

    if ( tmp_args_element_name_177 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );

        exception_lineno = 881;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 881;
    {
        PyObject *call_args[] = { tmp_args_element_name_176, tmp_args_element_name_177 };
        tmp_dict_key_376 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_131, call_args );
    }

    Py_DECREF( tmp_args_element_name_177 );
    if ( tmp_dict_key_376 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );

        exception_lineno = 881;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_23, tmp_dict_key_376, tmp_dict_value_376 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        Py_DECREF( tmp_dict_key_376 );

        exception_lineno = 881;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_376 );
    tmp_dict_value_377 = const_str_empty;
    tmp_dict_key_377 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_23, tmp_dict_key_377, tmp_dict_value_377 );
    PyList_SET_ITEM( tmp_dict_value_373, 1, tmp_list_element_23 );
    tmp_list_element_23 = _PyDict_NewPresized( 1 );
    tmp_dict_value_378 = const_str_digest_04f4c2c2c1e779d6eb09065af8957943;
    tmp_called_name_133 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_133 == NULL ))
    {
        tmp_called_name_133 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_133 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 883;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_179 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islogical );

    if (unlikely( tmp_args_element_name_179 == NULL ))
    {
        tmp_args_element_name_179 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islogical );
    }

    if ( tmp_args_element_name_179 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "islogical" );
        exception_tb = NULL;

        exception_lineno = 883;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 883;
    {
        PyObject *call_args[] = { tmp_args_element_name_179 };
        tmp_dict_key_378 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_133, call_args );
    }

    if ( tmp_dict_key_378 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );

        exception_lineno = 883;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_23, tmp_dict_key_378, tmp_dict_value_378 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        Py_DECREF( tmp_dict_key_378 );

        exception_lineno = 883;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_378 );
    PyList_SET_ITEM( tmp_dict_value_373, 2, tmp_list_element_23 );
    tmp_list_element_23 = _PyDict_NewPresized( 1 );
    tmp_dict_value_379 = const_str_digest_f681ff7c9e722de570a0e4171ce853b0;
    tmp_dict_key_379 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islogical );

    if (unlikely( tmp_dict_key_379 == NULL ))
    {
        tmp_dict_key_379 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islogical );
    }

    if ( tmp_dict_key_379 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "islogical" );
        exception_tb = NULL;

        exception_lineno = 886;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_23, tmp_dict_key_379, tmp_dict_value_379 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );

        exception_lineno = 886;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_373, 3, tmp_list_element_23 );
    tmp_dict_key_373 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_373, tmp_dict_value_373 );
    Py_DECREF( tmp_dict_value_373 );
    tmp_dict_value_380 = const_str_digest_a71697e2d65b2aee7f8a386bcf6560c6;
    tmp_dict_key_380 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_380, tmp_dict_value_380 );
    tmp_dict_value_381 = _PyDict_NewPresized( 1 );
    tmp_dict_value_382 = const_str_digest_388fb92bc2e3d76b8d35eb704c2fd40e;
    tmp_called_name_134 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_134 == NULL ))
    {
        tmp_called_name_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_134 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_381 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 892;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_180 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islogical );

    if (unlikely( tmp_args_element_name_180 == NULL ))
    {
        tmp_args_element_name_180 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islogical );
    }

    if ( tmp_args_element_name_180 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_381 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "islogical" );
        exception_tb = NULL;

        exception_lineno = 892;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 892;
    {
        PyObject *call_args[] = { tmp_args_element_name_180 };
        tmp_dict_key_382 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_134, call_args );
    }

    if ( tmp_dict_key_382 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_381 );

        exception_lineno = 892;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_381, tmp_dict_key_382, tmp_dict_value_382 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_381 );
        Py_DECREF( tmp_dict_key_382 );

        exception_lineno = 892;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_382 );
    tmp_dict_key_381 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_381, tmp_dict_value_381 );
    Py_DECREF( tmp_dict_value_381 );
    tmp_called_name_135 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_135 == NULL ))
    {
        tmp_called_name_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_135 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 893;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_181 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_args_element_name_181 == NULL ))
    {
        tmp_args_element_name_181 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_args_element_name_181 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isscalar" );
        exception_tb = NULL;

        exception_lineno = 893;
        goto frame_exception_exit_1;
    }

    tmp_called_name_136 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_136 == NULL ))
    {
        tmp_called_name_136 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_136 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 893;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_183 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_183 == NULL ))
    {
        tmp_args_element_name_183 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_183 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 893;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 893;
    {
        PyObject *call_args[] = { tmp_args_element_name_183 };
        tmp_args_element_name_182 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_136, call_args );
    }

    if ( tmp_args_element_name_182 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 893;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_184 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_184 == NULL ))
    {
        tmp_args_element_name_184 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_184 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_args_element_name_182 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 893;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 893;
    {
        PyObject *call_args[] = { tmp_args_element_name_181, tmp_args_element_name_182, tmp_args_element_name_184 };
        tmp_dict_value_383 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_135, call_args );
    }

    Py_DECREF( tmp_args_element_name_182 );
    if ( tmp_dict_value_383 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 893;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_383 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_383, tmp_dict_value_383 );
    Py_DECREF( tmp_dict_value_383 );
    tmp_dict_value_384 = const_str_empty;
    tmp_dict_key_384 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_384, tmp_dict_value_384 );
    PyList_SET_ITEM( tmp_assign_source_90, 11, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 4 );
    tmp_dict_value_385 = _PyDict_NewPresized( 1 );
    tmp_dict_value_386 = const_str_digest_e6104d35553a035097ec1423ebaa6291;
    tmp_dict_key_386 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_386 == NULL ))
    {
        tmp_dict_key_386 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_386 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_385 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 896;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_385, tmp_dict_key_386, tmp_dict_value_386 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_385 );

        exception_lineno = 896;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_385 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_385, tmp_dict_value_385 );
    Py_DECREF( tmp_dict_value_385 );
    tmp_dict_value_387 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_typedef_need_dict );

    if (unlikely( tmp_dict_value_387 == NULL ))
    {
        tmp_dict_value_387 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_typedef_need_dict );
    }

    if ( tmp_dict_value_387 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "typedef_need_dict" );
        exception_tb = NULL;

        exception_lineno = 897;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_387 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_387, tmp_dict_value_387 );
    tmp_called_name_137 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_137 == NULL ))
    {
        tmp_called_name_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_137 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 898;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_185 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_args_element_name_185 == NULL ))
    {
        tmp_args_element_name_185 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_args_element_name_185 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isscalar" );
        exception_tb = NULL;

        exception_lineno = 898;
        goto frame_exception_exit_1;
    }

    tmp_called_name_138 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_138 == NULL ))
    {
        tmp_called_name_138 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_138 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 898;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_187 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_187 == NULL ))
    {
        tmp_args_element_name_187 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_187 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 898;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 898;
    {
        PyObject *call_args[] = { tmp_args_element_name_187 };
        tmp_args_element_name_186 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_138, call_args );
    }

    if ( tmp_args_element_name_186 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 898;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_188 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_args_element_name_188 == NULL ))
    {
        tmp_args_element_name_188 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_args_element_name_188 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_args_element_name_186 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 898;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 898;
    {
        PyObject *call_args[] = { tmp_args_element_name_185, tmp_args_element_name_186, tmp_args_element_name_188 };
        tmp_dict_value_388 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_137, call_args );
    }

    Py_DECREF( tmp_args_element_name_186 );
    if ( tmp_dict_value_388 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 898;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_388 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_388, tmp_dict_value_388 );
    Py_DECREF( tmp_dict_value_388 );
    tmp_dict_value_389 = const_str_empty;
    tmp_dict_key_389 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_389, tmp_dict_value_389 );
    PyList_SET_ITEM( tmp_assign_source_90, 12, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_390 = _PyDict_NewPresized( 1 );
    tmp_dict_value_391 = const_str_digest_e9feacad3ffc7d40ca7fa991c347ae8e;
    tmp_dict_key_391 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_391 == NULL ))
    {
        tmp_dict_key_391 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_391 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_390 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 901;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_390, tmp_dict_key_391, tmp_dict_value_391 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_390 );

        exception_lineno = 901;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_390 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_390, tmp_dict_value_390 );
    Py_DECREF( tmp_dict_value_390 );
    tmp_called_name_139 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_139 == NULL ))
    {
        tmp_called_name_139 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_139 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 902;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_189 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_args_element_name_189 == NULL ))
    {
        tmp_args_element_name_189 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_args_element_name_189 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isscalar" );
        exception_tb = NULL;

        exception_lineno = 902;
        goto frame_exception_exit_1;
    }

    tmp_called_name_140 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_140 == NULL ))
    {
        tmp_called_name_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_140 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 902;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_191 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_191 == NULL ))
    {
        tmp_args_element_name_191 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_191 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 902;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 902;
    {
        PyObject *call_args[] = { tmp_args_element_name_191 };
        tmp_args_element_name_190 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_140, call_args );
    }

    if ( tmp_args_element_name_190 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 902;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 902;
    {
        PyObject *call_args[] = { tmp_args_element_name_189, tmp_args_element_name_190 };
        tmp_dict_value_392 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_139, call_args );
    }

    Py_DECREF( tmp_args_element_name_190 );
    if ( tmp_dict_value_392 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 902;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_392 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_392, tmp_dict_value_392 );
    Py_DECREF( tmp_dict_value_392 );
    tmp_dict_value_393 = const_str_empty;
    tmp_dict_key_393 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_393, tmp_dict_value_393 );
    PyList_SET_ITEM( tmp_assign_source_90, 13, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_394 = const_str_digest_5b7ccc32e52fccf534ab08cff75fe54e;
    tmp_dict_key_394 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_394, tmp_dict_value_394 );
    tmp_dict_value_395 = _PyDict_NewPresized( 2 );
    tmp_dict_value_396 = const_str_digest_9fce729b393d78d2d76cbe9aec8d0e74;
    tmp_dict_key_396 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_dict_key_396 == NULL ))
    {
        tmp_dict_key_396 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_dict_key_396 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_395 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 908;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_395, tmp_dict_key_396, tmp_dict_value_396 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_395 );

        exception_lineno = 908;
        goto frame_exception_exit_1;
    }
    tmp_dict_value_397 = const_str_digest_9b25501ee14be4762851524d43f59638;
    tmp_called_name_141 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_141 == NULL ))
    {
        tmp_called_name_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_141 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_395 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 908;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_192 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_args_element_name_192 == NULL ))
    {
        tmp_args_element_name_192 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_args_element_name_192 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_395 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_c" );
        exception_tb = NULL;

        exception_lineno = 908;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 908;
    {
        PyObject *call_args[] = { tmp_args_element_name_192 };
        tmp_dict_key_397 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_141, call_args );
    }

    if ( tmp_dict_key_397 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_395 );

        exception_lineno = 908;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_dict_value_395, tmp_dict_key_397, tmp_dict_value_397 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_395 );
        Py_DECREF( tmp_dict_key_397 );

        exception_lineno = 908;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_397 );
    tmp_dict_key_395 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_395, tmp_dict_value_395 );
    Py_DECREF( tmp_dict_value_395 );
    tmp_dict_value_398 = _PyDict_NewPresized( 1 );
    tmp_dict_value_399 = const_str_digest_8ccc89ec0e61b203c6e566738d08b055;
    tmp_dict_key_399 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_399 == NULL ))
    {
        tmp_dict_key_399 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_399 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_398 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 909;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_398, tmp_dict_key_399, tmp_dict_value_399 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_398 );

        exception_lineno = 909;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_398 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_398, tmp_dict_value_398 );
    Py_DECREF( tmp_dict_value_398 );
    tmp_dict_value_400 = _PyDict_NewPresized( 1 );
    tmp_dict_value_401 = const_str_digest_fbc04200dab383be8fc5e9dc341549b2;
    tmp_dict_key_401 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_401 == NULL ))
    {
        tmp_dict_key_401 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_401 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_400 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_out" );
        exception_tb = NULL;

        exception_lineno = 910;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_400, tmp_dict_key_401, tmp_dict_value_401 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_400 );

        exception_lineno = 910;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_400 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_400, tmp_dict_value_400 );
    Py_DECREF( tmp_dict_value_400 );
    tmp_dict_value_402 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_dict_value_402 == NULL ))
    {
        tmp_dict_value_402 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_dict_value_402 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 911;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_402 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_402, tmp_dict_value_402 );
    PyList_SET_ITEM( tmp_assign_source_90, 14, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 9 );
    tmp_dict_value_403 = const_str_digest_a60174a114848d728a7bac00cb12b7d4;
    tmp_dict_key_403 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_403, tmp_dict_value_403 );
    tmp_dict_value_404 = _PyDict_NewPresized( 1 );
    tmp_dict_value_405 = const_str_plain_O;
    tmp_dict_key_405 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_405 == NULL ))
    {
        tmp_dict_key_405 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_405 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_404 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isrequired" );
        exception_tb = NULL;

        exception_lineno = 914;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_404, tmp_dict_key_405, tmp_dict_value_405 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_404 );

        exception_lineno = 914;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_404 = const_str_plain_argformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_404, tmp_dict_value_404 );
    Py_DECREF( tmp_dict_value_404 );
    tmp_dict_value_406 = _PyDict_NewPresized( 1 );
    tmp_dict_value_407 = const_str_plain_O;
    tmp_dict_key_407 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_407 == NULL ))
    {
        tmp_dict_key_407 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_407 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_406 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 915;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_406, tmp_dict_key_407, tmp_dict_value_407 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_406 );

        exception_lineno = 915;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_406 = const_str_plain_keyformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_406, tmp_dict_value_406 );
    Py_DECREF( tmp_dict_value_406 );
    tmp_dict_value_408 = _PyDict_NewPresized( 1 );
    tmp_dict_value_409 = const_str_digest_7c37896c780e69c4def0a3d853f193f1;
    tmp_dict_key_409 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_409 == NULL ))
    {
        tmp_dict_key_409 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_409 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_408 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isrequired" );
        exception_tb = NULL;

        exception_lineno = 916;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_408, tmp_dict_key_409, tmp_dict_value_409 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_408 );

        exception_lineno = 916;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_408 = const_str_plain_args_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_408, tmp_dict_value_408 );
    Py_DECREF( tmp_dict_value_408 );
    tmp_dict_value_410 = _PyDict_NewPresized( 1 );
    tmp_dict_value_411 = const_str_digest_7c37896c780e69c4def0a3d853f193f1;
    tmp_dict_key_411 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_411 == NULL ))
    {
        tmp_dict_key_411 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_411 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_410 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 917;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_410, tmp_dict_key_411, tmp_dict_value_411 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_410 );

        exception_lineno = 917;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_410 = const_str_plain_keys_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_410, tmp_dict_value_410 );
    Py_DECREF( tmp_dict_value_410 );
    tmp_dict_value_412 = _PyDict_NewPresized( 1 );
    tmp_dict_value_413 = const_str_digest_be1bbd329187a280a32151e905c5811c;
    tmp_dict_key_413 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_413 == NULL ))
    {
        tmp_dict_key_413 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_413 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_412 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_inout" );
        exception_tb = NULL;

        exception_lineno = 918;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_412, tmp_dict_key_413, tmp_dict_value_413 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_412 );

        exception_lineno = 918;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_412 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_412, tmp_dict_value_412 );
    Py_DECREF( tmp_dict_value_412 );
    tmp_dict_value_414 = _PyDict_NewPresized( 1 );
    tmp_dict_value_415 = const_str_digest_0101752f19a62566c8b5930aa92e5adc;
    tmp_dict_key_415 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_415 == NULL ))
    {
        tmp_dict_key_415 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_415 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_414 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_inout" );
        exception_tb = NULL;

        exception_lineno = 919;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_414, tmp_dict_key_415, tmp_dict_value_415 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_414 );

        exception_lineno = 919;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_414 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_414, tmp_dict_value_414 );
    Py_DECREF( tmp_dict_value_414 );
    tmp_dict_value_416 = _PyDict_NewPresized( 1 );
    tmp_dict_value_417 = const_str_digest_cd5e665f895ef7c8eb453ced6fc763f4;
    tmp_dict_key_417 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_417 == NULL ))
    {
        tmp_dict_key_417 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_417 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_416 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_inout" );
        exception_tb = NULL;

        exception_lineno = 922;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_416, tmp_dict_key_417, tmp_dict_value_417 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_416 );

        exception_lineno = 922;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_416 = const_str_plain_closepyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_416, tmp_dict_value_416 );
    Py_DECREF( tmp_dict_value_416 );
    tmp_called_name_142 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_142 == NULL ))
    {
        tmp_called_name_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_142 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 923;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_193 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_193 == NULL ))
    {
        tmp_args_element_name_193 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_193 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 923;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_194 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_194 == NULL ))
    {
        tmp_args_element_name_194 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_194 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 923;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 923;
    {
        PyObject *call_args[] = { tmp_args_element_name_193, tmp_args_element_name_194 };
        tmp_dict_value_418 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_142, call_args );
    }

    if ( tmp_dict_value_418 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 923;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_418 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_418, tmp_dict_value_418 );
    Py_DECREF( tmp_dict_value_418 );
    PyList_SET_ITEM( tmp_assign_source_90, 15, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_419 = PyList_New( 3 );
    tmp_list_element_24 = _PyDict_NewPresized( 1 );
    tmp_dict_value_420 = const_str_digest_935a9d3d7dcb4ad3becad3cdc81f7573;
    tmp_dict_key_420 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_420 == NULL ))
    {
        tmp_dict_key_420 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_420 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 925;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_24, tmp_dict_key_420, tmp_dict_value_420 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );

        exception_lineno = 925;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_419, 0, tmp_list_element_24 );
    tmp_list_element_24 = _PyDict_NewPresized( 1 );
    tmp_dict_value_421 = const_str_digest_fb0ac3319e29a078566c27883e0fcda1;
    tmp_called_name_143 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_143 == NULL ))
    {
        tmp_called_name_143 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_143 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 926;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_195 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_args_element_name_195 == NULL ))
    {
        tmp_args_element_name_195 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_args_element_name_195 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 926;
        goto frame_exception_exit_1;
    }

    tmp_called_name_144 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_144 == NULL ))
    {
        tmp_called_name_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_144 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 926;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_197 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_args_element_name_197 == NULL ))
    {
        tmp_args_element_name_197 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_args_element_name_197 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 926;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 926;
    {
        PyObject *call_args[] = { tmp_args_element_name_197 };
        tmp_args_element_name_196 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_144, call_args );
    }

    if ( tmp_args_element_name_196 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );

        exception_lineno = 926;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 926;
    {
        PyObject *call_args[] = { tmp_args_element_name_195, tmp_args_element_name_196 };
        tmp_dict_key_421 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_143, call_args );
    }

    Py_DECREF( tmp_args_element_name_196 );
    if ( tmp_dict_key_421 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );

        exception_lineno = 926;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_24, tmp_dict_key_421, tmp_dict_value_421 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );
        Py_DECREF( tmp_dict_key_421 );

        exception_lineno = 926;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_421 );
    PyList_SET_ITEM( tmp_dict_value_419, 1, tmp_list_element_24 );
    tmp_list_element_24 = const_str_digest_04f4c2c2c1e779d6eb09065af8957943;
    Py_INCREF( tmp_list_element_24 );
    PyList_SET_ITEM( tmp_dict_value_419, 2, tmp_list_element_24 );
    tmp_dict_key_419 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_419, tmp_dict_value_419 );
    Py_DECREF( tmp_dict_value_419 );
    tmp_dict_value_422 = const_str_digest_7e7874092dc43d7a6c694d90bfa71c65;
    tmp_dict_key_422 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_422, tmp_dict_value_422 );
    tmp_dict_value_423 = LIST_COPY( const_list_str_digest_388fb92bc2e3d76b8d35eb704c2fd40e_list );
    tmp_dict_key_423 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_423, tmp_dict_value_423 );
    Py_DECREF( tmp_dict_value_423 );
    tmp_called_name_145 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_145 == NULL ))
    {
        tmp_called_name_145 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_145 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 932;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_198 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_198 == NULL ))
    {
        tmp_args_element_name_198 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_198 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 932;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_199 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_199 == NULL ))
    {
        tmp_args_element_name_199 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_199 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 932;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 932;
    {
        PyObject *call_args[] = { tmp_args_element_name_198, tmp_args_element_name_199 };
        tmp_dict_value_424 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_145, call_args );
    }

    if ( tmp_dict_value_424 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 932;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_424 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_424, tmp_dict_value_424 );
    Py_DECREF( tmp_dict_value_424 );
    tmp_dict_value_425 = const_str_empty;
    tmp_dict_key_425 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_425, tmp_dict_value_425 );
    PyList_SET_ITEM( tmp_assign_source_90, 16, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 2 );
    tmp_dict_value_426 = _PyDict_NewPresized( 1 );
    tmp_dict_value_427 = const_str_digest_a60174a114848d728a7bac00cb12b7d4;
    tmp_dict_key_427 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_427 == NULL ))
    {
        tmp_dict_key_427 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_427 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_426 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_out" );
        exception_tb = NULL;

        exception_lineno = 935;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_426, tmp_dict_key_427, tmp_dict_value_427 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_426 );

        exception_lineno = 935;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_426 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_426, tmp_dict_value_426 );
    Py_DECREF( tmp_dict_value_426 );
    tmp_called_name_146 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_146 == NULL ))
    {
        tmp_called_name_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_146 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 936;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_200 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_200 == NULL ))
    {
        tmp_args_element_name_200 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_200 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 936;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_201 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_args_element_name_201 == NULL ))
    {
        tmp_args_element_name_201 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_args_element_name_201 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 936;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 936;
    {
        PyObject *call_args[] = { tmp_args_element_name_200, tmp_args_element_name_201 };
        tmp_dict_value_428 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_146, call_args );
    }

    if ( tmp_dict_value_428 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 936;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_428 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_428, tmp_dict_value_428 );
    Py_DECREF( tmp_dict_value_428 );
    PyList_SET_ITEM( tmp_assign_source_90, 17, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_429 = _PyDict_NewPresized( 1 );
    tmp_dict_value_430 = const_str_digest_12736df3358c55f9c88205a9d038e3cd;
    tmp_dict_key_430 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_430 == NULL ))
    {
        tmp_dict_key_430 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_430 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_429 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 938;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_429, tmp_dict_key_430, tmp_dict_value_430 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_429 );

        exception_lineno = 938;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_429 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_429, tmp_dict_value_429 );
    Py_DECREF( tmp_dict_value_429 );
    tmp_called_name_147 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_147 == NULL ))
    {
        tmp_called_name_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_147 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 939;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_202 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_202 == NULL ))
    {
        tmp_args_element_name_202 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_202 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 939;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_203 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_args_element_name_203 == NULL ))
    {
        tmp_args_element_name_203 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_args_element_name_203 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 939;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 939;
    {
        PyObject *call_args[] = { tmp_args_element_name_202, tmp_args_element_name_203 };
        tmp_dict_value_431 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_147, call_args );
    }

    if ( tmp_dict_value_431 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 939;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_431 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_431, tmp_dict_value_431 );
    Py_DECREF( tmp_dict_value_431 );
    tmp_dict_value_432 = const_str_empty;
    tmp_dict_key_432 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_432, tmp_dict_value_432 );
    PyList_SET_ITEM( tmp_assign_source_90, 18, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_433 = _PyDict_NewPresized( 1 );
    tmp_dict_value_434 = const_str_digest_63f9320fb96629303000a101f4359c54;
    tmp_dict_key_434 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_434 == NULL ))
    {
        tmp_dict_key_434 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_434 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_433 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_out" );
        exception_tb = NULL;

        exception_lineno = 942;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_433, tmp_dict_key_434, tmp_dict_value_434 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_433 );

        exception_lineno = 942;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_433 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_433, tmp_dict_value_433 );
    Py_DECREF( tmp_dict_value_433 );
    tmp_dict_value_435 = LIST_COPY( const_list_str_digest_d1ebec83b319c7a5ff58a0b1ba8c192e_list );
    tmp_dict_key_435 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_435, tmp_dict_value_435 );
    Py_DECREF( tmp_dict_value_435 );
    tmp_dict_value_436 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_dict_value_436 == NULL ))
    {
        tmp_dict_value_436 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_dict_value_436 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 944;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_436 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_436, tmp_dict_value_436 );
    PyList_SET_ITEM( tmp_assign_source_90, 19, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_437 = _PyDict_NewPresized( 1 );
    tmp_dict_value_438 = const_str_digest_8ccc89ec0e61b203c6e566738d08b055;
    tmp_dict_key_438 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_438 == NULL ))
    {
        tmp_dict_key_438 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_438 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_437 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 946;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_437, tmp_dict_key_438, tmp_dict_value_438 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_437 );

        exception_lineno = 946;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_437 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_437, tmp_dict_value_437 );
    Py_DECREF( tmp_dict_value_437 );
    tmp_dict_value_439 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_dict_value_439 == NULL ))
    {
        tmp_dict_value_439 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_dict_value_439 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 947;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_439 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_439, tmp_dict_value_439 );
    tmp_dict_value_440 = const_str_empty;
    tmp_dict_key_440 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_440, tmp_dict_value_440 );
    PyList_SET_ITEM( tmp_assign_source_90, 20, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 7 );
    tmp_dict_value_441 = LIST_COPY( const_list_83502bc928309bee706fd67dc708d8b5_list );
    tmp_dict_key_441 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_441, tmp_dict_value_441 );
    Py_DECREF( tmp_dict_value_441 );
    tmp_dict_value_442 = const_str_digest_9fce729b393d78d2d76cbe9aec8d0e74;
    tmp_dict_key_442 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_442, tmp_dict_value_442 );
    tmp_dict_value_443 = const_str_digest_b38ced1fe60c6e49953b60674230c84f;
    tmp_dict_key_443 = const_str_plain_callfortranappend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_443, tmp_dict_value_443 );
    tmp_dict_value_444 = _PyDict_NewPresized( 1 );
    tmp_dict_value_445 = const_str_digest_8a1d6a3e81f79db2268e6ff0852d7a55;
    tmp_dict_key_445 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_445 == NULL ))
    {
        tmp_dict_key_445 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_445 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_444 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 957;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_444, tmp_dict_key_445, tmp_dict_value_445 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_444 );

        exception_lineno = 957;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_444 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_444, tmp_dict_value_444 );
    Py_DECREF( tmp_dict_value_444 );
    tmp_dict_value_446 = _PyDict_NewPresized( 1 );
    tmp_dict_value_447 = const_str_digest_ec5c056bc2faa2f16a4f48f4884353b9;
    tmp_dict_key_447 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_447 == NULL ))
    {
        tmp_dict_key_447 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_447 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_446 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_out" );
        exception_tb = NULL;

        exception_lineno = 958;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_446, tmp_dict_key_447, tmp_dict_value_447 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_446 );

        exception_lineno = 958;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_446 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_446, tmp_dict_value_446 );
    Py_DECREF( tmp_dict_value_446 );
    tmp_dict_value_448 = LIST_COPY( const_list_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34_list );
    tmp_dict_key_448 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_448, tmp_dict_value_448 );
    Py_DECREF( tmp_dict_value_448 );
    tmp_dict_value_449 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_dict_value_449 == NULL ))
    {
        tmp_dict_value_449 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_dict_value_449 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstring" );
        exception_tb = NULL;

        exception_lineno = 960;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_449 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_449, tmp_dict_value_449 );
    PyList_SET_ITEM( tmp_assign_source_90, 21, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_450 = const_str_digest_43c80c0d52153b0bc6c55b6b1858bbaa;
    tmp_dict_key_450 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_450, tmp_dict_value_450 );
    tmp_dict_value_451 = const_str_digest_beb345b44a602b66219bb743770c3d15;
    tmp_dict_key_451 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_451, tmp_dict_value_451 );
    tmp_dict_value_452 = LIST_COPY( const_list_0a418c59c89f9fccd0e4ae0f11838976_list );
    tmp_dict_key_452 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_452, tmp_dict_value_452 );
    Py_DECREF( tmp_dict_value_452 );
    tmp_dict_value_453 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_dict_value_453 == NULL ))
    {
        tmp_dict_value_453 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_dict_value_453 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstring" );
        exception_tb = NULL;

        exception_lineno = 970;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_453 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_453, tmp_dict_value_453 );
    tmp_dict_value_454 = const_str_empty;
    tmp_dict_key_454 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_454, tmp_dict_value_454 );
    PyList_SET_ITEM( tmp_assign_source_90, 22, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 8 );
    tmp_dict_value_455 = _PyDict_NewPresized( 1 );
    tmp_dict_value_456 = const_str_plain_O;
    tmp_dict_key_456 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_456 == NULL ))
    {
        tmp_dict_key_456 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_456 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_455 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isrequired" );
        exception_tb = NULL;

        exception_lineno = 973;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_455, tmp_dict_key_456, tmp_dict_value_456 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_455 );

        exception_lineno = 973;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_455 = const_str_plain_argformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_455, tmp_dict_value_455 );
    Py_DECREF( tmp_dict_value_455 );
    tmp_dict_value_457 = _PyDict_NewPresized( 1 );
    tmp_dict_value_458 = const_str_plain_O;
    tmp_dict_key_458 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_458 == NULL ))
    {
        tmp_dict_key_458 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_458 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_457 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 974;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_457, tmp_dict_key_458, tmp_dict_value_458 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_457 );

        exception_lineno = 974;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_457 = const_str_plain_keyformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_457, tmp_dict_value_457 );
    Py_DECREF( tmp_dict_value_457 );
    tmp_dict_value_459 = _PyDict_NewPresized( 1 );
    tmp_dict_value_460 = const_str_digest_7c37896c780e69c4def0a3d853f193f1;
    tmp_dict_key_460 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_460 == NULL ))
    {
        tmp_dict_key_460 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_460 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_459 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isrequired" );
        exception_tb = NULL;

        exception_lineno = 975;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_459, tmp_dict_key_460, tmp_dict_value_460 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_459 );

        exception_lineno = 975;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_459 = const_str_plain_args_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_459, tmp_dict_value_459 );
    Py_DECREF( tmp_dict_value_459 );
    tmp_dict_value_461 = _PyDict_NewPresized( 1 );
    tmp_dict_value_462 = const_str_digest_7c37896c780e69c4def0a3d853f193f1;
    tmp_dict_key_462 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_462 == NULL ))
    {
        tmp_dict_key_462 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_462 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_461 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 976;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_461, tmp_dict_key_462, tmp_dict_value_462 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_461 );

        exception_lineno = 976;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_461 = const_str_plain_keys_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_461, tmp_dict_value_461 );
    Py_DECREF( tmp_dict_value_461 );
    tmp_dict_value_463 = _PyDict_NewPresized( 1 );
    tmp_dict_value_464 = const_str_digest_f48c9699284b5eab9a8d58a5db521367;
    tmp_dict_key_464 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_464 == NULL ))
    {
        tmp_dict_key_464 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_464 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_463 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_inout" );
        exception_tb = NULL;

        exception_lineno = 977;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_463, tmp_dict_key_464, tmp_dict_value_464 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_463 );

        exception_lineno = 977;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_463 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_463, tmp_dict_value_463 );
    Py_DECREF( tmp_dict_value_463 );
    tmp_dict_value_465 = _PyDict_NewPresized( 1 );
    tmp_dict_value_466 = const_str_digest_9162ef44a28670aee2da45cf26457013;
    tmp_dict_key_466 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_466 == NULL ))
    {
        tmp_dict_key_466 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_466 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_465 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_inout" );
        exception_tb = NULL;

        exception_lineno = 980;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_465, tmp_dict_key_466, tmp_dict_value_466 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_465 );

        exception_lineno = 980;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_465 = const_str_plain_closepyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_465, tmp_dict_value_465 );
    Py_DECREF( tmp_dict_value_465 );
    tmp_dict_value_467 = _PyDict_NewPresized( 1 );
    tmp_dict_value_468 = const_str_digest_be1bbd329187a280a32151e905c5811c;
    tmp_dict_key_468 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_468 == NULL ))
    {
        tmp_dict_key_468 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_468 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_467 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_inout" );
        exception_tb = NULL;

        exception_lineno = 981;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_467, tmp_dict_key_468, tmp_dict_value_468 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_467 );

        exception_lineno = 981;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_467 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_467, tmp_dict_value_467 );
    Py_DECREF( tmp_dict_value_467 );
    tmp_called_name_148 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_148 == NULL ))
    {
        tmp_called_name_148 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_148 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 982;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_204 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_args_element_name_204 == NULL ))
    {
        tmp_args_element_name_204 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_args_element_name_204 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstring" );
        exception_tb = NULL;

        exception_lineno = 982;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_205 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_205 == NULL ))
    {
        tmp_args_element_name_205 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_205 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 982;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 982;
    {
        PyObject *call_args[] = { tmp_args_element_name_204, tmp_args_element_name_205 };
        tmp_dict_value_469 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_148, call_args );
    }

    if ( tmp_dict_value_469 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 982;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_469 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_469, tmp_dict_value_469 );
    Py_DECREF( tmp_dict_value_469 );
    PyList_SET_ITEM( tmp_assign_source_90, 23, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 1 );
    tmp_called_name_149 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_149 == NULL ))
    {
        tmp_called_name_149 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_149 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 984;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_206 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_args_element_name_206 == NULL ))
    {
        tmp_args_element_name_206 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_args_element_name_206 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstring" );
        exception_tb = NULL;

        exception_lineno = 984;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_207 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_args_element_name_207 == NULL ))
    {
        tmp_args_element_name_207 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_args_element_name_207 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 984;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 984;
    {
        PyObject *call_args[] = { tmp_args_element_name_206, tmp_args_element_name_207 };
        tmp_dict_value_470 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_149, call_args );
    }

    if ( tmp_dict_value_470 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 984;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_470 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_470, tmp_dict_value_470 );
    Py_DECREF( tmp_dict_value_470 );
    PyList_SET_ITEM( tmp_assign_source_90, 24, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_471 = _PyDict_NewPresized( 1 );
    tmp_dict_value_472 = const_str_digest_8a1d6a3e81f79db2268e6ff0852d7a55;
    tmp_dict_key_472 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_472 == NULL ))
    {
        tmp_dict_key_472 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_472 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_471 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 986;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_471, tmp_dict_key_472, tmp_dict_value_472 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_471 );

        exception_lineno = 986;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_471 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_471, tmp_dict_value_471 );
    Py_DECREF( tmp_dict_value_471 );
    tmp_dict_value_473 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_dict_value_473 == NULL ))
    {
        tmp_dict_value_473 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_dict_value_473 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstring" );
        exception_tb = NULL;

        exception_lineno = 987;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_473 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_473, tmp_dict_value_473 );
    tmp_dict_value_474 = const_str_empty;
    tmp_dict_key_474 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_474, tmp_dict_value_474 );
    PyList_SET_ITEM( tmp_assign_source_90, 25, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_475 = LIST_COPY( const_list_a6fb55f787096d197a68d518259f030c_list );
    tmp_dict_key_475 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_475, tmp_dict_value_475 );
    Py_DECREF( tmp_dict_value_475 );
    tmp_dict_value_476 = const_str_digest_9fce729b393d78d2d76cbe9aec8d0e74;
    tmp_dict_key_476 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_476, tmp_dict_value_476 );
    tmp_dict_value_477 = _PyDict_NewPresized( 1 );
    tmp_dict_value_478 = const_str_digest_28722724fa5171e5036e05c92447f918;
    tmp_dict_key_478 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_478 == NULL ))
    {
        tmp_dict_key_478 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_478 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_477 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_out" );
        exception_tb = NULL;

        exception_lineno = 999;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_477, tmp_dict_key_478, tmp_dict_value_478 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_477 );

        exception_lineno = 999;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_477 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_477, tmp_dict_value_477 );
    Py_DECREF( tmp_dict_value_477 );
    tmp_dict_value_479 = const_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34;
    tmp_dict_key_479 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_479, tmp_dict_value_479 );
    tmp_dict_value_480 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_dict_value_480 == NULL ))
    {
        tmp_dict_value_480 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_dict_value_480 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 1001;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_480 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_480, tmp_dict_value_480 );
    PyList_SET_ITEM( tmp_assign_source_90, 26, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 8 );
    tmp_dict_value_481 = const_str_digest_20a3807ace2c22a5b914be87d9d866f7;
    tmp_dict_key_481 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_481, tmp_dict_value_481 );
    tmp_dict_value_482 = const_str_digest_8fbf2e4eee7783460695f41dff730b42;
    tmp_dict_key_482 = const_str_plain_kwlistxa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_482, tmp_dict_value_482 );
    tmp_dict_value_483 = const_str_plain_i;
    tmp_dict_key_483 = const_str_plain_xaformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_483, tmp_dict_value_483 );
    tmp_dict_value_484 = const_str_digest_9774ec4c1bd3c4901e1c3fef5777de0b;
    tmp_dict_key_484 = const_str_plain_keys_xa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_484, tmp_dict_value_484 );
    tmp_dict_value_485 = const_str_digest_93f604e3dd7562d0f7b06a2fb41b3994;
    tmp_dict_key_485 = const_str_plain_docsignxa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_485, tmp_dict_value_485 );
    tmp_dict_value_486 = const_str_digest_a48893cf324000647f544daf37b32385;
    tmp_dict_key_486 = const_str_plain_docsignxashort;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_486, tmp_dict_value_486 );
    tmp_dict_value_487 = const_str_digest_3cc0372e2a4fb619e6863414a829c950;
    tmp_dict_key_487 = const_str_plain_docstropt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_487, tmp_dict_value_487 );
    tmp_called_name_150 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_150 == NULL ))
    {
        tmp_called_name_150 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_150 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 1010;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_208 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_args_element_name_208 == NULL ))
    {
        tmp_args_element_name_208 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_args_element_name_208 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 1010;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_209 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_overwrite );

    if (unlikely( tmp_args_element_name_209 == NULL ))
    {
        tmp_args_element_name_209 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_overwrite );
    }

    if ( tmp_args_element_name_209 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_overwrite" );
        exception_tb = NULL;

        exception_lineno = 1010;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1010;
    {
        PyObject *call_args[] = { tmp_args_element_name_208, tmp_args_element_name_209 };
        tmp_dict_value_488 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_150, call_args );
    }

    if ( tmp_dict_value_488 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 1010;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_488 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_488, tmp_dict_value_488 );
    Py_DECREF( tmp_dict_value_488 );
    PyList_SET_ITEM( tmp_assign_source_90, 27, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_489 = const_str_digest_c3337c5bb37e9aea6b2f4bdfd46c1465;
    tmp_dict_key_489 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_489, tmp_dict_value_489 );
    tmp_called_name_151 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_151 == NULL ))
    {
        tmp_called_name_151 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_151 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 1013;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_210 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_args_element_name_210 == NULL ))
    {
        tmp_args_element_name_210 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_args_element_name_210 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 1013;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_211 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_overwrite );

    if (unlikely( tmp_args_element_name_211 == NULL ))
    {
        tmp_args_element_name_211 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_overwrite );
    }

    if ( tmp_args_element_name_211 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_overwrite" );
        exception_tb = NULL;

        exception_lineno = 1013;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1013;
    {
        PyObject *call_args[] = { tmp_args_element_name_210, tmp_args_element_name_211 };
        tmp_dict_value_490 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_151, call_args );
    }

    if ( tmp_dict_value_490 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 1013;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_490 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_490, tmp_dict_value_490 );
    Py_DECREF( tmp_dict_value_490 );
    tmp_dict_value_491 = const_str_empty;
    tmp_dict_key_491 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_491, tmp_dict_value_491 );
    PyList_SET_ITEM( tmp_assign_source_90, 28, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 8 );
    tmp_dict_value_492 = const_str_digest_62a1a1ac115d9bf18b02ed37eef6a5f9;
    tmp_dict_key_492 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_492, tmp_dict_value_492 );
    tmp_dict_value_493 = const_str_digest_8fbf2e4eee7783460695f41dff730b42;
    tmp_dict_key_493 = const_str_plain_kwlistxa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_493, tmp_dict_value_493 );
    tmp_dict_value_494 = const_str_plain_i;
    tmp_dict_key_494 = const_str_plain_xaformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_494, tmp_dict_value_494 );
    tmp_dict_value_495 = const_str_digest_9774ec4c1bd3c4901e1c3fef5777de0b;
    tmp_dict_key_495 = const_str_plain_keys_xa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_495, tmp_dict_value_495 );
    tmp_dict_value_496 = const_str_digest_01daef0e26ca54c28969374339b40890;
    tmp_dict_key_496 = const_str_plain_docsignxa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_496, tmp_dict_value_496 );
    tmp_dict_value_497 = const_str_digest_a48893cf324000647f544daf37b32385;
    tmp_dict_key_497 = const_str_plain_docsignxashort;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_497, tmp_dict_value_497 );
    tmp_dict_value_498 = const_str_digest_cd86e09bc11753fb56a3ef851d5f64d3;
    tmp_dict_key_498 = const_str_plain_docstropt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_498, tmp_dict_value_498 );
    tmp_called_name_152 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_152 == NULL ))
    {
        tmp_called_name_152 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_152 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 1024;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_212 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_args_element_name_212 == NULL ))
    {
        tmp_args_element_name_212 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_args_element_name_212 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 1024;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_213 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_copy );

    if (unlikely( tmp_args_element_name_213 == NULL ))
    {
        tmp_args_element_name_213 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_copy );
    }

    if ( tmp_args_element_name_213 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_copy" );
        exception_tb = NULL;

        exception_lineno = 1024;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1024;
    {
        PyObject *call_args[] = { tmp_args_element_name_212, tmp_args_element_name_213 };
        tmp_dict_value_499 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_152, call_args );
    }

    if ( tmp_dict_value_499 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 1024;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_499 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_499, tmp_dict_value_499 );
    Py_DECREF( tmp_dict_value_499 );
    PyList_SET_ITEM( tmp_assign_source_90, 29, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_500 = const_str_digest_c3337c5bb37e9aea6b2f4bdfd46c1465;
    tmp_dict_key_500 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_500, tmp_dict_value_500 );
    tmp_called_name_153 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_153 == NULL ))
    {
        tmp_called_name_153 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_153 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 1027;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_214 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_args_element_name_214 == NULL ))
    {
        tmp_args_element_name_214 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_args_element_name_214 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 1027;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_215 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_copy );

    if (unlikely( tmp_args_element_name_215 == NULL ))
    {
        tmp_args_element_name_215 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_copy );
    }

    if ( tmp_args_element_name_215 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_copy" );
        exception_tb = NULL;

        exception_lineno = 1027;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1027;
    {
        PyObject *call_args[] = { tmp_args_element_name_214, tmp_args_element_name_215 };
        tmp_dict_value_501 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_153, call_args );
    }

    if ( tmp_dict_value_501 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 1027;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_501 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_501, tmp_dict_value_501 );
    Py_DECREF( tmp_dict_value_501 );
    tmp_dict_value_502 = const_str_empty;
    tmp_dict_key_502 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_502, tmp_dict_value_502 );
    PyList_SET_ITEM( tmp_assign_source_90, 30, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_503 = PyList_New( 2 );
    tmp_list_element_25 = _PyDict_NewPresized( 1 );
    tmp_dict_value_504 = const_str_plain_forcomb;
    tmp_dict_key_504 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_504 == NULL ))
    {
        tmp_dict_key_504 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_504 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_503 );
        Py_DECREF( tmp_list_element_25 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 1030;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_25, tmp_dict_key_504, tmp_dict_value_504 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_503 );
        Py_DECREF( tmp_list_element_25 );

        exception_lineno = 1030;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_503, 0, tmp_list_element_25 );
    tmp_list_element_25 = _PyDict_NewPresized( 1 );
    tmp_dict_value_505 = const_str_plain_CFUNCSMESS;
    tmp_dict_key_505 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_505 == NULL ))
    {
        tmp_dict_key_505 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_505 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_503 );
        Py_DECREF( tmp_list_element_25 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 1030;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_25, tmp_dict_key_505, tmp_dict_value_505 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_503 );
        Py_DECREF( tmp_list_element_25 );

        exception_lineno = 1030;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_503, 1, tmp_list_element_25 );
    tmp_dict_key_503 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_503, tmp_dict_value_503 );
    Py_DECREF( tmp_dict_value_503 );
    tmp_dict_value_506 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_dict_value_506 == NULL ))
    {
        tmp_dict_value_506 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_dict_value_506 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 1031;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_506 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_506, tmp_dict_value_506 );
    tmp_dict_value_507 = const_str_empty;
    tmp_dict_key_507 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_507, tmp_dict_value_507 );
    PyList_SET_ITEM( tmp_assign_source_90, 31, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 6 );
    tmp_dict_value_508 = const_str_digest_a60174a114848d728a7bac00cb12b7d4;
    tmp_dict_key_508 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_508, tmp_dict_value_508 );
    tmp_dict_value_509 = _PyDict_NewPresized( 1 );
    tmp_dict_value_510 = const_str_plain_O;
    tmp_dict_key_510 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_510 == NULL ))
    {
        tmp_dict_key_510 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_510 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_509 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isrequired" );
        exception_tb = NULL;

        exception_lineno = 1035;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_509, tmp_dict_key_510, tmp_dict_value_510 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_509 );

        exception_lineno = 1035;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_509 = const_str_plain_argformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_509, tmp_dict_value_509 );
    Py_DECREF( tmp_dict_value_509 );
    tmp_dict_value_511 = _PyDict_NewPresized( 1 );
    tmp_dict_value_512 = const_str_plain_O;
    tmp_dict_key_512 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_512 == NULL ))
    {
        tmp_dict_key_512 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_512 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_511 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 1036;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_511, tmp_dict_key_512, tmp_dict_value_512 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_511 );

        exception_lineno = 1036;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_511 = const_str_plain_keyformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_511, tmp_dict_value_511 );
    Py_DECREF( tmp_dict_value_511 );
    tmp_dict_value_513 = _PyDict_NewPresized( 1 );
    tmp_dict_value_514 = const_str_digest_7c37896c780e69c4def0a3d853f193f1;
    tmp_dict_key_514 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_514 == NULL ))
    {
        tmp_dict_key_514 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_514 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_513 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isrequired" );
        exception_tb = NULL;

        exception_lineno = 1037;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_513, tmp_dict_key_514, tmp_dict_value_514 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_513 );

        exception_lineno = 1037;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_513 = const_str_plain_args_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_513, tmp_dict_value_513 );
    Py_DECREF( tmp_dict_value_513 );
    tmp_dict_value_515 = _PyDict_NewPresized( 1 );
    tmp_dict_value_516 = const_str_digest_7c37896c780e69c4def0a3d853f193f1;
    tmp_dict_key_516 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_516 == NULL ))
    {
        tmp_dict_key_516 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_516 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_515 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isoptional" );
        exception_tb = NULL;

        exception_lineno = 1038;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_515, tmp_dict_key_516, tmp_dict_value_516 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_515 );

        exception_lineno = 1038;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_515 = const_str_plain_keys_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_515, tmp_dict_value_515 );
    Py_DECREF( tmp_dict_value_515 );
    tmp_called_name_154 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_154 == NULL ))
    {
        tmp_called_name_154 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_154 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 1039;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_216 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_args_element_name_216 == NULL ))
    {
        tmp_args_element_name_216 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_args_element_name_216 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 1039;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_217 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_217 == NULL ))
    {
        tmp_args_element_name_217 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_217 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 1039;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1039;
    {
        PyObject *call_args[] = { tmp_args_element_name_216, tmp_args_element_name_217 };
        tmp_dict_value_517 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_154, call_args );
    }

    if ( tmp_dict_value_517 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 1039;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_517 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_517, tmp_dict_value_517 );
    Py_DECREF( tmp_dict_value_517 );
    PyList_SET_ITEM( tmp_assign_source_90, 32, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 4 );
    tmp_dict_value_518 = PyList_New( 6 );
    tmp_list_element_26 = const_str_digest_69f24e9f0cf3c2a3ec814d04c9edfdf2;
    Py_INCREF( tmp_list_element_26 );
    PyList_SET_ITEM( tmp_dict_value_518, 0, tmp_list_element_26 );
    tmp_list_element_26 = const_str_digest_b36eba167a40a26a3820807615923d7e;
    Py_INCREF( tmp_list_element_26 );
    PyList_SET_ITEM( tmp_dict_value_518, 1, tmp_list_element_26 );
    tmp_list_element_26 = _PyDict_NewPresized( 1 );
    tmp_dict_value_519 = const_str_digest_77980ec1039787377cb2bd9237b0de43;
    tmp_dict_key_519 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_dict_key_519 == NULL ))
    {
        tmp_dict_key_519 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_dict_key_519 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 1043;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_26, tmp_dict_key_519, tmp_dict_value_519 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );

        exception_lineno = 1043;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_518, 2, tmp_list_element_26 );
    tmp_list_element_26 = _PyDict_NewPresized( 1 );
    tmp_dict_value_520 = const_str_digest_06b92084407c057d55dd07c236c4d566;
    tmp_dict_key_520 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_520 == NULL ))
    {
        tmp_dict_key_520 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_520 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 1045;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_26, tmp_dict_key_520, tmp_dict_value_520 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );

        exception_lineno = 1045;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_518, 3, tmp_list_element_26 );
    tmp_list_element_26 = const_str_digest_a5e9d3b21a92b143ef24eb6c172b949c;
    Py_INCREF( tmp_list_element_26 );
    PyList_SET_ITEM( tmp_dict_value_518, 4, tmp_list_element_26 );
    tmp_list_element_26 = _PyDict_NewPresized( 1 );
    tmp_dict_value_521 = PyList_New( 4 );
    tmp_list_element_27 = _PyDict_NewPresized( 1 );
    tmp_dict_value_522 = const_str_digest_f2caafda71f4c478cfe173963231fe37;
    tmp_dict_key_522 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_522 == NULL ))
    {
        tmp_dict_key_522 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_522 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        Py_DECREF( tmp_dict_value_521 );
        Py_DECREF( tmp_list_element_27 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 1055;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_27, tmp_dict_key_522, tmp_dict_value_522 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        Py_DECREF( tmp_dict_value_521 );
        Py_DECREF( tmp_list_element_27 );

        exception_lineno = 1055;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_521, 0, tmp_list_element_27 );
    tmp_list_element_27 = _PyDict_NewPresized( 1 );
    tmp_dict_value_523 = const_str_digest_c9903fbd55a8e7f7bbcf4a7ebb5c29f0;
    tmp_dict_key_523 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_dict_key_523 == NULL ))
    {
        tmp_dict_key_523 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_dict_key_523 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        Py_DECREF( tmp_dict_value_521 );
        Py_DECREF( tmp_list_element_27 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 1057;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_27, tmp_dict_key_523, tmp_dict_value_523 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        Py_DECREF( tmp_dict_value_521 );
        Py_DECREF( tmp_list_element_27 );

        exception_lineno = 1057;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_521, 1, tmp_list_element_27 );
    tmp_list_element_27 = _PyDict_NewPresized( 1 );
    tmp_dict_value_524 = const_str_digest_bc622957f475703ce5372fad3a11dd2a;
    tmp_dict_key_524 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_dict_key_524 == NULL ))
    {
        tmp_dict_key_524 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_dict_key_524 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        Py_DECREF( tmp_dict_value_521 );
        Py_DECREF( tmp_list_element_27 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexarray" );
        exception_tb = NULL;

        exception_lineno = 1058;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_27, tmp_dict_key_524, tmp_dict_value_524 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        Py_DECREF( tmp_dict_value_521 );
        Py_DECREF( tmp_list_element_27 );

        exception_lineno = 1058;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_521, 2, tmp_list_element_27 );
    tmp_list_element_27 = const_str_digest_53072a7b20febbca5aacd3d90ca0035b;
    Py_INCREF( tmp_list_element_27 );
    PyList_SET_ITEM( tmp_dict_value_521, 3, tmp_list_element_27 );
    tmp_dict_key_521 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_521 == NULL ))
    {
        tmp_dict_key_521 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_521 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        Py_DECREF( tmp_dict_value_521 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 1054;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_26, tmp_dict_key_521, tmp_dict_value_521 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        Py_DECREF( tmp_dict_value_521 );

        exception_lineno = 1054;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_value_521 );
    PyList_SET_ITEM( tmp_dict_value_518, 5, tmp_list_element_26 );
    tmp_dict_key_518 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_518, tmp_dict_value_518 );
    Py_DECREF( tmp_dict_value_518 );
    tmp_dict_value_525 = PyList_New( 4 );
    tmp_list_element_28 = const_str_digest_c478f6346eb5655aa8b63e42717f98d3;
    Py_INCREF( tmp_list_element_28 );
    PyList_SET_ITEM( tmp_dict_value_525, 0, tmp_list_element_28 );
    tmp_list_element_28 = _PyDict_NewPresized( 1 );
    tmp_dict_value_526 = const_str_digest_395a7e49a4a935a48f1bd9054ac302b4;
    tmp_called_name_155 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_155 == NULL ))
    {
        tmp_called_name_155 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_155 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 1075;
        goto frame_exception_exit_1;
    }

    tmp_called_name_156 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_name_156 == NULL ))
    {
        tmp_called_name_156 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_name_156 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_or" );
        exception_tb = NULL;

        exception_lineno = 1075;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_219 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_args_element_name_219 == NULL ))
    {
        tmp_args_element_name_219 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_args_element_name_219 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_out" );
        exception_tb = NULL;

        exception_lineno = 1075;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_220 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_args_element_name_220 == NULL ))
    {
        tmp_args_element_name_220 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_args_element_name_220 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 1075;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1075;
    {
        PyObject *call_args[] = { tmp_args_element_name_219, tmp_args_element_name_220 };
        tmp_args_element_name_218 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_156, call_args );
    }

    if ( tmp_args_element_name_218 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );

        exception_lineno = 1075;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 1075;
    {
        PyObject *call_args[] = { tmp_args_element_name_218 };
        tmp_dict_key_526 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_155, call_args );
    }

    Py_DECREF( tmp_args_element_name_218 );
    if ( tmp_dict_key_526 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );

        exception_lineno = 1075;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_28, tmp_dict_key_526, tmp_dict_value_526 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        Py_DECREF( tmp_dict_key_526 );

        exception_lineno = 1075;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_526 );
    PyList_SET_ITEM( tmp_dict_value_525, 1, tmp_list_element_28 );
    tmp_list_element_28 = _PyDict_NewPresized( 1 );
    tmp_dict_value_527 = const_str_digest_49613c72153db8c0c685d9a635c546dd;
    tmp_called_name_157 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_157 == NULL ))
    {
        tmp_called_name_157 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_157 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 1078;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_221 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_args_element_name_221 == NULL ))
    {
        tmp_args_element_name_221 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_args_element_name_221 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_hide" );
        exception_tb = NULL;

        exception_lineno = 1078;
        goto frame_exception_exit_1;
    }

    tmp_called_name_158 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_158 == NULL ))
    {
        tmp_called_name_158 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_158 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 1078;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_223 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_args_element_name_223 == NULL ))
    {
        tmp_args_element_name_223 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_args_element_name_223 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_out" );
        exception_tb = NULL;

        exception_lineno = 1078;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1078;
    {
        PyObject *call_args[] = { tmp_args_element_name_223 };
        tmp_args_element_name_222 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_158, call_args );
    }

    if ( tmp_args_element_name_222 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );

        exception_lineno = 1078;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 1078;
    {
        PyObject *call_args[] = { tmp_args_element_name_221, tmp_args_element_name_222 };
        tmp_dict_key_527 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_157, call_args );
    }

    Py_DECREF( tmp_args_element_name_222 );
    if ( tmp_dict_key_527 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );

        exception_lineno = 1078;
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_list_element_28, tmp_dict_key_527, tmp_dict_value_527 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        Py_DECREF( tmp_dict_key_527 );

        exception_lineno = 1078;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_dict_key_527 );
    PyList_SET_ITEM( tmp_dict_value_525, 2, tmp_list_element_28 );
    tmp_list_element_28 = _PyDict_NewPresized( 1 );
    tmp_dict_value_528 = const_str_digest_39e221f238aad8a83601c6acb181457f;
    tmp_dict_key_528 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_528 == NULL ))
    {
        tmp_dict_key_528 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_528 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "hasinitvalue" );
        exception_tb = NULL;

        exception_lineno = 1080;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_list_element_28, tmp_dict_key_528, tmp_dict_value_528 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );

        exception_lineno = 1080;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_525, 3, tmp_list_element_28 );
    tmp_dict_key_525 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_525, tmp_dict_value_525 );
    Py_DECREF( tmp_dict_value_525 );
    tmp_dict_value_529 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_dict_value_529 == NULL ))
    {
        tmp_dict_value_529 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_dict_value_529 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 1082;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_529 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_529, tmp_dict_value_529 );
    tmp_dict_value_530 = const_str_empty;
    tmp_dict_key_530 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_530, tmp_dict_value_530 );
    PyList_SET_ITEM( tmp_assign_source_90, 33, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 1 );
    tmp_called_name_159 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_159 == NULL ))
    {
        tmp_called_name_159 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_159 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 1087;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_224 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_args_element_name_224 == NULL ))
    {
        tmp_args_element_name_224 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_args_element_name_224 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 1087;
        goto frame_exception_exit_1;
    }

    tmp_called_name_160 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_160 == NULL ))
    {
        tmp_called_name_160 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_160 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 1087;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_226 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_args_element_name_226 == NULL ))
    {
        tmp_args_element_name_226 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_args_element_name_226 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexarray" );
        exception_tb = NULL;

        exception_lineno = 1087;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1087;
    {
        PyObject *call_args[] = { tmp_args_element_name_226 };
        tmp_args_element_name_225 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_160, call_args );
    }

    if ( tmp_args_element_name_225 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 1087;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 1087;
    {
        PyObject *call_args[] = { tmp_args_element_name_224, tmp_args_element_name_225 };
        tmp_dict_value_531 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_159, call_args );
    }

    Py_DECREF( tmp_args_element_name_225 );
    if ( tmp_dict_value_531 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 1087;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_531 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_531, tmp_dict_value_531 );
    Py_DECREF( tmp_dict_value_531 );
    PyList_SET_ITEM( tmp_assign_source_90, 34, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 1 );
    tmp_called_name_161 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_161 == NULL ))
    {
        tmp_called_name_161 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_161 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 1089;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_227 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_args_element_name_227 == NULL ))
    {
        tmp_args_element_name_227 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_args_element_name_227 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 1089;
        goto frame_exception_exit_1;
    }

    tmp_called_name_162 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_162 == NULL ))
    {
        tmp_called_name_162 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_162 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 1089;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_229 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_args_element_name_229 == NULL ))
    {
        tmp_args_element_name_229 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_args_element_name_229 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexarray" );
        exception_tb = NULL;

        exception_lineno = 1089;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1089;
    {
        PyObject *call_args[] = { tmp_args_element_name_229 };
        tmp_args_element_name_228 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_162, call_args );
    }

    if ( tmp_args_element_name_228 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 1089;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_230 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_args_element_name_230 == NULL ))
    {
        tmp_args_element_name_230 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_args_element_name_230 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_args_element_name_228 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isintent_nothide" );
        exception_tb = NULL;

        exception_lineno = 1089;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1089;
    {
        PyObject *call_args[] = { tmp_args_element_name_227, tmp_args_element_name_228, tmp_args_element_name_230 };
        tmp_dict_value_532 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_161, call_args );
    }

    Py_DECREF( tmp_args_element_name_228 );
    if ( tmp_dict_value_532 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );

        exception_lineno = 1089;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_532 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_532, tmp_dict_value_532 );
    Py_DECREF( tmp_dict_value_532 );
    PyList_SET_ITEM( tmp_assign_source_90, 35, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_533 = const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70;
    tmp_dict_key_533 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_533, tmp_dict_value_533 );
    tmp_dict_value_534 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isint1array );

    if (unlikely( tmp_dict_value_534 == NULL ))
    {
        tmp_dict_value_534 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isint1array );
    }

    if ( tmp_dict_value_534 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isint1array" );
        exception_tb = NULL;

        exception_lineno = 1093;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_534 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_534, tmp_dict_value_534 );
    tmp_dict_value_535 = const_str_empty;
    tmp_dict_key_535 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_535, tmp_dict_value_535 );
    PyList_SET_ITEM( tmp_assign_source_90, 36, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_536 = const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70;
    tmp_dict_key_536 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_536, tmp_dict_value_536 );
    tmp_dict_value_537 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray );

    if (unlikely( tmp_dict_value_537 == NULL ))
    {
        tmp_dict_value_537 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray );
    }

    if ( tmp_dict_value_537 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned_chararray" );
        exception_tb = NULL;

        exception_lineno = 1098;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_537 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_537, tmp_dict_value_537 );
    tmp_dict_value_538 = const_str_empty;
    tmp_dict_key_538 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_538, tmp_dict_value_538 );
    PyList_SET_ITEM( tmp_assign_source_90, 37, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_539 = const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70;
    tmp_dict_key_539 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_539, tmp_dict_value_539 );
    tmp_dict_value_540 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray );

    if (unlikely( tmp_dict_value_540 == NULL ))
    {
        tmp_dict_value_540 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray );
    }

    if ( tmp_dict_value_540 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned_shortarray" );
        exception_tb = NULL;

        exception_lineno = 1103;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_540 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_540, tmp_dict_value_540 );
    tmp_dict_value_541 = const_str_empty;
    tmp_dict_key_541 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_541, tmp_dict_value_541 );
    PyList_SET_ITEM( tmp_assign_source_90, 38, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_542 = const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70;
    tmp_dict_key_542 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_542, tmp_dict_value_542 );
    tmp_dict_value_543 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray );

    if (unlikely( tmp_dict_value_543 == NULL ))
    {
        tmp_dict_value_543 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray );
    }

    if ( tmp_dict_value_543 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isunsigned_long_longarray" );
        exception_tb = NULL;

        exception_lineno = 1108;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_543 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_543, tmp_dict_value_543 );
    tmp_dict_value_544 = const_str_empty;
    tmp_dict_key_544 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_544, tmp_dict_value_544 );
    PyList_SET_ITEM( tmp_assign_source_90, 39, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_545 = const_str_digest_72ebb0d3fb78e8bf57252d4c32c41c70;
    tmp_dict_key_545 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_545, tmp_dict_value_545 );
    tmp_dict_value_546 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_dict_value_546 == NULL ))
    {
        tmp_dict_value_546 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_dict_value_546 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplexarray" );
        exception_tb = NULL;

        exception_lineno = 1113;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_546 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_546, tmp_dict_value_546 );
    tmp_dict_value_547 = const_str_empty;
    tmp_dict_key_547 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_547, tmp_dict_value_547 );
    PyList_SET_ITEM( tmp_assign_source_90, 40, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_548 = _PyDict_NewPresized( 1 );
    tmp_dict_value_549 = const_str_digest_d704ce9f38840583240e1e34a2cd70e6;
    tmp_dict_key_549 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarrayofstrings );

    if (unlikely( tmp_dict_key_549 == NULL ))
    {
        tmp_dict_key_549 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarrayofstrings );
    }

    if ( tmp_dict_key_549 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_548 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarrayofstrings" );
        exception_tb = NULL;

        exception_lineno = 1118;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_548, tmp_dict_key_549, tmp_dict_value_549 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_548 );

        exception_lineno = 1118;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_548 = const_str_plain_callfortranappend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_548, tmp_dict_value_548 );
    Py_DECREF( tmp_dict_value_548 );
    tmp_dict_value_550 = const_str_plain_string;
    tmp_dict_key_550 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_550, tmp_dict_value_550 );
    tmp_dict_value_551 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringarray );

    if (unlikely( tmp_dict_value_551 == NULL ))
    {
        tmp_dict_value_551 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstringarray );
    }

    if ( tmp_dict_value_551 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstringarray" );
        exception_tb = NULL;

        exception_lineno = 1120;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_551 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_551, tmp_dict_value_551 );
    PyList_SET_ITEM( tmp_assign_source_90, 41, tmp_list_element_15 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_arg_rules, tmp_assign_source_90 );
    tmp_assign_source_91 = PyList_New( 5 );
    tmp_list_element_29 = _PyDict_NewPresized( 2 );
    tmp_dict_value_552 = _PyDict_NewPresized( 1 );
    tmp_dict_value_553 = const_str_digest_7bdd9ab4ad5ebd4af4db670afc5ddd0d;
    tmp_dict_key_553 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_553 == NULL ))
    {
        tmp_dict_key_553 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_553 == NULL )
    {
        Py_DECREF( tmp_assign_source_91 );
        Py_DECREF( tmp_list_element_29 );
        Py_DECREF( tmp_dict_value_552 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "debugcapi" );
        exception_tb = NULL;

        exception_lineno = 1128;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dict_value_552, tmp_dict_key_553, tmp_dict_value_553 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_91 );
        Py_DECREF( tmp_list_element_29 );
        Py_DECREF( tmp_dict_value_552 );

        exception_lineno = 1128;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_552 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_552, tmp_dict_value_552 );
    Py_DECREF( tmp_dict_value_552 );
    tmp_dict_value_554 = const_str_digest_f483abd4a09dac329f2aa8b9d8ccdc34;
    tmp_dict_key_554 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_554, tmp_dict_value_554 );
    PyList_SET_ITEM( tmp_assign_source_91, 0, tmp_list_element_29 );
    tmp_list_element_29 = _PyDict_NewPresized( 5 );
    tmp_dict_value_555 = const_str_digest_beaced962362efb12e32d7f656575481;
    tmp_dict_key_555 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_555, tmp_dict_value_555 );
    tmp_dict_value_556 = const_str_digest_d1ccc851c0352577c15e6c38110b33c1;
    tmp_dict_key_556 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_556, tmp_dict_value_556 );
    tmp_dict_value_557 = const_str_plain_CHECKSCALAR;
    tmp_dict_key_557 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_557, tmp_dict_value_557 );
    tmp_called_name_163 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_name_163 == NULL ))
    {
        tmp_called_name_163 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_name_163 == NULL )
    {
        Py_DECREF( tmp_assign_source_91 );
        Py_DECREF( tmp_list_element_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_and" );
        exception_tb = NULL;

        exception_lineno = 1134;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_231 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_args_element_name_231 == NULL ))
    {
        tmp_args_element_name_231 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_args_element_name_231 == NULL )
    {
        Py_DECREF( tmp_assign_source_91 );
        Py_DECREF( tmp_list_element_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isscalar" );
        exception_tb = NULL;

        exception_lineno = 1134;
        goto frame_exception_exit_1;
    }

    tmp_called_name_164 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_name_164 == NULL ))
    {
        tmp_called_name_164 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_name_164 == NULL )
    {
        Py_DECREF( tmp_assign_source_91 );
        Py_DECREF( tmp_list_element_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "l_not" );
        exception_tb = NULL;

        exception_lineno = 1134;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_233 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_args_element_name_233 == NULL ))
    {
        tmp_args_element_name_233 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_args_element_name_233 == NULL )
    {
        Py_DECREF( tmp_assign_source_91 );
        Py_DECREF( tmp_list_element_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iscomplex" );
        exception_tb = NULL;

        exception_lineno = 1134;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1134;
    {
        PyObject *call_args[] = { tmp_args_element_name_233 };
        tmp_args_element_name_232 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_164, call_args );
    }

    if ( tmp_args_element_name_232 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_91 );
        Py_DECREF( tmp_list_element_29 );

        exception_lineno = 1134;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 1134;
    {
        PyObject *call_args[] = { tmp_args_element_name_231, tmp_args_element_name_232 };
        tmp_dict_value_558 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_163, call_args );
    }

    Py_DECREF( tmp_args_element_name_232 );
    if ( tmp_dict_value_558 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_91 );
        Py_DECREF( tmp_list_element_29 );

        exception_lineno = 1134;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_558 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_558, tmp_dict_value_558 );
    Py_DECREF( tmp_dict_value_558 );
    tmp_dict_value_559 = const_str_empty;
    tmp_dict_key_559 = const_str_plain__break;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_559, tmp_dict_value_559 );
    PyList_SET_ITEM( tmp_assign_source_91, 1, tmp_list_element_29 );
    tmp_list_element_29 = _PyDict_NewPresized( 5 );
    tmp_dict_value_560 = const_str_digest_69bcf359a7b50491550fde7484871e51;
    tmp_dict_key_560 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_560, tmp_dict_value_560 );
    tmp_dict_value_561 = const_str_digest_7e6e68b4e0121e9d083f9892bcee2b5b;
    tmp_dict_key_561 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_561, tmp_dict_value_561 );
    tmp_dict_value_562 = const_str_plain_CHECKSTRING;
    tmp_dict_key_562 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_562, tmp_dict_value_562 );
    tmp_dict_value_563 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_dict_value_563 == NULL ))
    {
        tmp_dict_value_563 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_dict_value_563 == NULL )
    {
        Py_DECREF( tmp_assign_source_91 );
        Py_DECREF( tmp_list_element_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isstring" );
        exception_tb = NULL;

        exception_lineno = 1140;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_563 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_563, tmp_dict_value_563 );
    tmp_dict_value_564 = const_str_empty;
    tmp_dict_key_564 = const_str_plain__break;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_564, tmp_dict_value_564 );
    PyList_SET_ITEM( tmp_assign_source_91, 2, tmp_list_element_29 );
    tmp_list_element_29 = _PyDict_NewPresized( 5 );
    tmp_dict_value_565 = const_str_plain_CHECKARRAY;
    tmp_dict_key_565 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_565, tmp_dict_value_565 );
    tmp_dict_value_566 = const_str_digest_488c7d63531ff8d954b32cb09970fd16;
    tmp_dict_key_566 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_566, tmp_dict_value_566 );
    tmp_dict_value_567 = const_str_digest_87274c2470e5d5c885675977ae6a3172;
    tmp_dict_key_567 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_567, tmp_dict_value_567 );
    tmp_dict_value_568 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_dict_value_568 == NULL ))
    {
        tmp_dict_value_568 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_dict_value_568 == NULL )
    {
        Py_DECREF( tmp_assign_source_91 );
        Py_DECREF( tmp_list_element_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "isarray" );
        exception_tb = NULL;

        exception_lineno = 1146;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_568 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_568, tmp_dict_value_568 );
    tmp_dict_value_569 = const_str_empty;
    tmp_dict_key_569 = const_str_plain__break;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_569, tmp_dict_value_569 );
    PyList_SET_ITEM( tmp_assign_source_91, 3, tmp_list_element_29 );
    tmp_list_element_29 = PyDict_Copy( const_dict_c3b8e398c8954454fba85f0a68a2b3f2 );
    PyList_SET_ITEM( tmp_assign_source_91, 4, tmp_list_element_29 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_check_rules, tmp_assign_source_91 );

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif
    popFrameStack();

    assertFrameObject( frame_module );
    Py_DECREF( frame_module );

    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_module, exception_lineno );
    }
    else if ( exception_tb->tb_frame != frame_module )
    {
        PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_module, exception_lineno );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }

    // Put the previous frame back on top.
    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_module->f_executing -= 1;
#endif
    Py_DECREF( frame_module );

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_1:;
    tmp_assign_source_92 = MAKE_FUNCTION_function_1_buildmodule_of_numpy$f2py$rules(  );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_buildmodule, tmp_assign_source_92 );
    tmp_assign_source_93 = PyDict_Copy( const_dict_055a5e2e8d3048ab4922e8d2791b57c7 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stnd, tmp_assign_source_93 );
    tmp_assign_source_94 = MAKE_FUNCTION_function_2_buildapi_of_numpy$f2py$rules(  );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_buildapi, tmp_assign_source_94 );

    return MOD_RETURN_VALUE( module_numpy$f2py$rules );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
