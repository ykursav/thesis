start2016-11-03 10:17:49.271405
(True, 28, 'replica detected')
Total time:0.385990142822
Wrote profile results to mainprocess.py.lprof
Timer unit: 1e-06 s

Total time: 0.063553 s
File: preprocessing.py
Function: get_edged at line 30

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    30                                               @profile
    31                                               def get_edged(self, G):
    32         1        21634  21634.0     34.0          blur = self.get_blurred(self.gray_image(self.image), G)
    33         1        31955  31955.0     50.3          th = cv2.adaptiveThreshold(blur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV,11,2)
    34                                           
    35         1         9964   9964.0     15.7          return cv2.dilate(th, np.ones((3,3),np.uint8), iterations = 1)

Total time: 0.145254 s
File: preprocessing.py
Function: get_contour at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                               @profile
    38                                               def get_contour(self, G):
    39         1        63797  63797.0     43.9          edged = self.get_edged(G)
    40         1        15582  15582.0     10.7          __, contours, hierarchy = cv2.findContours(edged, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    41         1           20     20.0      0.0          approx = 0
    42         1           11     11.0      0.0          first = False
    43         1            8      8.0      0.0          no_contour = True
    44         1            7      7.0      0.0          last_cnt = 0
    45       633         4871      7.7      3.4          for cnt in contours:
    46       632        13713     21.7      9.4              epsilon = 0.05 * cv2.arcLength(cnt, True)
    47       632        22061     34.9     15.2              new_approx = cv2.approxPolyDP(cnt, epsilon, True)
    48       632         6118      9.7      4.2              if first == False:
    49         1           36     36.0      0.0                  if self.check_points(new_approx):
    50         1            7      7.0      0.0                      last_cnt = cnt
    51         1           43     43.0      0.0                      approx = cv2.approxPolyDP(cnt, epsilon, True)
    52         1            9      9.0      0.0                      first = True
    53         1           10     10.0      0.0                      no_contour = False
    54       631        17993     28.5     12.4              elif (cv2.contourArea(last_cnt) < cv2.contourArea(cnt)):
    55        41          767     18.7      0.5                  if self.check_points(new_approx):
    56         8           62      7.8      0.0                      last_cnt = cnt
    57         8           67      8.4      0.0                      approx = new_approx
    58         8           58      7.2      0.0                      no_contour = False
    59                                                               
    60         1            7      7.0      0.0          if first == False:
    61                                                       return -1
    62                                                   else:
    63         1            7      7.0      0.0              return approx

