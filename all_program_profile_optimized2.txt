start2016-12-10 20:35:38.327339
(True, 11, 'replica detected')
Total time:0.145822048187
Wrote profile results to mainprocess.py.lprof
Timer unit: 1e-06 s

Total time: 0.022055 s
File: extraction.py
Function: get_average_luminance_of_block at line 55

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    55                                           @profile    
    56                                           def get_average_luminance_of_block(block):
    57       477        22055     46.2    100.0      return sum(block) / (8 * 8)

Total time: 0.002124 s
File: extraction.py
Function: get_blocks at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           @profile
    63                                           def get_blocks():
    64                                               '''Dividing cropped image N x N blocks by M overlapping'''
    65         1           39     39.0      1.8      I_vis_blur_y = zeros((number_of_blocks * N, number_of_blocks * N))
    66         1          191    191.0      9.0      I_vis_blur_x = zeros((L, number_of_blocks * N))
    67        32          112      3.5      5.3      for x in xrange(0, L - M, M):
    68        31          701     22.6     33.0          I_vis_blur_x[:, x * 2:x * 2 + N] = image[:, x:x + N]
    69                                           
    70        32          110      3.4      5.2      for y in xrange(0, L - M, M):
    71        31          968     31.2     45.6          I_vis_blur_y[y * 2:y * 2 + N, :] = I_vis_blur_x[y:y + N, :]
    72                                           
    73                                           
    74         1            3      3.0      0.1      return I_vis_blur_y

Total time: 0.014259 s
File: extraction.py
Function: basic_rotations at line 76

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    76                                           @profile
    77                                           def basic_rotations(rot0):
    78         1            8      8.0      0.1      center = (N * number_of_blocks) / 2
    79         1           69     69.0      0.5      rot_matrix = getRotationMatrix2D((center, center), 90, 1)
    80         1         4756   4756.0     33.4      rot90 = warpAffine(rot0, rot_matrix, (center * 2, center * 2))
    81         1         4723   4723.0     33.1      rot180 = warpAffine(rot90, rot_matrix, (center * 2, center * 2))
    82         1         4650   4650.0     32.6      rot270 = warpAffine(rot180, rot_matrix, (center * 2, center * 2))
    83         1           35     35.0      0.2      rot90 = rot90[0:120, 0:120]
    84         1            8      8.0      0.1      rot180 = rot180[0:120, 0:120]
    85         1            6      6.0      0.0      rot270 = rot270[0:120, 0:120]
    86                                           ##        fVertical0 = flip(image, 0)
    87                                           ##        fHorizontal0 = flip(image, 1)
    88                                           ##        fVertical90 = flip(rot90, 0)
    89                                           ##        fHorizontal90 = flip(rot90, 1)
    90                                           ##        fVertical180 = flip(rot180, 0)
    91                                           ##        fHorizontal180 = flip(rot180, 1)
    92                                           ##        fVertical270 = flip(rot270, 0)
    93                                           ##        fHorizontal270 = flip(rot270, 1)
    94                                           
    95         1            4      4.0      0.0      return rot90, rot180, rot270

Total time: 0.042827 s
File: extraction.py
Function: get_fragment at line 99

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    99                                           @profile
   100                                           def get_fragment(x, y, only_rotate):
   101       120          455      3.8      1.1      if only_rotate == 1:
   102                                                   # p = Pool(processes =4)
   103                                                   # results1 = p.apply_async(get_average_luminance_of_block, [rot0[y * 8:y * 8 + N, x * 8:x * 8 + N]])
   104                                                   # results2 = p.apply_async(get_average_luminance_of_block, [rot90[y * 8:y * 8 + N, x * 8:x * 8 + N]])
   105                                                   # results3 = p.apply_async(get_average_luminance_of_block, [rot180[y * 8:y * 8 + N, x * 8:x * 8 + N]])
   106                                                   # results4 = p.apply_async(get_average_luminance_of_block, [rot270[y * 8:y * 8 + N, x * 8:x * 8 + N]])
   107                                                   # p.close()
   108                                                   # p.join
   109                                                   #results = []
   110                                                   #jobs = []
   111                                                   #num = Value('d', 0.0)
   112                                                   # for rots in xrange(4):
   113                                                   #     proc = Process(target = get_average_luminance_of_block_pro, args =(x, y, rots, num,))
   114                                                   #     results.append(num.value)
   115                                                   #     jobs.append(proc)
   116                                                   #     proc.start
   117                                                   # for proc in jobs:
   118                                                   #     proc.join()
   119                                                   # for i in range(4):
   120                                                   #     if i == 0:
   121                                                   #         t1 = Thread(target=thread_luminance, args=(rot0[y * 8:y * 8 + N, x * 8:x * 8 + N],q,))
   122                                                   #         t1.start()
   123                                                   #     elif i == 1:
   124                                                   #         t2 = Thread(target=thread_luminance, args=(rot90[y * 8:y * 8 + N, x * 8:x * 8 + N],q,))
   125                                                   #         t2.start()
   126                                                   #     elif i == 2:
   127                                                   #         t3 = Thread(target=thread_luminance, args=(rot180[y * 8:y * 8 + N, x * 8:x * 8 + N],q,))
   128                                                   #         t3.start()
   129                                                   #     else:
   130                                                   #         t4 = Thread(target=thread_luminance, args=(rot270[y * 8:y * 8 + N, x * 8:x * 8 + N],q,))
   131                                                   #         t4.start()
   132                                           
   133                                                   # t1.join()
   134                                                   # t2.join()
   135                                                   # t3.join()
   136                                                   # t4.join()
   137                                                   # q1 = Queue.Queue()
   138                                                   # t1 = Thread(target=thread_luminance, args=(rot0[y * 8:y * 8 + N, x * 8:x * 8 + N],q1,))
   139                                                   # t2 = Thread(target=thread_luminance, args=(rot90[y * 8:y * 8 + N, x * 8:x * 8 + N],q1,))
   140                                                   # t3 = Thread(target=thread_luminance, args=(rot180[y * 8:y * 8 + N, x * 8:x * 8 + N],q1,))
   141                                                   # t4 = Thread(target=thread_luminance, args=(rot270[y * 8:y * 8 + N, x * 8:x * 8 + N],q1,))
   142                                                   # t1.start()
   143                                                   # t2.start()
   144                                                   # t3.start()
   145                                                   # t4.start()
   146                                                   # t1.join()
   147                                                   # t2.join()
   148                                                   # t3.join()
   149                                                   # t4.join()
   150                                                   # print q1.get()
   151       119         1524     12.8      3.6          results = map(get_average_luminance_of_block, [rot0[y * 8:y * 8 + N, x * 8:x * 8 + N], rot90[y * 8:y * 8 + N, x * 8:x * 8 + N], \
   152       119        31447    264.3     73.4              rot180[y * 8:y * 8 + N, x * 8:x * 8 + N], rot270[y * 8:y * 8 + N, x * 8:x * 8 + N]])
   153                                                   #lum1 = get_average_luminance_of_block(rot0[y * 8:y * 8 + N, x * 8:x * 8 + N])
   154                                                   #lum2 = get_average_luminance_of_block(rot90[y * 8:y * 8 + N, x * 8:x * 8 + N])
   155                                                   #lum3 = get_average_luminance_of_block(rot180[y * 8:y * 8 + N, x * 8:x * 8 + N])
   156                                                   #lum4 = get_average_luminance_of_block(rot270[y * 8:y * 8 + N, x * 8:x * 8 + N])
   157                                                   # print lum1
   158       119         1045      8.8      2.4          avg_lum = (results[0] + results[1] + results[2] + results[3]) / 4
   159                                                   #std_lum = np.std(np.array([lum1, lum2, lum3, lum4]))
   160       119         7727     64.9     18.0          std_lum = libextraction.calculateSD(array([results[0], results[1], results[2], results[3]]).ctypes.data_as(c_void_p))
   161       119          541      4.5      1.3          return avg_lum, std_lum
   162                                           
   163         1            4      4.0      0.0      elif only_rotate == -1:
   164         1           73     73.0      0.2          lum1 = get_average_luminance_of_block(rot0[y * 8:y * 8 + N, x * 8:x * 8 + N])
   165         1            3      3.0      0.0          avg_lum = lum1
   166         1            4      4.0      0.0          std_lum = 0
   167                                                   
   168         1            4      4.0      0.0          return avg_lum, std_lum

Total time: 0.068187 s
File: extraction.py
Function: get_all_fragments at line 195

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   195                                           @profile
   196                                           def get_all_fragments():
   197                                               global rot0, rot90, rot180, rot270
   198         1            4      4.0      0.0      fragments_list = [[],[]]
   199         1         2554   2554.0      3.7      rot0 = get_blocks()
   200         1        14399  14399.0     21.1      rot90, rot180, rot270 = basic_rotations(rot0)
   201         1            4      4.0      0.0      counter_x = 0
   202         1            4      4.0      0.0      counter_y = 0
   203         1            5      5.0      0.0      append_std_lum = fragments_list[0].append
   204         1            4      4.0      0.0      append_avg_lum = fragments_list[1].append
   205       121          433      3.6      0.6      while(counter_x < 14 or counter_y < 14):
   206       120          393      3.3      0.6          if counter_x == 15:
   207        14           47      3.4      0.1              counter_y += 1
   208        14           44      3.1      0.1              counter_x = counter_y
   209       120          432      3.6      0.6          if counter_x == counter_y or counter_x == 14:
   210        29          103      3.6      0.2              if counter_x == 14 and counter_y == 14:
   211         1            4      4.0      0.0                  fragment_time = time.time()
   212         1          136    136.0      0.2                  avg_lum, std_lum = get_fragment(counter_x, counter_y, -1)
   213         1            5      5.0      0.0                  fragment_end_time = time.time()
   214         1            4      4.0      0.0                  append_std_lum(std_lum)
   215         1            3      3.0      0.0                  append_avg_lum(avg_lum)
   216                                                       else:
   217        28          130      4.6      0.2                  fragment_time = time.time()
   218        28        11499    410.7     16.9                  avg_lum, std_lum = get_fragment(counter_x, counter_y, 1)
   219        28          136      4.9      0.2                  fragment_end_time = time.time()
   220        28          111      4.0      0.2                  append_std_lum(std_lum)
   221        28          101      3.6      0.1                  append_avg_lum(avg_lum)
   222                                                   else:
   223        91        36468    400.7     53.5              avg_lum, std_lum = get_fragment(counter_x, counter_y, 1)
   224        91          429      4.7      0.6              append_std_lum(std_lum)
   225        91          327      3.6      0.5              append_avg_lum(avg_lum)
   226       120          405      3.4      0.6          counter_x += 1
   227         1            3      3.0      0.0      return fragments_list

Total time: 0.073827 s
File: extraction.py
Function: get_signature at line 229

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   229                                           @profile
   230                                           def get_signature():
   231         1           10     10.0      0.0      signature = bitarray()
   232         1            3      3.0      0.0      counter_list = 0
   233         1            3      3.0      0.0      counter_fragment = 0
   234         1            4      4.0      0.0      sig_append = signature.append
   235         1        71430  71430.0     96.8      fragments = get_all_fragments()
   236         3            9      3.0      0.0      for features in fragments:
   237       240          707      2.9      1.0          for x in range(0, len(features) -1):
   238       238          852      3.6      1.2              if features[x] < features[x + 1]:
   239       141          479      3.4      0.6                  sig_append(True)
   240                                                       else:
   241        97          327      3.4      0.4                  sig_append(False)
   242                                           
   243         1            3      3.0      0.0      return signature

Total time: 0.00782 s
File: preprocessing.py
Function: gray_image at line 36

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    36                                           @profile
    37                                           def gray_image(image):
    38         2         7820   3910.0    100.0      return cvtColor(image, COLOR_BGR2GRAY)

Total time: 4.1e-05 s
File: preprocessing.py
Function: get_width_height at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                           @profile
    43                                           def get_width_height(image):
    44         3           29      9.7     70.7      height, width = image.shape[:2]
    45         3           12      4.0     29.3      return [width, height]

Total time: 0.028891 s
File: preprocessing.py
Function: get_edged at line 47

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    47                                           @profile
    48                                           def get_edged(G):
    49         1         4744   4744.0     16.4      gray = gray_image(image)
    50         1         3140   3140.0     10.9      blur = get_blurred(gray, G)
    51         1         2555   2555.0      8.8      v = median(blur)
    52                                               #th = adaptiveThreshold(blur, 255, ADAPTIVE_THRESH_GAUSSIAN_C, THRESH_BINARY_INV,11,2)
    53         1           23     23.0      0.1      lower = int(max(0, (1.0 - 0.33) * v))
    54         1           10     10.0      0.0      upper = int(max(255, (1.0 + 0.33) * v))
    55         1        10674  10674.0     36.9      canny = Canny(gray, lower, upper)
    56                                           
    57         1         7745   7745.0     26.8      return dilate(canny, ones((5,5), uint8), iterations = 1)

Total time: 0.039163 s
File: preprocessing.py
Function: get_contour at line 59

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    59                                           @profile
    60                                           def get_contour(G):
    61         1        29030  29030.0     74.1      edged = get_edged(G)
    62         1         4825   4825.0     12.3      __, contours, hierarchy = findContours(edged, RETR_LIST, CHAIN_APPROX_SIMPLE)
    63         1            9      9.0      0.0      approx = 0
    64         1            7      7.0      0.0      first = False
    65         1            4      4.0      0.0      no_contour = True
    66         1            4      4.0      0.0      last_cnt = 0
    67       106          396      3.7      1.0      for cnt in contours:
    68       105          923      8.8      2.4          epsilon = 0.05 * arcLength(cnt, True)
    69       105         1834     17.5      4.7          new_approx = approxPolyDP(cnt, epsilon, True)
    70       105          444      4.2      1.1          if first == False:
    71         1           55     55.0      0.1              if check_points(new_approx):
    72         1            4      4.0      0.0                  last_cnt = cnt
    73         1           18     18.0      0.0                  approx = approxPolyDP(cnt, epsilon, True)
    74         1            4      4.0      0.0                  first = True
    75         1            4      4.0      0.0                  no_contour = False
    76       104         1261     12.1      3.2          elif (contourArea(last_cnt) < contourArea(cnt)):
    77        10          277     27.7      0.7              if check_points(new_approx):
    78         5           19      3.8      0.0                  last_cnt = cnt
    79         5           20      4.0      0.1                  approx = new_approx
    80         5           19      3.8      0.0                  no_contour = False
    81                                                           
    82         1            3      3.0      0.0      if first == False:
    83                                                   return -1
    84                                               else:
    85         1            3      3.0      0.0          return approx

Total time: 0.000775 s
File: preprocessing.py
Function: order_contour at line 87

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    87                                           @profile
    88                                           def order_contour(points):
    89         1           33     33.0      4.3      ordered_points = zeros((4, 2), dtype = "float32")
    90                                               #sum of point to detect max and minimum sums
    91                                               #maximum sum is the right bottom corner and minimum left top corner
    92                                               #points are arranged starting from top left to clock wise indexing
    93         1          143    143.0     18.5      sum_point = points.sum(axis = 2)
    94                                               
    95         1           64     64.0      8.3      ordered_points[0] = points[argmin(sum_point)].flatten()
    96         1           36     36.0      4.6      ordered_points[2] = points[argmax(sum_point)].flatten()
    97                                           
    98         1          265    265.0     34.2      points = delete(points, argmin(sum_point), 0)
    99         1          190    190.0     24.5      points = delete(points, argmax(sum_point) - 1, 0)
   100         1           14     14.0      1.8      if points[0][0][0] > points[1][0][0]:
   101         1           14     14.0      1.8          ordered_points[1] = points[0][0].copy()
   102         1           12     12.0      1.5          ordered_points[3] = points[1][0].copy()
   103                                               else:
   104                                                   ordered_points[1] = points[1][0].copy()
   105                                                   ordered_points[3] = points[0][0].copy()
   106                                           
   107                                               # new_image = self.image.copy()
   108                                               # cv2.circle(new_image,tuple(ordered_points[0]),5,[0,255,0],-1)
   109                                               # cv2.circle(new_image,tuple(ordered_points[1]),5,[0,255,0],-1)
   110                                               # cv2.circle(new_image,tuple(ordered_points[2]),5,[0,255,0],-1)
   111                                               # cv2.circle(new_image,tuple(ordered_points[3]),5,[0,255,0],-1)
   112                                               # cv2.imwrite("ordere_points.jpg", new_image)
   113         1            4      4.0      0.5      return ordered_points

Total time: 7e-05 s
File: preprocessing.py
Function: check_points at line 115

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   115                                           @profile
   116                                           def check_points(points):
   117                                               '''Checking there is four points to make a rectangle shape or not'''
   118        11           41      3.7     58.6      if len(points) == 4:
   119         6           15      2.5     21.4          return True 
   120                                               else:
   121         5           14      2.8     20.0          return False

Total time: 0.000211 s
File: preprocessing.py
Function: distance_calculator at line 123

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   123                                           @profile
   124                                           def distance_calculator(p1, p2):
   125                                               '''Calculates distance between 2 points'''
   126                                           ##        print libextraction.calSqrt(array(p1[0], p1[1]).ctypes.data_as(ctypes.c_void_p), array(p2[0], p2[1]).ctypes.data_as(ctypes.c_void_p))
   127                                           ##        print p1
   128         4          211     52.8    100.0      return sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

Total time: 0.01367 s
File: preprocessing.py
Function: get_perspective at line 130

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   130                                           @profile
   131                                           def get_perspective(points, counter):
   132                                               global warped
   133         1            5      5.0      0.0      if len(points) != 1: 
   134         1           43     43.0      0.3          width, height = get_width_height(image)
   135         1          845    845.0      6.2          ordered_points = order_contour(points)
   136                                                   
   137         1          114    114.0      0.8          width_perspective = int(max(distance_calculator(ordered_points[0], ordered_points[1]), \
   138         1           76     76.0      0.6                                      distance_calculator(ordered_points[2], ordered_points[3])))
   139                                           
   140         1           68     68.0      0.5          height_perspective = int(max(distance_calculator(ordered_points[0], ordered_points[3]), \
   141         1           70     70.0      0.5                                       distance_calculator(ordered_points[1], ordered_points[2])))
   142                                                   
   143         1            8      8.0      0.1          img_size = array([[0, 0], [width_perspective - 1, 0], [width_perspective - 1, height_perspective -1], \
   144         1           42     42.0      0.3              [0, height_perspective - 1]], dtype = "float32")
   145                                           ##            if width_perspective < (self.width / 4) or height_perspective < (self.height / 4):
   146                                           ##                return 20
   147                                                   #3x3 blur mask
   148         1         3194   3194.0     23.4          warped_image = warpPerspective(gray_image(image), \
   149         1          217    217.0      1.6                                             getPerspectiveTransform(ordered_points, img_size), \
   150         1         6055   6055.0     44.3                                             (width_perspective, height_perspective))
   151                                                   
   152         1            8      8.0      0.1          if width_perspective > height_perspective:     
   153         1         1148   1148.0      8.4              warped_image = resize(warped_image, (500, 300), INTER_NEAREST)
   154                                                   elif height_perspective > width_perspective:
   155                                                       warped_image = resize(warped_image, (300, 500), INTER_NEAREST)            
   156         1         1770   1770.0     12.9          warped = get_blurred(warped_image, 3)
   157                                                   #imwrite("warped_images/warped" + str(counter) + ".jpg", warped_image)
   158                                           
   159         1            7      7.0      0.1          return 30
   160                                           
   161                                               else:
   162                                                   return 10

Total time: 0.000446 s
File: preprocessing.py
Function: get_scaled at line 164

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   164                                           @profile
   165                                           def get_scaled():
   166                                               global resized_image
   167                                               '''Scales image short edge to L value '''
   168         1           45     45.0     10.1      width, height = get_width_height(warped)
   169         1            3      3.0      0.7      new_width = 0
   170         1            3      3.0      0.7      new_height = 0
   171         1            4      4.0      0.9      if height > width:
   172                                                   new_height = int(floor(float(height) * (L / float(width))))
   173                                                   new_width = L
   174         1            3      3.0      0.7      elif height < width:
   175         1           68     68.0     15.2          new_width = int(floor(float(width) * (L / float(height))))
   176         1            3      3.0      0.7          new_height = L
   177                                               elif height == width:
   178                                                   new_width = L
   179                                                   new_height = L
   180         1            4      4.0      0.9      resized_image = resize(warped, (new_width, new_height), \
   181         1          313    313.0     70.2      interpolation = INTER_NEAREST)

Total time: 0.000587 s
File: preprocessing.py
Function: get_cropped at line 184

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   184                                           @profile    
   185                                           def get_cropped():
   186                                               '''Cropping image middle part L x L'''
   187         1          511    511.0     87.1      get_scaled()
   188         1           42     42.0      7.2      [width, height] = get_width_height(resized_image)
   189         1            3      3.0      0.5      if width != height:
   190         1            3      3.0      0.5          if width > height:
   191         1            5      5.0      0.9              if width % 2 == 0:
   192                                                           crop_width = width / 2 - 1
   193                                                           return resized_image[:, crop_width - L / 2:crop_width + L / 2]
   194                                                       else:
   195         1            5      5.0      0.9                  crop_width = width / 2 - 1
   196         1           18     18.0      3.1                  return resized_image[:, crop_width - (L/ 2 - 1):crop_width + (L/ 2 + 1)]
   197                                                   else:
   198                                                       if height % 2 == 0:
   199                                                           crop_height = height / 2 - 1
   200                                                           return resized_image[crop_height - L / 2:crop_height + L / 2, :]
   201                                                       else:
   202                                                           crop_height = height / 2 - 1
   203                                                           return resized_image[crop_height - (L/ 2 - 1):crop_height + (L/ 2 + 1), :]

Total time: 0.004757 s
File: preprocessing.py
Function: get_blurred at line 206

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   206                                           @profile
   207                                           def get_blurred(image, G):
   208                                               '''Blurring cropped image'''
   209         2         4757   2378.5    100.0      return GaussianBlur(image, (G, G), 0, 0)

